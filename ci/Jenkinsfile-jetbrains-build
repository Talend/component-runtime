/**
 * Copyright (C) 2006-2025 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Imports

// Credentials
final def ossrhCredentials = usernamePassword(
    credentialsId: 'ossrh-credentials',
    usernameVariable: 'OSSRH_USER',
    passwordVariable: 'OSSRH_PASS')
final def nexusCredentials = usernamePassword(
    credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')
final def jetbrainsToken = string(
    credentialsId: 'jetbrains-token',
    variable: 'JETBRAINS_TOKEN')


// In PR environment, the branch name is not valid and should be swap with pr name.
final String pull_request_id = env.CHANGE_ID
final String branch_name = pull_request_id != null ? env.CHANGE_BRANCH : env.BRANCH_NAME

// Job config
final String extraBuildParams = ""


pipeline {
  libraries {
    lib("connectors-lib@main")  // https://github.com/Talend/tdi-jenkins-shared-libraries
  }
  agent {
    kubernetes {
      yamlFile '.jenkins/jenkins_pod.yml'
      defaultContainer 'main'
    }
  }

  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: '10'))
    timeout(time: 60, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }

  triggers {
    cron(branch_name == "master" ? "0 0 * * *" : "")
  }

  parameters {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "BASIC_CONFIG", sectionHeader: "Basic configuration",
              sectionHeaderStyle: """ background-color: #ABEBC6;
                text-align: center; font-size: 35px !important; font-weight : bold; """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    string(name: 'JAVA_VERSION',
           defaultValue: 'from .tool-versions',
           description: """Provided java version will be installed with asdf  
                        Examples: adoptopenjdk-11.0.22+7, adoptopenjdk-17.0.11+9 """)

    string(name: 'GRADLE_VERSION',
           defaultValue: 'from bundle',
           description: """TODO, setup of gradle is not implemented""")

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "DEPLOY_CONFIG", sectionHeader: "Deployment configuration",
              sectionHeaderStyle: """ background-color: #F9E79F;
                text-align: center; font-size: 35px !important; font-weight : bold; """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    booleanParam(
        name: 'VERIFY',
        defaultValue: false,
        description: '''Use jetbrains verify gradle to check the plugin.  ''')

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "QUALIFIER_CONFIG", sectionHeader: "Qualifier configuration",
              sectionHeaderStyle: """ background-color: #AED6F1;
                text-align: center; font-size: 35px !important; font-weight : bold; """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    string(
        name: 'VERSION_QUALIFIER',
        defaultValue: 'DEFAULT',
        description: '''WARNING: NOT Implemented yet''')

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "ADVANCED_CONFIG", sectionHeader: "Advanced configuration",
              sectionHeaderStyle: """ background-color: #F8C471;
                text-align: center; font-size: 35px !important; font-weight : bold; """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    string(
        name: 'EXTRA_BUILD_PARAMS',
        defaultValue: '',
        description: 'Add some extra parameters to gradle commands. Applies to all maven calls.')

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "EXPERT_CONFIG", sectionHeader: "Expert configuration",
              sectionHeaderStyle: """ background-color: #A9A9A9;
                text-align: center; font-size: 35px !important; font-weight : bold;""")
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    booleanParam(
        name: 'RELEASE',
        defaultValue: false,
        description: '''This will release the actual maintenance version of the plugin.  '')
                        WARNING: you need to be in a maintenance branch after the release
                        Exemple: 
                          - You are on maintenance 1.80 maintenance branch
                          - The actual version is 1.80.2-SNAPSHOT
                          - You will release the 1.80.1 version on jetbrains
                        REMARK: After the release, you need to connect to jetbrains to check the deploy and accept it.
                        ''')

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "DEBUG_CONFIG", sectionHeader: "Jenkins job debug configuration ",
              sectionHeaderStyle: """ background-color: #FF0000;
                text-align: center; font-size: 35px !important; font-weight : bold;""")
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    booleanParam(
        name: 'JENKINS_DEBUG',
        defaultValue: false,
        description: 'Add an extra step to the pipeline allowing to keep the pod alive for debug purposes.')
  }

  stages {
    stage('Preliminary steps') {
      steps {

        ///////////////////////////////////////////
        // Login tasks
        ///////////////////////////////////////////

        ///////////////////////////////////////////
        // asdf install
        ///////////////////////////////////////////
        script {
          echo "edit asdf tool version with version from jenkins param"

          String javaVersion = asdfTools.setVersion("$env.WORKSPACE/.tool-versions",
                                                    'java', params.JAVA_VERSION)

          String gradleVersion = 'gradle-8.13' // FIXME read it form distributionUrl
          jenkinsJobTools.job_description_append("Use java $javaVersion with graddle  $gradleVersion")

          println "asdf install the content of repository .tool-versions'\n"
          sh 'bash .jenkins/scripts/asdf_install.sh'
        }

        ///////////////////////////////////////////
        // Variables init
        ///////////////////////////////////////////
        script {
          extraBuildParams = assemblyExtraBuildParams()

        }

        ///////////////////////////////////////////
        // Pom version and Qualifier management
        ///////////////////////////////////////////

        ///////////////////////////////////////////
        // Updating build displayName and description
        ///////////////////////////////////////////
        script {
          String deploy_info = ''
          if (params.RELEASE) {
            deploy_info = deploy_info + ' RELEASE'
          }

          jenkinsJobTools.job_name_creation(deploy_info)

          // updating build description
          String description = """
                      Debug: $params.JENKINS_DEBUG  
                      Extra build args: $extraBuildParams  """.stripIndent()
          jenkinsJobTools.job_description_append(description)
        }
      }
      post {
        always {
          println "Artifact .gradle files for analysis if needed"
          archiveArtifacts artifacts: '**/*.gradle*', allowEmptyArchive: false, onlyIfSuccessful: false
        }
      }
    }
    stage('Preparation') {
      steps {
        script {
          withCredentials([ossrhCredentials,
                           nexusCredentials]) {
            sh """\
            #!/usr/bin/env bash
            set -xe
            cd talend-component-kit-intellij-plugin
            bash scripts/0.preparation.sh
            """.stripIndent()
          }
        }
      }
    }
    stage('Prepare for release') {
      steps {
        script {
          withCredentials([ossrhCredentials,
                           nexusCredentials]) {
            echo "Read version." // TODO
            String gradleVersion = FileController.readFileImpl(executionFilePath).trim().replace('"', '')
            echo "Edit version." // TODO
            echo "Ask if ok for edit version and release." // TODO
          }
        }
      }
    }
    stage('Gradle compile') {
      steps {
        script {
          withCredentials([ossrhCredentials,
                           nexusCredentials]) {
            sh """\
            #!/usr/bin/env bash
            set -xe
            cd talend-component-kit-intellij-plugin
            bash scripts/1.compile.sh
            """.stripIndent()
          }
        }
      }
    }
    stage('Gradle test') {
      steps {
        script {
          withCredentials([ossrhCredentials,
                           nexusCredentials]) {
            sh """\
            #!/usr/bin/env bash
            set -xe
            cd talend-component-kit-intellij-plugin
            bash scripts/2.test.sh
            """.stripIndent()
          }
        }
      }
      post {
        always {
          recordIssues(
              enabledForFailure: false,
              tools: [
                  junitParser(
                      id: 'unit-test',
                      name: 'Unit Test',
                      pattern: '**/target/surefire-reports/*.xml'
                  )
              ]
          )
        }
      }
    }
    stage('Gradle jetbrains verify') {
      steps {
        script {
          withCredentials([ossrhCredentials,
                           nexusCredentials]) {
            sh """\
            #!/usr/bin/env bash
            set -xe
            cd talend-component-kit-intellij-plugin
            bash scripts/3.verify.sh
            """.stripIndent()
          }
        }
      }
    }
    stage('Release') {
      when { expression { params.RELEASE } }
      steps {
        script {
          withCredentials([jetbrainsToken,
                           nexusCredentials]) {
            sh """\
              #!/usr/bin/env bash
              set -xe
              cd talend-component-kit-intellij-plugin
              bash scripts/4.release.sh
              """.stripIndent()
          }
        }
      }
    }
  }
  post {
    success {
      script {
        println "====== Publish Coverage"
        publishCoverage adapters: [jacocoAdapter('**/jacoco-aggregate/*.xml')]
        publishCoverage adapters: [jacocoAdapter('**/jacoco-it/*.xml')]
        publishCoverage adapters: [jacocoAdapter('**/jacoco-ut/*.xml')]
        println "====== Publish HTML API Coverage"
        publishHTML([
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll              : true,
            reportDir            : 'reporting/target/site/jacoco-aggregate',
            reportFiles          : 'index.html',
            reportName           : 'Coverage',
            reportTitles         : 'Coverage'
        ])
      }
    }
    always {
      script {
        String prevResult = null
        if (currentBuild.previousBuild) {
          prevResult = currentBuild.previousBuild.result
        }

        alertingTools.slack_result(
            env.SLACK_CI_CHANNEL,
            currentBuild.result,
            prevResult,
            true, // Post for success
            false // Post for failure
        )
      }
      recordIssues(
          enabledForFailure: false,
          tools: [
              taskScanner(
                  id: 'disabled',
                  name: '@Disabled',
                  includePattern: 'talend-component-kit-intellij-plugin/src/**/*.java',
                  ignoreCase: true,
                  normalTags: '@Disabled'
              ),
              taskScanner(
                  id: 'todo',
                  name: 'Todo(low)/Fixme(high)',
                  includePattern: 'talend-component-kit-intellij-plugin/src/**/*.java',
                  ignoreCase: true,
                  highTags: 'FIX_ME, FIXME',
                  lowTags: 'TO_DO, TODO'
              )
          ]
      )
      script {
        println '====== Archive jacoco reports artifacts'
        archiveArtifacts artifacts: "${'**/jacoco-aggregate/**/*.*'}", allowEmptyArchive: true, onlyIfSuccessful: false
      }

      script {
        if (params.JENKINS_DEBUG) {
          jenkinsJobTools.jenkinsBreakpoint()
        }
      }
    }
  }
}

/**
 * Assembly all needed items to put inside extraBuildParams
 *
 * @param Boolean skip_doc, if set to true documentation build will be skipped
 *
 * @return extraBuildParams as a string ready for mvn cmd
 */
private String assemblyExtraBuildParams() {
  String extraBuildParams

  println 'Processing extraBuildParams'
  final List<String> buildParamsAsArray = []

  println 'Manage user params'
  if (params.EXTRA_BUILD_PARAMS) {
    buildParamsAsArray.add(params.EXTRA_BUILD_PARAMS as String)
  }

  println 'Construct final params content'
  extraBuildParams = buildParamsAsArray.join(' ')
  println "extraBuildParams: $extraBuildParams"

  return extraBuildParams
}
