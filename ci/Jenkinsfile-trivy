/**
 * Copyright (C) 2006-2024 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Credentials
final def nexusCredentials = usernamePassword(
    credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')


pipeline {
  libraries {
    // Externals libraries used in this job
    // Connector lib from https://github.com/Talend/tdi-jenkins-shared-libraries
    lib("connectors-lib@1.0.0") // Defining jenkinsJobTools
  }

  agent {
    kubernetes {
      yamlFile '.jenkins/jenkins_pod.yml'
      defaultContainer 'main'
    }
  }

  environment {
    MAVEN_OPTS = [
        '-Dmaven.artifact.threads=128',
        '-Dorg.slf4j.simpleLogger.showThreadName=true',
        '-Dorg.slf4j.simpleLogger.showDateTime=true',
        '-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss',
        "-Dtalend.maven.decrypter.m2.location=${WORKSPACE}/.jenkins/",
    ].join(' ')
    TALEND_REGISTRY = 'registry.datapwn.com'
  }

  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '10', numToKeepStr: '10'))
    timeout(time: 60, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }


  parameters {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "BASIC_CONFIG",
              sectionHeader: "Basic configuration",
              sectionHeaderStyle: """ background-color: #ABEBC6;
                text-align: center; font-size: 35px !important; font-weight : bold;
			          """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "DEBUG_CONFIG",
              sectionHeader: "Jenkins job debug configuration ",
              sectionHeaderStyle: """ background-color: #FF0000;
                text-align: center; font-size: 35px !important; font-weight : bold;
			          """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    booleanParam(
        name: 'JENKINS_DEBUG',
        defaultValue: false,
        description: 'Add an extra step to the pipeline allowing to keep the pod alive for debug purposes.')
  }

  stages {
    stage('Preliminary steps') {
      steps {
        script {
          println "Installing tools using asdf"
          sh 'bash .jenkins/scripts/asdf_install.sh'
        }
      }
    }

    stage('Build Project') {
      steps {
        withCredentials([nexusCredentials]) {
          script {
            sh """\
              #!/usr/bin/env bash
              echo "Building project with Maven:"
              mvn clean install --define skipTests \
                                --define gpg.skip=true \
                                --define enforcer.skip=true\
                                --batch-mode \
                                --update-snapshots \
                                --show-version \
                                --settings .jenkins/settings.xml
              """.stripIndent()
          }
        }
      }
    }

    stage('Security Scan with Trivy') {
      steps {
        script {
          sh """\
            #!/usr/bin/env bash
            echo "Printing Trivy version:"
            trivy --version
            echo "Running Trivy scan:"
            mkdir -p output
            trivy fs . -f json --scanners vuln -o output/trivy-results.json --timeout 60m --debug
            """.stripIndent()
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'output/trivy-results.json'
        }
      }
    }

    stage('Upload Scan Results to DefectDojo') {
      steps {
        withCredentials([string(credentialsId: 'defectdojo-token-common', variable: 'DEFECTDOJO_API_TOKEN')]) {
          sh """\
          #!/usr/bin/env bash
					echo "Scan completed, now uploading to DefectDojo"
					apk add curl
					curl -s -X 'POST' -H "Authorization: Token ${DEFECTDOJO_API_TOKEN}" \
					'https://defectdojo.dagali.talendinc.com/api/v2/reimport-scan/' \
                    -H 'accept: application/json' \
                    -H 'Content-Type: multipart/form-data' \
                    -F 'close_old_findings=true' \
                    -F 'engagement_name=trivy-sca_component-runtime' \
                    -F 'auto_create_context=true' \
                    -F 'push_to_jira=false' \
                    -F 'scan_date=' \
                    -F 'do_not_reactivate=true' \
                    -F 'minimum_severity=Low' \
                    -F 'product_name=component-runtime' \
                    -F 'verified=true' \
                    -F 'product_type_name=Talend' \
                    -F 'scan_type=Trivy Scan' \
                    -F 'file=@output/trivy-results.json'
          """.stripIndent()
        }
      }
    }
  }
  post {
    always {
      script {
        if (params.JENKINS_DEBUG) {
          jenkinsJobTools.jenkinsBreakpoint()
        }
      }
    }
  }
}
