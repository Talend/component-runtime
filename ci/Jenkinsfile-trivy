/**
 * Copyright (C) 2006-2025 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Credentials
final def nexusCredentials = usernamePassword(
    credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')

final String repository = 'component-runtime'

pipeline {
  libraries {
    lib("connectors-lib@main")  // https://github.com/Talend/tdi-jenkins-shared-libraries
  }

  agent {
    kubernetes {
      yamlFile '.jenkins/jenkins_pod.yml'
      defaultContainer 'main'
    }
  }

  environment {
    MAVEN_OPTS = [
        '-Dmaven.artifact.threads=128',
        '-Dorg.slf4j.simpleLogger.showThreadName=true',
        '-Dorg.slf4j.simpleLogger.showDateTime=true',
        '-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss',
    ].join(' ')
    TALEND_REGISTRY = 'registry.datapwn.com'

    //Trivy will automatically recognize and use the TRIVY_CACHE_DIR environment variable as long as it exists in the current shell environment at runtime.
    //In Trivyâ€™s behavior design, when you run: trivy fs .
    //It internally tries to read the TRIVY_CACHE_DIR environment variable:
    //If it is defined: Trivy will use that directory as the cache path. If it is not defined: Trivy will default to using ~/.cache/trivy.
    TRIVY_CACHE_DIR = "/home/jenkins/.cache/trivy/${repository}"
  }

  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '10', numToKeepStr: '10'))
    timeout(time: 60, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }


  parameters {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "BASIC_CONFIG",
              sectionHeader: "Basic configuration",
              sectionHeaderStyle: """ background-color: #ABEBC6;
                text-align: center; font-size: 35px !important; font-weight : bold;
			          """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    string(
        name: 'PACKAGE_FILTER_NAME',
        defaultValue: "",
        description: '''
              This input box is used to filter the results of the `mvn dependency:tree` command.
              By entering the package name, you can find out which components are affected and thus the scope of the test.
              For example: org.eclipse.jetty:jetty-http, org.apache.avro:avro, org.apache.geronimo ...''')

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    separator(name: "DEBUG_CONFIG",
              sectionHeader: "Jenkins job debug configuration ",
              sectionHeaderStyle: """ background-color: #FF0000;
                text-align: center; font-size: 35px !important; font-weight : bold;
			          """)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    booleanParam(
        name: 'JENKINS_DEBUG',
        defaultValue: false,
        description: 'Add an extra step to the pipeline allowing to keep the pod alive for debug purposes.')
  }

  stages {
    stage('Preliminary steps') {
      steps {
        script {
          println "Installing tools using asdf"
          sh 'bash .jenkins/scripts/asdf_install.sh'
        }
      }
    }

    stage('Build Project') {
      steps {
        withCredentials([nexusCredentials]) {
          script {
            sh 'bash .jenkins/scripts/trivy_build_tck.sh'
          }
        }
      }
    }

    stage('Security Scan with Trivy') {
      steps {
        script {
          trivyTools.generateTrivyReport("output/trivy-results.json",
                                         "output/trivy-results.html")
          publishHtmlReportTools.publishHtmlReport("output/trivy-results.html", "CVE Trivy Vulnerability Report")
        }
      }
      post {
        always {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            archiveArtifacts artifacts: 'output/trivy-results.json, output/trivy-results.html', allowEmptyArchive: true, onlyIfSuccessful: false
          }
        }
      }
    }

    stage('Upload Scan Results to DefectDojo') {
      steps {
        withCredentials([string(credentialsId: 'defectdojo-token-common', variable: 'DEFECTDOJO_API_TOKEN')]) {
          sh 'bash .jenkins/scripts/trivy_upload.sh'
        }
      }
    }

    stage('Mvn dependency:tree') {
      steps {
        script {
          mvnDependencyTreeTools.generateScopeOfImpactReport("output/${repository}.txt", params.PACKAGE_FILTER_NAME, "output/${repository}--ScopeOfImpact.txt", repository)
          publishHtmlReportTools.publishHtmlReport("output/${repository}.html", 'CVE mvn dependency:tree Report')
          publishHtmlReportTools.publishHtmlReport("output/${repository}--ScopeOfImpact.html", 'CVE Scope Of Impact Report')
        }
      }
      post {
        always {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            archiveArtifacts artifacts: "output/${repository}.txt, output/${repository}--ScopeOfImpact.txt", allowEmptyArchive: true, onlyIfSuccessful: false
          }
        }
      }
    }

  }
  post {
    always {
      script {
        if (params.JENKINS_DEBUG) {
          jenkinsJobTools.jenkinsBreakpoint()
        }
      }
      // Check disk usage before cleaning up
      script {
        echo "Checking disk space usage before cleanup..."

        echo "Check size of /home/jenkins/.cache/trivy/${repository}"
        sh 'du -sh ${TRIVY_CACHE_DIR} || echo "No Trivy cache found"'

        echo "Check size of output"
        sh 'du -sh output || echo "No output files found"'

        echo "Check Docker space usage"
        sh 'docker system df || echo "Unable to fetch Docker disk usage"'

        echo "Check size of /home/jenkins/.cache/trivy"
        sh 'du -sh /home/jenkins/.cache/trivy || echo "No /home/jenkins/.cache/trivy"'

        echo "Check size of /tmp"
        sh 'du -sh /tmp || true'

        echo "Check size of ${WORKSPACE}"
        sh 'du -sh ${WORKSPACE} || true'

        echo "Check size of /home/jenkins/.m2/repository"
        sh 'du -sh /home/jenkins/.m2/repository || true'



        echo "ls -al /var/jenkins_home/jobs"
        sh 'ls -al /var/jenkins_home/jobs || true'

        echo "ls -al /var/jenkins_home/jobs/component-runtime"
        sh 'ls -al /var/jenkins_home/jobs/component-runtime || true'

        echo "ls -al /var/jenkins_home/jobs/component-runtime/jobs"
        sh 'ls -al /var/jenkins_home/jobs/component-runtime/jobs || true'

        echo "ls -al /var/jenkins_home/jobs/component-runtime/jobs/build"
        sh 'ls -al /var/jenkins_home/jobs/component-runtime/jobs/build || true'

        echo "ls -al /var/jenkins_home/jobs/component-runtime/jobs/build/branches"
        sh 'ls -al /var/jenkins_home/jobs/component-runtime/jobs/build/branches || true'

        echo "Check size of /var/jenkins_home/jobs"
        sh 'du -sh /var/jenkins_home/jobs || true'

        echo "Check size of /var/jenkins_home/jobs/component-runtime"
        sh 'du -sh /var/jenkins_home/jobs/component-runtime || true'

        echo "Check size of /var/jenkins_home/jobs/component-runtime/jobs"
        sh 'du -sh /var/jenkins_home/jobs/component-runtime/jobs || true'

        echo "Check size of /var/jenkins_home/jobs/component-runtime/jobs/build"
        sh 'du -sh /var/jenkins_home/jobs/component-runtime/jobs/build || true'

        echo "Check size of /var/jenkins_home/jobs/component-runtime/jobs/build/branches/"
        sh 'du -sh /var/jenkins_home/jobs/component-runtime/jobs/build/branches/ || true'
      }

      // Clean up
      script {
        echo "Cleaning up ${TRIVY_CACHE_DIR}"
        sh 'rm -rf ${TRIVY_CACHE_DIR}/*'

        echo "Cleaning up output/*"
        sh 'rm -rf output/*'

        echo "Cleaning up ${WORKSPACE}/*"
        sh 'rm -rf ${WORKSPACE}/*'

        //echo "Cleaning up /home/jenkins/.m2/repository/*"
        //sh 'rm -rf /home/jenkins/.m2/repository/*'

        // Clean unused Docker images and containers
        sh 'docker system prune -af || true'
      }

      // Check disk usage after cleaning up
      script {
        echo "Checking disk space usage after cleanup..."

        echo "Check size of /home/jenkins/.cache/trivy/${repository}"
        sh 'du -sh ${TRIVY_CACHE_DIR} || echo "No Trivy cache found"'

        echo "Check size of output"
        sh 'du -sh output || echo "No output files found"'

        echo "Check Docker space usage"
        sh 'docker system df || echo "Unable to fetch Docker disk usage"'

        echo "Check size of /home/jenkins/.cache/trivy"
        sh 'du -sh /home/jenkins/.cache/trivy || echo "No /home/jenkins/.cache/trivy"'

        echo "Check size of /tmp"
        sh 'du -sh /tmp || true'

        echo "Check size of ${WORKSPACE}"
        sh 'du -sh ${WORKSPACE} || true'

        echo "Check size of /home/jenkins/.m2/repository"
        sh 'du -sh /home/jenkins/.m2/repository || true'
      }
    }
  }
}
