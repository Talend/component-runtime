{
  "component_name": "<0><0>Each component has a name which must be unique in a family.</0><1><0></0> The name must be a valid Java name (no space, no special character, and so on).</1></0>",
  "component_name_title": "Component Name",
  "component_type_title": "Component Type",
  "facets_values": "<0><0>Selecting a facet allows you to add features to your generated project.</0><1>A common use case is to activate the testing facet to generate skeletons for the tests and ease the implementation.</1></0>",
  "facets_values_title": "Facets",
  "mapper_configuration": "<0><0>The component configuration schema design can be defined by clicking this button.</0><1>It allows you to define the data you need to be able to execute the component logic.</1></0>",
  "mapper_configuration_title": "Configuration",
  "mapper.record_type": "<0><0>The input will issue some records.</0><1>This configuration allows you to either define the schema of the records, or to use a generic record type that you will implement if the data structure can vary depending on the component configuration.</1></0>",
  "mapper_record_type_title": "Record",
  "mapper_stream": "<0><0>Toggle this option if the input component will issue a stream.</0><1>A stream means that there is no real \"end\" of the data and that the job/pipeline using this component is not intended to be terminated.</1></0>",
  "mapper_stream_title": "Stream",
  "processor_configuration": "<0><0>The component configuration schema design can be configured by clicking this button.</0><1>It allows you to define the data you need to be able to execute the component logic.</1></0>",
  "processor_configuration_title": "Configuration",
  "processor_connectivity": "<0><0>This section allows you to configure the processor connectivity.</0><1>Click the <1></1> buttons to add inputs and outputs, and the <3></3> button to remove one.</1><2>Click an input or output branch to edit its details and structure (name, type).</2></0>",
  "processor_connectivity_title": "Connectivity",
  "processor_inputs": "<0><0>Click this button to add an input to the processor.</0><1><0></0> The <2>MAIN</2> input is mandatory.</1></0>",
  "processor_inputs_title": "Inputs",
  "processor_outputs": "<0><0>Click this button to add an output to the processor.</0></0>",
  "processor_outputs_title": "Outputs",
  "project_artifact": "<0><0>The project artifact used when deployed on a repository (like a Nexus or central repository).</0><1>It must be a unique identifier in the group namespace.</1><2>Talend recommends to follow the following pattern: <1>${component}-component</1>.</2></0>",
  "project_artifact_title": "Project Artifact",
  "project_build_tool": "<0><0>Maven is the most commonly used build tool and Talend Component Kit integrates with it smoothly.</0></0>",
  "project_build_tool_title": "Build Tool",
  "project_category": "<0><0>The category is a group used by the Studio to organize components of different families in the same bucket in the <1>Palette</1>.</0><1>It is recommended to use a two-level category. The first level is usually very general and the second one is close to the family name.</1><2></2> Category names must be valid Java names (no space, no special character, and so on).</0>",
  "project_category_title": "Category",
  "project_family": "<0><0>The family groups multiple components together.</0><1><0></0> It is recommended to use a single family name per component module. The name must be a valid Java name (no space, no special character, and so on).</1></0>",
  "project_family_title": "Family",
  "project_group": "<0><0>The project group used when deployed on a repository (like a Nexus or central repository).</0><1>The best practice is to use the reversed company hostname suffixed with something specific to the project.</1><2>For example, use <3>com.company</3> as Group for the <1>company.com</1> hostname. For a component the used package would be, for instance, <5>com.company.talend.component</5>.</2></0>",
  "project_group_title": "Project Group",
  "project_package": "<0><0>The root package represents a unique namespace in terms of code.</0><1>Talend recommends aligning it with the selected group.</1></0>",
  "project_package_title": "Project Root package",
  "schema_designing_model": "<0><0>This view allows you to modelize your component.</0><1>You can click the <1></1> button to add an object field and the <3></3> button to delete one. Click any field to edit its name and type.</1><2>To add a nested object, add a field, click it, and customize its name. Then, set the field to the \"object\" type and validate your updates.</2><3><0></0> Field names must be valid Java names (no space, no special character, and so on). If the field name contains specific keywords, it will be considered as a credential and marked as such (for example, <2>password</2>, <4>token</4>, and so on).</3></0>",
  "schema_designing_model_title": "Designing your model",
  "BADGE_DELETE": "delete",
  "delete_dataset_warning_is_used_title": "Delete dataset",
  "delete_dataset_warning_is_used": "<0>You can't delete this dataset because it's already used.</0>",
  "DELETE_DATASET_LABEL": "Delete this dataset",
  "DELETE_DATASTORE_LABEL": "Delete this datastore",
  "delete_datastore_warning_is_used_title": "Delete datastore",
  "delete_datastore_warning_is_used": "<0>You can't delete this configuration because it's already used.</0>",
  "headerbar_mode_default": "Standard Mode",
  "headerbar_mode_openapi": "OpenAPI mode",
  "openapi_list_title": "Select the endpoints to use:",
  "openapi_metadata_title": "Project Metadata",
  "openapi_metadata": "<0>Select your project metadata (coordinates, build type, etc....).</0>",
  "openapi_overview_title": "OpenAPI Design",
  "openapi_overview": "<0><0>The right editor enables you to edit the OpenAPI document.</0><1>The left list will list the available endpoints and let you select the ones you want to handle in your generated component.</1><2>Once you are ready, hit the button <1>Download as ZIP</1> to download a ready to run component project.</2></0>",
  "openapi_metadata_family": "Family",
  "openapi_metadata_coordinates": "Coordinates",
  "openapi_metadata_build": "Build Type"
}
