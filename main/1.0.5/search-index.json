[{"lang":"en","title":"<a href=\"component-combiner.html\" class=\"page\">Defining a combiner</a>","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-combiner.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining a combiner","In this article"],"lvl1":["What is a combiner"],"text":["Currently, Talend Component Kit does not allow you to define a Combiner. A combiner is the symmetric part of a partition mapper and allows to aggregate results in a single partition."]},{"lang":"en","title":"<a href=\"component-output.html\" class=\"page\">Defining an output</a>","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-output.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining an output","In this article"],"lvl1":["What is an output"],"text":["An Output is a Processor that does not return any data.","Conceptually, an output is a data listener. It matches the concept of processor. Being the last component of the execution chain or returning no data makes your processor an output component:"]},{"lang":"en","title":"<a href=\"component-partition-mapper.html\" class=\"page\">Defining a partition mapper</a>","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-partition-mapper.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining a partition mapper","In this article"],"lvl1":["What is a partition mapper","Implementing a partition mapper"],"lvl2":["@Assessor","@Split","@Emitter"],"text":["A PartitionMapper is a component able to split itself to make the execution more efficient.","This concept is borrowed from big data and useful in this context only (BEAM executions). The idea is to divide the work before executing it in order to reduce the overall execution time.","The process is the following:","The size of the data you work on is estimated. This part can be heuristic and not very precise.","From that size, the execution engine (runner for Beam) requests the mapper to split itself in N mappers with a subset of the overall work.","The leaf (final) mapper is used as a Producer (actual reader) factory.","This kind of component must be Serializable to be distributable.","A partition mapper requires three methods marked with specific annotations:","@Assessor for the evaluating method","@Split for the dividing method","@Emitter for the Producer factory","The Assessor method returns the estimated size of the data related to the component (depending its configuration). It must return a Number and must not take any parameter.","For example:","The Split method returns a collection of partition mappers and can take optionally a @PartitionSize long value as parameter, which is the requested size of the dataset per sub partition mapper.","For example:","The Emitter method must not have any parameter and must return a producer. It uses the partition mapper configuration to instantiate and configure the producer.","For example:"]},{"lang":"en","title":"<a href=\"component-processor.html\" class=\"page\">Defining a processor</a>","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-processor.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining a processor","In this article"],"lvl1":["What is a processor","Defining multiple outputs","Defining multiple inputs","Implementing batch processing"],"lvl2":["Related articles"],"text":["A Processor is a component that converts incoming data to a different model.","A processor must have a method decorated with @ElementListener taking an incoming data and returning the processed data:","Processors must be Serializable because they are distributed components.","If you just need to access data on a map-based ruleset, you can use JsonObject as parameter type. From there, Talend Component Kit wraps the data to allow you to access it as a map. The parameter type is not enforced. This means that if you know you will get a SuperCustomDto, then you can use it as parameter type. But for generic components that are reusable in any chain, it is highly encouraged to use JsonObject until you have an evaluation language-based processor that has its own way to access components.","For example:","A processor also supports @BeforeGroup and @AfterGroup methods, which must not have any parameter and return void values. Any other result would be ignored. These methods are used by the runtime to mark a chunk of the data in a way which is estimated good for the execution flow size.","Because the size is estimated, the size of a group can vary. It is even possible to have groups of size 1.","It is recommended to batch records, for performance reasons:","You can optimize the data batch processing by using the maxBatchSize parameter. This parameter is automatically implemented on the component when it is deployed to a Talend application. Only the logic needs to be implemented. Learn how to implement chunking/bulking in this document.","In some cases, you may need to split the output of a processor in two. A common example is to have \"main\" and \"reject\" branches where part of the incoming data are passed to a specific bucket to be processed later.","To do that, you can use @Output as replacement of the returned value:","Alternatively, you can pass a string that represents the new branch:","Having multiple inputs is similar to having multiple outputs, except that an OutputEmitter wrapper is not needed:","@Input takes the input name as parameter. If no name is set, it defaults to the \"main (default)\" input branch. It is recommended to use the default branch when possible and to avoid naming branches according to the component semantic.","Depending on several requirements, including the system capacity and business needs, a processor can process records differently.","For example, for real-time or near-real time processing, it is more interesting to process small batches of data more often. On the other hand, in case of one-time processing, it is more optimal to adapt the way the component handles batches of data according to the system capacity.","By default, the runtime automatically estimates a group size that it considers good, according to the system capacity, to process the data. This group size can sometimes be too big and not optimal for your needs or for your system to handle effectively and correctly.","Users can then customize this size from the component settings in Talend Studio, by specifying a maxBatchSize that adapts the size of each group of data to be processed.","The estimated group size logic is automatically implemented when a component is deployed to a Talend application. Besides defining the @BeforeGroup and @AfterGroup logic detailed below, no action is required on the implementation side of the component.","The component batch processes the data as follows:","Case 1 - No maxBatchSize is specified in the component configuration. The runtime estimates a group size of 4. Records are processed by groups of 4.","Case 2 - The runtime estimates a group size of 4 but a maxBatchSize of 3 is specified in the component configuration. The system adapts the group size to 3. Records are processed by groups of 3.","","Each group is processed as follows until there is no record left:","The @BeforeGroup method resets a record buffer at the beginning of each group.","The records of the group are assessed one by one and placed in the buffer as follows: The @ElementListener method tests if the buffer size is greater or equal to the defined maxBatchSize. If it is, the records are processed. If not, then the current record is buffered.","The previous step happens for all records of the group. Then the @AfterGroup method tests if the buffer is empty.","","You can define the following logic in the processor configuration:","You can learn more about processors in this document.","Defining a processor/output logic","General component execution logic","Implementing bulk processing","Best practices"]},{"lang":"en","title":"<a href=\"component-producer.html\" class=\"page\">Defining the producer method</a>","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-producer.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining the producer method","In this article"],"text":["The Producer method defines the source logic of an input component. It handles the interaction with a physical source and produces input data for the processing flow.","A producer must have a @Producer method without any parameter. It is triggered by the @Emitter of the partition mapper and can return any data. It is defined in the <component_name>Source.java file:"]},{"lang":"en","title":"Beam testing","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-beam.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Beam testing","In this article"],"lvl1":["Related articles"],"text":["If you want to make sure that your component works in Beam and don’t want to use Spark, you can try with the Direct Runner.","Check beam.apache.org/contribute/testing/ for more details.","Component testing best practices","Testing component runtime","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API"]},{"lang":"en","title":"Building components with Gradle","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/build-tools-gradle.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Building components with Gradle","In this article"],"lvl1":["Related articles"],"text":["To develop new components, Talend Component Kit requires a build tool in which you will import the component project generated from the starter. With this build tool, you will also be able to implement the logic of your component and to install and deploy it to Talend applications. A Talend Component Kit plugin is available for each of the supported build tools.","gradle-talend-component helps you write components that match the best practices. It is inspired from the Maven plugin and adds the ability to generate automatically the dependencies.txt file used by the SDK to build the component classpath. For more information on the configuration, refer to the Maven properties matching the attributes.","You can use it as follows:","Best practices","Building components with Maven","Integrating to the Studio"]},{"lang":"en","title":"Building components with Maven","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/build-tools-maven.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Building components with Maven","In this article"],"lvl1":["Dependencies","Validating the component programming model","Generating the component documentation","Testing a component web rendering","Generating inputs or outputs","Generating the component archive","Deploying to the Studio","Help","Related articles"],"lvl2":["Rendering your documentation"],"lvl3":["HTML rendering","PDF rendering","Including the documentation into a document"],"text":["To develop new components, Talend Component Kit requires a build tool in which you will import the component project generated from the starter.","You will then be able to install and deploy it to Talend applications. A Talend Component Kit plugin is available for each of the supported build tools.","talend-component-maven-plugin helps you write components that match best practices and generate transparently metadata used by Talend Studio.","You can use it as follows:","This plugin is also an extension so you can declare it in your build/extensions block as:","Used as an extension, the goals detailed below will be set up.","You can run the following command from the root of the project, by adapting it with each goal name, parameters and values:","The first goal is a shortcut for the maven-dependency-plugin. It creates the TALEND-INF/dependencies.txt file with the compile and runtime dependencies, allowing the component to use it at runtime:","This goal helps you validate the common programming model of the component. To activate it, you can use following execution definition:","It is bound to the process-classes phase by default. When executed, it performs several validations that can be disabled by setting the corresponding flags to false in the <configuration> block of the execution:","Name","Description","User property","Default","validateInternationalization","Validates that resource bundles are presents and contain commonly used keys (for example, _displayName)","talend.validation.internationalization","true","validateModel","Ensures that components pass validations of the ComponentManager and Talend Component runtime","talend.validation.model","true","validateSerializable","Ensures that components are Serializable. This is a sanity check, the component is not actually serialized here. If you have a doubt, make sure to test it. It also checks that any @Internationalized class is valid and has its keys.","talend.validation.serializable","true","validateMetadata","Ensures that components have an @Icon and a @Version defined.","talend.validation.metadata","true","validateDataStore","Ensures that any @DataStore defines a @HealthCheck and has a unique name.","talend.validation.datastore","true","validateDataSet","Ensures that any @DataSet has a unique name. Also ensures that there is a source instantiable just filling the dataset properties (all others not being required).","talend.validation.dataset","true","validateComponent","Ensures that the native programming model is respected. You can disable it when using another programming model like Beam.","talend.validation.component","true","validateActions","Validates action signatures for actions not tolerating dynamic binding (@HealthCheck, @DynamicValues, and so on). It is recommended to keep it set to true.","talend.validation.action","true","validateFamily","Validates the family by verifying that the package containing the @Components has a @Icon property defined.","talend.validation.family","true","validateDocumentation","Ensures that all components and @Option properties have a documentation using the @Documentation property.","talend.validation.documentation","true","validateLayout","Ensures that the layout is referencing existing options and properties.","talend.validation.layout","true","validateOptionNames","Ensures that the option names are compliant with the framework. It is highly recommended and safer to keep it set to true.","talend.validation.options","true","The asciidoc goal generates an Asciidoc file documenting your component from the configuration model (@Option) and the @Documentation property that you can add to options and to the component itself.","Name","Description","User property","Default","level","Level of the root title.","talend.documentation.level","2 (==)","output","Output folder path. It is recommended to keep it to the default value.","talend.documentation.output","${classes}/TALEND-INF/documentation.adoc","formats","Map of the renderings to do. Keys are the format (pdf or html) and values the output paths.","talend.documentation.formats","-","attributes","Asciidoctor attributes to use for the rendering when formats is set.","talend.documentation.attributes","-","templateEngine","Template engine configuration for the rendering.","talend.documentation.templateEngine","-","templateDir","Template directory for the rendering.","talend.documentation.templateDir","-","title","Document title.","talend.documentation.title","${project.name}","version","The component version. It defaults to the pom version","talend.documentation.version","${project.version}","workDir","The template directory for the Asciidoctor rendering - if 'formats' is set.","talend.documentation.workdDir","${project.build.directory}/talend-component/workdir","attachDocumentations","Allows to attach (and deploy) the documentations (.adoc, and formats keys) to the project.","talend.documentation.attach","true","htmlAndPdf","If you use the plugin as an extension, you can add this property and set it to true in your project to automatically get HTML and PDF renderings of the documentation.","talend.documentation.htmlAndPdf","false","To render the generated documentation in HTML or PDF, you can use the Asciidoctor Maven plugin (or Gradle equivalent). You can configure both executions if you want both HTML and PDF renderings.","Make sure to execute the rendering after the documentation generation.","If you prefer a HTML rendering, you can configure the following execution in the asciidoctor plugin. The example below:","Generates the components documentation in target/classes/TALEND-INF/documentation.adoc.","Renders the documentation as an HTML file stored in target/documentation/documentation.html.","If you prefer a PDF rendering, you can configure the following execution in the asciidoctor plugin:","If you want to add some more content or a title, you can include the generated document into another document using Asciidoc include directive.","For example:","To be able to do that, you need to pass the generated_doc attribute to the plugin. For example:","This is optional but allows to reuse Maven placeholders to pass paths, which can be convenient in an automated build.","You can find more customization options on Asciidoctor website.","Testing the rendering of your component configuration into the Studio requires deploying the component in Talend Studio. Refer to the Studio documentation.","In the case where you need to deploy your component into a Cloud (web) environment, you can test its web rendering by using the web goal of the plugin:","Run the mvn talend-component:web command.","Open the following URL in a web browser: localhost:8080.","Select the component form you want to see from the treeview on the left. The selected form is displayed on the right.","Two parameters are available with the plugin:","serverPort, which allows to change the default port (8080) of the embedded server. Its associated user property is talend.web.port.","serverArguments, that you can use to pass Meecrowave options to the server. Learn more about that configuration at openwebbeans.apache.org/meecrowave/meecrowave-core/cli.html.","Make sure to install the artifact before using this command because it reads the component JAR from the local Maven repository.","The Mojo generate (Maven plugin goal) of the same plugin also embeds a generator that you can use to bootstrap any input or output component:","It is intended to be used from the command line (or IDE Maven integration) as follows:","For this command to work, you need to register the plugin as follows:","Component ARchive (.car) is the way to bundle a component to share it in the Talend ecosystem. It is a plain Java ARchive (.jar) containing a metadata file and a nested Maven repository containing the component and its depenencies.","This command creates a .car file in your build directory. This file can be shared on Talend platforms.","This command has some optional parameters:","Name","Description","User property","Default","attach","Specifies whether the component should archive should be attached.","talend.car.attach","true","classifier","The classifier to use if attach is set to true.","talend.car.attach","component","metadata","Additional custom metadata to bundle in the component archive.","-","-","output","Specifies the output path and name of the archive","talend.car.output","${project.build.directory}/${project.build.finalName}.car","packaging","Specifies the packaging","-","${project.packaging}","This CAR is executable and exposes the studio-deploy command which takes a Talend Studio home path as parameter. When executed, it installs the dependencies into the Studio and registers the component in your instance. For example:","You can also upload the dependencies to your Nexus server using the following command:","In this command, Nexus URL and repository name are mandatory arguments. All other arguments are optional. If arguments contain spaces or special symbols, you need to quote the whole value of the argument. For example:","The deploy-in-studio goal deploys the current component module into a local Talend Studio instance.","Name","Description","User property","Default","studioHome","Path to the Studio home directory","talend.component.studioHome","-","You can use the following command from the root folder of your project:","The help goal displays help information on talend-component-maven-plugin. Call mvn talend-component:help -Ddetail=true -Dgoal=<goal-name> to display the parameter details of a specific goal.","Name","Description","User property","Default","detail","Displays all settable properties for each goal.","detail","false","goal","The name of the goal for which to show help. If unspecified, all goals are displayed.","goal","-","indentSize","Number of spaces per indentation level. This integer should be positive.","indentSize","2","lineLength","Maximum length of a display line. This integer should be positive.","lineLength","80","Best practices","Building components with Gradle","Integrating to the Studio"]},{"lang":"en","title":"Built-in services","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/services-built-in.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Built-in services","In this article"],"lvl1":["Lisf of built-in services","Using HttpClient","Related articles"],"lvl2":["LocalConfiguration","Customizing HTTP client requests","Big data streams"],"lvl3":["Built-In configurer"],"text":["The framework provides built-in services that you can inject by type in components and actions.","Type","Description","org.talend.sdk.component.api.service.cache.LocalCache","Provides a small abstraction to cache data that does not need to be recomputed very often. Commonly used by actions for UI interactions.","org.talend.sdk.component.api.service.dependency.Resolver","Allows to resolve a dependency from its Maven coordinates.","javax.json.bind.Jsonb","A JSON-B instance. If your model is static and you don’t want to handle the serialization manually using JSON-P, you can inject that instance.","javax.json.spi.JsonProvider","A JSON-P instance. Prefer other JSON-P instances if you don’t exactly know why you use this one.","javax.json.JsonBuilderFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.JsonWriterFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.JsonReaderFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.stream.JsonParserFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.stream.JsonGeneratorFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","org.talend.sdk.component.api.service.configuration.LocalConfiguration","Represents the local configuration that can be used during the design.","org.talend.sdk.component.api.service.dependency.Resolver","Allows to resolve files from Maven coordinates (like dependencies.txt for component). Note that it assumes that the files are available in the component Maven repository.","org.talend.sdk.component.api.service.injector.Injector","Utility to inject services in fields marked with @Service.","org.talend.sdk.component.api.service.factory.ObjectFactory","Allows to instantiate an object from its class name and properties.","It is not recommended to use it for the runtime because the local configuration is usually different and the instances are distinct.","You can also use the local cache as an interceptor with @Cached","Every interface that extends HttpClient and that contains methods annotated with @Request","Lets you define an HTTP client in a declarative manner using an annotated interface.","See the Using HttpClient for more details.","All these injected services are serializable, which is important for big data environments. If you create the instances yourself, you cannot benefit from these features, nor from the memory optimization done by the runtime. Prefer reusing the framework instances over custom ones.","The local configuration uses system properties and the environment (replacing dots per underscores) to look up the values. You can also put a TALEND-INF/local-configuration.properties file with default values. This allows to use the local_configuration:<key> syntax in @Ui annotation. Here is an example to read the default value of a property from the configuration:","Ensure your key is unique across all components to avoid global overrides on the JVM. In practice, it is strongly recommended to always use the family as a prefix. Also note that you can use @Configuration(\"prefix\") to inject a mapping of the LocalConfiguration in a component. It uses the same rules as for any configuration object.","The HttpClient usage is described in this section by using the REST API example below. It is assume that it requires a basic authentication header.","GET /api/records/{id}","-","POST /api/records","JSON payload to be created: {\"id\":\"some id\", \"data\":\"some data\"}","To create an HTTP client that is able to consume the REST API above, you need to define an interface that extends HttpClient.","The HttpClient interface lets you set the base for the HTTP address that the client will hit.","The base is the part of the address that needs to be added to the request path to hit the API.","Every method annotated with @Request in the interface defines an HTTP request. Every request can have a @Codec parameter that allows to encode or decode the request/response payloads.","You can ignore the encoding/decoding for String and Void payloads.","The interface should extend HttpClient.","In the codec classes (that implement Encoder/Decoder), you can inject any of your service annotated with @Service or @Internationalized into the constructor. Internationalization services can be useful to have internationalized messages for errors handling.","The interface can be injected into component classes or services to consume the defined API.","By default, /+json are mapped to JSON-P and /+xml to JAX-B if the model has a @XmlRootElement annotation.","For advanced cases, you can customize the Connection by directly using @UseConfigurer on the method. It calls your custom instance of Configurer. Note that you can use @ConfigurerOption in the method signature to pass some Configurer configurations.","For example, if you have the following Configurer:","You can then set it on a method to automatically add the basic header with this kind of API usage:","The framework provides in the component-api an OAuth1.Configurer which can be used as an example of configurer implementation. It expects a single OAuth1.Configuration parameter to be passed to the request as a @ConfigurationOption.","Here is a sample showing how it can be used:","By default, the client loads in memory the payload. In case of big payloads, it can consume too much memory. For these cases, you can get the payload as an InputStream:","You can use the Response wrapper, or not.","Internationalizing a service","Providing actions through a service","Services and interceptors","Defining a custom API"]},{"lang":"en","title":"Changelog","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/changelog.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Changelog","In this article"],"lvl1":["Version 1.0.5","Version 1.0.4","Version 1.0.3","Version 1.0.2","Version 1.0.1","Version 1.0.0","Version 0.0.12","Version 0.0.11","Version 0.0.10","Version 0.0.9","Version 0.0.8","Version 0.0.7","Version 0.0.6","Version 0.0.5","Version 0.0.4","Version 0.0.3","Version 0.0.2","Version 0.0.1"],"lvl2":["Backlog Task","Bug","New Feature","Work Item","Bug","New Feature","Work Item","Work Item","Bug","New Feature","Work Item","Bug","New Feature","Work Item","Bug","Work Item","New Feature","Work Item","Bug","Work Item","Backlog Task","Bug","New Feature","Work Item","Work Item","Work Item","Work Item","Bug","Work Item","Work Item","Bug","New Feature","Work Item","Bug","Bug","Work Item","Work Item"],"text":["TCOMP-936: Fix/add support for Enum and List parameters in suggestions method","TCOMP-1000: @Option name value is not respected on fields","TCOMP-1008: Enum order is lost","TCOMP-1009: (web) OptionsOrder ignored for tables (List<MyClass>), fields located in random order","TCOMP-1028: [tools-webapp] submit button no more functional","TCOMP-1044: Fix java.lang.ClassCastException in TableActionParameter","TCOMP-1046: String option can’t set default value from a file","TCOMP-779: Drop down list Java type in configuration class","TCOMP-968: Trigger AsyncValidation call only when option annotated with Validable is changed","TCOMP-970: Add support for complex parameter types for AsyncValidation methods","TCOMP-984: Integrate ParameterizedTest with component-runtime-http-junit capture mode","TCOMP-989: .car studio install command breaks config.ini of the studio","TCOMP-1001: [proxy] ConfigurationClient should expose a migrate method","TCOMP-1011: Ensure datastore/dataset i18n names are validated by the maven/gradle plugins","TCOMP-1013: Add an operator support in @ActiveIfs (OR/AND switch)","TCOMP-1014: Ensure a dataset has a source which has no other required parameters in the validator","TCOMP-1029: Extend ActiveIf EvaluationStrategy with CONTAINS strategy","TCOMP-993: [proxy] Propagate UiSpecContext in referenceservice#findByTypeAndName","TCOMP-994: [dependency upgrade] CXF 3.2.6","TCOMP-1003: [dependency upgrade] Tomcat 9.0.12","TCOMP-1004: [dependency upgrade] Log4j2 2.11.1","TCOMP-1015: Upgrade icons to 0.207.0","TCOMP-1019: (form) enum should lead to restricted datalist","TCOMP-1037: [dependency upgrade] Johnzon 1.1.9","TCOMP-1038: Drop spring client from component-form-core","TCOMP-1041: HttpClient should enable to process InputStream directly","TCOMP-1042: Upgrade to JUnit 5.3.0","TCOMP-1045: Add documentation in metadata and enable to use it in the UI on configuration","TCOMP-1047: Make Suggestable text field editable (align with web)","TCOMP-1050: Provide simple OAuth1 integration","TCOMP-1054: Introduce @Configuration API","TCOMP-877: [documentation] Sample implementation of bulk/batch/commit-interval using groups","TCOMP-980: Provide a ValidationService in server-proxy","TCOMP-985: Align docker git metada on out Standard","TCOMP-998: [dependency upgrade] Apache Commons Compress 1.18","TCOMP-911: Suggestions callback doesn’t support Configuration parameters","TCOMP-921: String cannot be cast to Boolean when adding table with checkboxes","TCOMP-922: component manager : support loading dependencies from job lib folder.","TCOMP-924: component-kit.js errors are not sent to the error handler","TCOMP-927: talend-component:web errors are not always unwrapped and understandable","TCOMP-934: Ensure Studio rely on category and doesn’t append family name","TCOMP-960: Suggestions parameters are not correctly resolved in Studio","TCOMP-961: Default value of Suggestions method parameter is ignored","TCOMP-964: ClassCastException is thrown when non-string values are used as Suggestions method parameter","TCOMP-825: Provide component server proxy","TCOMP-928: Add negate and evaluation strategy to @ActiveIf","TCOMP-929: Ensure category contains the family","TCOMP-816: Check migration feature and implement missing use-cases","TCOMP-918: create a mvn bom with tacokit stack to keep some dependencies aligned between component-runtime and it’s studio integration","TCOMP-932: Avoid Kafka recursive logging for component server","TCOMP-933: Drop component-kit.js module","TCOMP-935: Component server should log application and service in kafka mode","TCOMP-938: Add a builtin::http trigger in the server proxy","TCOMP-939: Ensure the proxy server can lookup references with a SPI","TCOMP-943: (web) Grand parent references for triggers not well resolved","TCOMP-944: (proxy server) Ensure the trigger are well resolved for references","TCOMP-947: (maven/gradle) ensure web task logs there is a UI","TCOMP-953: Upgrade to ziplock 7.0.5","TCOMP-954: Upgrade netty to 4.1.28.Final for the test stack","TCOMP-958: Componentvalidator error message in case of an unsupported type is misleading","TCOMP-959: [dependency upgrade] Upgrade to icon bundle 0.202.0","TCOMP-962: .car deploy-in-studio command (CarMain) should support to override an existing version","TCOMP-965: [dependency upgrade] Apache Beam 2.6.0","TCOMP-966: Ensure Studio integration renames HTTP threads to identify them more explicitly","TCOMP-967: Ensure parameter index is in metadata for services and constructors","TCOMP-919: Starter doesn’t synchronize correctly with central versions","TCOMP-920: Use Meecrowave 1.2.3","TCOMP-888: Designer pipeline records counter are wrong for tacokit components with multiples outputs","TCOMP-899: Update Beam 2.5.0 compatibility","TCOMP-903: [tacokit studio integration] - Guess schema - better handling of number types recognition","TCOMP-904: [tacokit studio integration] - fix job classpath generation","TCOMP-913: Fix absolute path resolution for child of child use-case","TCOMP-900: [tacokit studio integration] - Handle conditional outputs","TCOMP-898: Ensure starter will be able to auto update its versions to avoid redeployments","TCOMP-905: Enrich scanning exclusion set","TCOMP-906: Minimalist JsonObject to IndexeredRecord utilities for beam","TCOMP-907: Support maxBatchSize as in the studio in Beam","TCOMP-910: Add maxbatchsize as built in parameter to Processor meta model","TCOMP-915: Upgrade Apache Meecrowave to 1.2.2","TCOMP-822: [Windows] deploy-in-studio & car copy jar command in mvn plugin - don’t work if the studio is running","TCOMP-844: Service default method forwarded to interface method instead of implementation one if exists","TCOMP-848: [junit5] implicit mock collector and emitter are not resetted per method","TCOMP-851: [form] UiSchema shouldn’t have a JsonSchema","TCOMP-858: @OptionsOrder not respected by form-core","TCOMP-862: [form-core] \"..\" path is not correctly resolved","TCOMP-863: Job DSL doesn’t support multiple outputs","TCOMP-873: Fix shade junit-http module : remove shaded dependencies from generated artifact","TCOMP-889: [form] arrays are lost in trigger paths","TCOMP-890: Merge the component outputs (by name) from @AfterGroup and @ElementListener","TCOMP-893: Don’t log a warning for services when parameters don’t have i18n support","TCOMP-834: Ensure that component has only one configuration argument.","TCOMP-845: [junit] ComponentsHandler misses findService","TCOMP-846: [junit] allow to inject current plugin services in test class","TCOMP-847: Support gzip in JUnit HTTP tooling","TCOMP-849: [junit http] support to match the request payload","TCOMP-850: MavenDecrypter should tolerate ${env.xxx} syntax","TCOMP-861: Ensure Car Mojo can be skipped","TCOMP-887: [studio] add chunk size advanced common param for processors & output","TCOMP-892: Validate runtime configuration before executing the runtime","TCOMP-829: Configuration Type tree is not correctly computed","TCOMP-830: Move all configuration to Microprofile Config instead of DeltaSpike","TCOMP-832: Provide a way to access lastUpdatedTimestamp in rest api","TCOMP-833: Upgrade gradle+maven for the starter","TCOMP-839: Add an API to load lazily the potential values of a list","TCOMP-840: Upgrade icon bundle to 0.190.2","TCOMP-841: Add validation of option names in the validator","TCOMP-852: [dependency upgrade] Upgrade shrinkwrap-resolver-impl-maven to 3.1.3","TCOMP-855: Support service injections in services","TCOMP-856: [dependency upgrade] OpenWebBeans 2.0.6","TCOMP-857: SimpleCollector must not depend on junit 4","TCOMP-864: Mojo should be thread safe for car/dependencies.txt generation","TCOMP-867: Expose Injector service","TCOMP-868: Create an ObjectFactory service","TCOMP-869: Ensure actions can get injected the requested lang","TCOMP-870: Provide Beam DoFn to simplify the migration from IndexedRecord to JsonObject","TCOMP-876: Allow custom converters in form-core","TCOMP-878: Add beam in the docker image OOTB","TCOMP-879: CarMojo doesn’t use car extension to attach the artifact","TCOMP-880: [dependency upgrade] Maven 3.5.4","TCOMP-881: [dependency upgrade] CXF 3.2.5","TCOMP-882: [dependency upgrade] Tomcat 9.0.10","TCOMP-883: [dependency upgrade] Beam 2.5.0","TCOMP-884: [dependency upgrade] Upgrade to icon bundle 0.197.0","TCOMP-894: [dependency upgrade] Johnzon 1.1.8","TCOMP-895: [dependency upgrade] xbean 4.9","TCOMP-827: Fix Automatic-Module-Name","TCOMP-811: Upgrade to tomcat 9.0.8","TCOMP-826: Extract component model from component server to a new artifact","TCOMP-763: Add a dev mode in the studio for tacokit","TCOMP-802: Add method to upload dependencies from .car to nexus","TCOMP-808: Upgrade to JUnit 5.2.0","TCOMP-809: compress js and css for the starter","TCOMP-810: ui spec service uses a multiselecttag for a proposable on a string field","TCOMP-804: Idea plugin doesn’t render properly configuration inputs","TCOMP-798: intellij plugin - add official starter url","TCOMP-799: @Checkable expects the datastore name to match the validation name","TCOMP-806: Ensure server and starter support gzip","TCOMP-643: Deployment","TCOMP-770: Removing component from web UI causes wrong number of components in summary","TCOMP-775: Starter - Fix properties keys generation","TCOMP-776: component-kit.js ignore credentials","TCOMP-783: ActiveIfs doesn’t make option visible","TCOMP-796: Datastore check (@Checkable) should default meta parameters to \"datastore\" if none is found","TCOMP-773: Extend the http client api to handle more generic use cases","TCOMP-771: ConfigurableClassLoader should skip scala.* classes","TCOMP-772: Upgrade icon set to ui/icons 0.179.0","TCOMP-774: Upgrade xbean to 4.8","TCOMP-768: More tolerance of configuration prefix for implicit migration of configuration node in form core library","TCOMP-756: Setup maven clirr plugin for component-api +testing","TCOMP-762: Starter should only propose a single category level in the ui","TCOMP-767: Ensure the configurationtype endpoints have matching name/path values","TCOMP-761: Merge component-runtime-manager and component-runtime-standalone","TCOMP-764: Clean up component-form-core dependencies","TCOMP-765: Upgrade to batik 1.9.1","TCOMP-752: Fix Advanced settings and Test connection button appearance in repository wizard","TCOMP-757: Duplicate method name \"writeReplace\" with signature \"()Ljava.lang.Object;\" in class file","TCOMP-751: Support gzip compression on component-server","TCOMP-753: Make classpath scanning to find component configurable","TCOMP-758: Support component-server server configuration from system properties","TCOMP-759: Enum must be i18n","TCOMP-738: Component Server should respect ~/.m2/settings.xml local repository if it exists","TCOMP-739: SerializationTransformer shouldn’t use ComponentManager to avoid ClassNotFoundException","TCOMP-740: UISpecService should be reactive and use a CompletionStage based API","TCOMP-741: UISpecService configuration support","TCOMP-742: Configuration Type properties should be rooted","TCOMP-744: Ensure wrapped BeamIO uses the right TCCL","TCOMP-745: [Dependency Upgrade] CXF 3.2.4","TCOMP-746: [Dependency Upgrade] Tomcat 9.0.6","TCOMP-747: [Dependency Upgrade] Log4j2 2.11.0","TCOMP-748: Make configurationtype index endpoint lighter OOTB","TCOMP-749: Intellij Idea plugin","TCOMP-750: Unify @Pattern using javascript regex instead of a mixed mode","TCOMP-734: Add support for context and globalMap values in Tacokit component settings","TCOMP-733: support to use a beam pipeline under the hood for beam components in di","TCOMP-693: Integrate Migration API","TCOMP-737: upgrade to beam 2.4.0","TCOMP-731: Configuration Type migration handler skipped","TCOMP-725: MavenDecrypter doesn’t support comments in settings.xml","TCOMP-726: When a component is not found the error message can be misleading","TCOMP-728: Http client doesn’t ignore empty query parameters","TCOMP-722: WebSocket connection fails with a NPE when the endpoint doesn’t exists","TCOMP-723: Adding configurationByExample utility to create query string for Job DSL","TCOMP-724: Documentation endpoint doesn’t support HTML","TCOMP-446: Support Embedded Documentation","TCOMP-650: Ensure component can be executed in beam pipelines","TCOMP-651: Ensure beam components can be wrapped and used through the Talend Component Kit Framework","TCOMP-653: Web Form metamodel service","TCOMP-655: Catalog service","TCOMP-656: UISpec compatibility","TCOMP-658: Add test Source/Sink collectors in JUnit integration","TCOMP-659: Basic job builder API to simplify JUnit tests","TCOMP-662: Validation Mojo","TCOMP-664: Local testing server for dev","TCOMP-675: Select a communication solution for Talend Component Kit server","TCOMP-680: Register components into the Studio Palette","TCOMP-681: Studio parameters form integration","TCOMP-682: Studio Metadata integration","TCOMP-683: Studio Runtime integration","TCOMP-691: Create context menu for Tacokit node in repository panel","TCOMP-719: Support Input Definition","TCOMP-720: Support Output Definition","TCOMP-721: Initial Widget Definitions"]},{"lang":"en","title":"Component Loading","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-loading.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Component Loading","In this article"],"lvl1":["Packaging a plugin","Packaging an application","Component scanning rules and default exclusions","Related articles"],"lvl2":["Dependencies","Listing needed plugins","maven-shade-plugin extensions","Jars Scanning","Package Scanning"],"lvl3":["Creating a nested Maven repository with maven-shade-plugin","ContainerDependenciesTransformer","PluginTransformer"],"text":["Talend Component scanning is based on plugins. To make sure that plugins can be developed in parallel and avoid conflicts, they need to be isolated (component or group of components in a single jar/plugin).","Multiple options are available:","Graph classloading: this option allows you to link the plugins and dependencies together dynamically in any direction. For example, the graph classloading can be illustrated by OSGi containers.","Tree classloading: a shared classloader inherited by plugin classloaders. However, plugin classloader classes are not seen by the shared classloader, nor by other plugins. For example, the tree classloading is commonly used by Servlet containers where plugins are web applications.","Flat classpath: listed for completeness but rejected by design because it doesn’t comply with this requirement.","In order to avoid much complexity added by this layer, Talend Component Kit relies on a tree classloading. The advantage is that you don’t need to define the relationship with other plugins/dependencies, because it is built-in.","Here is a representation of this solution:","","The shared area contains Talend Component Kit API, which only contains by default the classes shared by the plugins.","Then, each plugin is loaded with its own classloader and dependencies.","This section explains the overall way to handle dependencies but the Talend Maven plugin provides a shortcut for that.","A plugin is a JAR file that was enriched with the list of its dependencies. By default, Talend Component Kit runtime is able to read the output of maven-dependency-plugin in TALEND-INF/dependencies.txt. You just need to make sure that your component defines the following plugin:","Once build, check the JAR file and look for the following lines:","What is important to see is the scope related to the artifacts:","The APIs (component-api and geronimo-annotation_1.3_spec) are provided because you can consider them to be there when executing (they come with the framework).","Your specific dependencies (awesome-project in the example above) are marked as compile: they are included as needed dependencies by the framework (note that using runtime works too).","the other dependencies are ignored. For example, test dependencies.","Even if a flat classpath deployment is possible, it is not recommended because it would then reduce the capabilities of the components.","The way the framework resolves dependencies is based on a local Maven repository layout. As a quick reminder, it looks like:","This is all the layout the framework uses. The logic converts t-uple {groupId, artifactId, version, type (jar)} to the path in the repository.","Talend Component Kit runtime has two ways to find an artifact:","From the file system based on a configured Maven 2 repository.","From a fat JAR (uber JAR) with a nested Maven repository under MAVEN-INF/repository.","The first option uses either ${user.home}/.m2/repository default) or a specific path configured when creating a ComponentManager. The nested repository option needs some configuration during the packaging to ensure the repository is correctly created.","To create the nested MAVEN-INF/repository repository, you can use the nested-maven-repository extension:","Plugins are usually programmatically registered. If you want to make some of them automatically available, you need to generate a TALEND-INF/plugins.properties file that maps a plugin name to coordinates found with the Maven mechanism described above.","You can enrich maven-shade-plugin to do it:","Here is a final job/application bundle based on maven-shade-plugin:","The configuration unrelated to transformers depends on your application.","ContainerDependenciesTransformer embeds a Maven repository and PluginTransformer to create a file that lists (one per line) artifacts (representing plugins).","Both transformers share most of their configuration:","session: must be set to ${session}. This is used to retrieve dependencies.","scope: a comma-separated list of scopes to include in the artifact filtering (note that the default will rely on provided but you can replace it by compile, runtime, runtime+compile, runtime+system or test).","include: a comma-separated list of artifacts to include in the artifact filtering.","exclude: a comma-separated list of artifacts to exclude in the artifact filtering.","userArtifacts: a list of artifacts (groupId, artifactId, version, type - optional, file - optional for plugin transformer, scope - optional) which can be forced inline. This parameter is mainly useful for PluginTransformer.","includeTransitiveDependencies: should transitive dependencies of the components be included. Set to true by default.","includeProjectComponentDependencies: should project component dependencies be included. Set to false by default. It is not needed when a job project uses isolation for components.","userArtifacts: set of component artifacts to include.","With the component tooling, it is recommended to keep default locations. Also if you need to use project dependencies, you can need to refactor your project structure to ensure component isolation. Talend Component Kit lets you handle that part but the recommended practice is to use userArtifacts for the components instead of project <dependencies>.","ContainerDependenciesTransformer specific configuration is as follows:","repositoryBase: base repository location (MAVEN-INF/repository by default).","ignoredPaths: a comma-separated list of folders not to create in the output JAR. This is common for folders already created by other transformers/build parts.","ContainerDependenciesTransformer specific configuration is the following one:","pluginListResource: base repository location (default to TALEND-INF/plugins.properties`).","For example, if you want to list only the plugins you use, you can configure this transformer as follows:","The framework uses two kind of filterings when scanning your component. One based on the JAR name and one based on the package name. Make sure that your component definitions (including services) are in a scanned module if they are not registered manually using ComponentManager.instance().addPlugin(), and that the component package is not excluded.","To find components the framework can scan the classpath but in this case, to avoid to scan the whole classpath which can be really huge an impacts a lot the startup time, several jars are excluded out of the box.","These jars use the following prefix:","ApacheJMeter","FastInfoset","HdrHistogram","HikariCP","PDFBox","RoaringBitmap-","XmlSchema-","accessors-smart","activation-","activeio-","activemq-","aeron","aether-","agrona","akka-","animal-sniffer-annotation","annotation","ant-","antlr-","antlr4-","aopalliance-","apache-el","apache-mime4j","apacheds-","api-asn1-","api-common-","api-util-","apiguardian-api-","app-","archaius-core","args4j-","arquillian-","asciidoctorj-","asm-","aspectj","async-http-client-","auto-value-","autoschema-","avalon-framework-","avro-","avro4s-","awaitility-","aws-","axis-","axis2-","base64-","batchee-jbatch","batik-","bcmail","bcpkix","bcprov-","beam-model-","beam-runners-","beam-sdks-","bigtable-client-","bigtable-protos-","boilerpipe-","bonecp","bootstrap.jar","brave-","bsf-","build-link","bval","byte-buddy","c3p0-","cache","carrier","cassandra-driver-core","catalina-","catalina.jar","cats","cdi-","cglib-","charsets.jar","chill","classindex","classmate","classutil","classycle","cldrdata","commands-","common-","commons-","component-api","component-form","component-runtime","component-server","component-spi","component-studio","components-adapter-beam","components-api","components-common","compress-lzf","config","constructr","container-core","contenttype","coverage-agent","cryptacular-","cssparser-","curator-","curvesapi-","cxf-","daikon","databinding","dataquality","dataset-","datastore-","debugger-agent","deltaspike-","deploy.jar","derby-","derbyclient-","derbynet-","dnsns","dom4j","draw2d","easymock-","ecj-","eclipselink-","ehcache-","el-api","enumeratum","enunciate-core-annotations","error_prone_annotations","expressions","fastutil","feign-core","feign-hystrix","feign-slf4j","filters-helpers","findbugs-","fluent-hc","fluentlenium-core","fontbox","freemarker-","fusemq-leveldb-","gax-","gcsio-","gef-","geocoder","geronimo-","gmbal","google-","gpars-","gragent.jar","graph","grizzled-scala","grizzly-","groovy-","grpc-","gson-","guava-","guice-","h2-","hadoop-","hamcrest-","hawtbuf-","hawtdispatch-","hawtio-","hawtjni-runtime","help-","hibernate-","hk2-","howl-","hsqldb-","htmlunit-","htrace-","httpclient-","httpcore-","httpmime","hystrix","iban4j-","icu4j-","idb-","idea_rt.jar","instrumentation-api","ion-java","isoparser-","istack-commons-runtime-","ivy-","j2objc-annotations","jBCrypt","jaccess","jackcess-","jackson-","janino-","jansi-","jasper-el.jar","jasper.jar","jasypt-","java-atk-wrapper","java-libpst-","java-support-","java-xmlbuilder-","javacsv","javaee-","javaee-api","javassist-","javaws.jar","javax.","jaxb-","jaxp-","jbake-","jboss-","jbossall-","jbosscx-","jbossjts-","jbosssx-","jcache","jce.jar","jcip-annotations","jcl-over-slf4j-","jcommander-","jdbcdslog-1","jempbox","jersey-","jets3t","jettison-","jetty-","jface","jfairy","jffi","jfr.jar","jfxrt.jar","jfxswt","jhighlight","jjwt","jline","jmatio-","jmdns-","jmespath-","jms","jmustache","jna-","jnr-","jobs-","joda-convert","joda-time-","johnzon-","jolokia-","jopt-simple","jruby-","json-","json4s-","jsonb-api","jsoup-","jsp-api","jsr","jsse.jar","jta","jul-to-slf4j-","juli-","junit-","junit5-","juniversalchardet","junrar-","jwt","jython","kafka","kahadb-","kotlin-runtime","kryo","leveldb","libphonenumber","lift-json","lmdbjava","localedata","log4j-","logback","logging-event-layout","logkit-","lombok","lucene","lz4","machinist","macro-compat","mail-","management-","mapstruct-","maven-","mbean-annotation-api-","meecrowave-","mesos-","metadata-extractor-","metrics-","microprofile-config-api-","mimepull-","mina-","minlog","mockito-core","mqtt-client-","multitenant-core","multiverse-core-","mx4j-","myfaces-","mysql-connector-java-","nashorn","neethi-","neko-htmlunit","nekohtml-","netflix","netty-","nimbus-jose-jwt","objenesis-","okhttp","okio","opencensus-","openjpa-","openmdx-","opennlp-","opensaml-","opentest4j-","openwebbeans-","openws-","ops4j-","org.apache.aries","org.apache.commons","org.apache.log4j","org.eclipse.","org.junit.","org.osgi.core-","org.osgi.enterprise","org.talend","orient-commons-","orientdb-core-","orientdb-nativeos-","oro-","osgi","paranamer","parquet","pax-url","pdfbox","play","plexus-","plugin.jar","poi-","postgresql","preferences-","prefixmapper","proto-","protobuf-","py4j-","pyrolite-","qdox-","quartz-2","quartz-openejb-","reactive-streams","reflectasm-","reflections","regexp-","registry-","resources.jar","rhino","ribbon","rmock-","rome","routes-compiler","routines","rt.jar","runners","runtime-","rxjava","rxnetty","saaj-","sac-","scala","scalap","scalatest","scannotation-","selenium","serializer-","serp-","service-common","servlet-api-","servo-","shaded","shapeless","shrinkwrap-","sisu-guice","sisu-inject","slf4j-","slick","smack-","smackx-","snakeyaml-","snappy-","spark-","specs2","spring-","sshd-","ssl-config-core","stax-api-","stax2-api-","stream","sunec.jar","sunjce_provider","sunpkcs11","surefire-","swagger-","swizzle-","sxc-","system-rules","tachyon-","tagsoup-","talend-icon","test-agent","test-interface","testng-","threetenbp","tika-","tomcat","tomee-","tools.jar","twirl","twitter4j-","tyrex","uncommons","unused","util","validation-api-","velocity-","wagon-","wandou","webbeans-","websocket","woodstox-core","workbench","ws-commons-util-","wsdl4j-","wss4j-","wstx-asl-","xalan-","xbean-","xercesImpl-","xlsx-streamer-","xml-apis-","xml-resolver-","xmlbeans-","xmlenc-","xmlgraphics-","xmlpcore","xmlpull-","xmlrpc-","xmlschema-","xmlsec-","xmltooling-","xmlunit-","xstream-","xz-","zipfs.jar","zipkin-","ziplock-","zkclient","zookeeper-","Since the framework can be used in the case of fatjars or shades, and because it still uses scanning, it is important to ensure we don’t scan the whole classes for performances reason.","Therefore, the following packages are ignored:","avro.shaded","com.codehale.metrics","com.ctc.wstx","com.datastax.driver.core","com.fasterxml.jackson.annotation","com.fasterxml.jackson.core","com.fasterxml.jackson.databind","com.fasterxml.jackson.dataformat","com.fasterxml.jackson.module","com.google.common","com.google.thirdparty","com.ibm.wsdl","com.jcraft.jsch","com.kenai.jffi","com.kenai.jnr","com.sun.istack","com.sun.xml.bind","com.sun.xml.messaging.saaj","com.sun.xml.txw2","com.thoughtworks","io.jsonwebtoken","io.netty","io.swagger.annotations","io.swagger.config","io.swagger.converter","io.swagger.core","io.swagger.jackson","io.swagger.jaxrs","io.swagger.model","io.swagger.models","io.swagger.util","javax","jnr","junit","net.sf.ehcache","net.shibboleth.utilities.java.support","org.aeonbits.owner","org.apache.activemq","org.apache.beam","org.apache.bval","org.apache.camel","org.apache.catalina","org.apache.commons.beanutils","org.apache.commons.cli","org.apache.commons.codec","org.apache.commons.collections","org.apache.commons.compress","org.apache.commons.dbcp2","org.apache.commons.digester","org.apache.commons.io","org.apache.commons.jcs.access","org.apache.commons.jcs.admin","org.apache.commons.jcs.auxiliary","org.apache.commons.jcs.engine","org.apache.commons.jcs.io","org.apache.commons.jcs.utils","org.apache.commons.lang","org.apache.commons.lang3","org.apache.commons.logging","org.apache.commons.pool2","org.apache.coyote","org.apache.cxf","org.apache.geronimo.javamail","org.apache.geronimo.mail","org.apache.geronimo.osgi","org.apache.geronimo.specs","org.apache.http","org.apache.jcp","org.apache.johnzon","org.apache.juli","org.apache.logging.log4j.core","org.apache.logging.log4j.jul","org.apache.logging.log4j.util","org.apache.logging.slf4j","org.apache.meecrowave","org.apache.myfaces","org.apache.naming","org.apache.neethi","org.apache.openejb","org.apache.openjpa","org.apache.oro","org.apache.tomcat","org.apache.tomee","org.apache.velocity","org.apache.webbeans","org.apache.ws","org.apache.wss4j","org.apache.xbean","org.apache.xml","org.apache.xml.resolver","org.bouncycastle","org.codehaus.jackson","org.codehaus.stax2","org.codehaus.swizzle.Grep","org.codehaus.swizzle.Lexer","org.cryptacular","org.eclipse.jdt.core","org.eclipse.jdt.internal","org.fusesource.hawtbuf","org.h2","org.hamcrest","org.hsqldb","org.jasypt","org.jboss.marshalling","org.joda.time","org.jose4j","org.junit","org.jvnet.mimepull","org.metatype.sxc","org.objectweb.asm","org.objectweb.howl","org.openejb","org.opensaml","org.slf4j","org.swizzle","org.terracotta.context","org.terracotta.entity","org.terracotta.modules.ehcache","org.terracotta.statistics","org.tukaani","org.yaml.snakeyaml","serp","it is not recommanded but possible to add in your plugin module a TALEND-INF/scanning.properties file with classloader.includes and classloader.excludes entries to refine the scanning with custom rules. In such a case, exclusions win over inclusions.","Generating a project using the starter","Defining an input component","Defining a processor or output component","Defining component layout and configuration","Registering a component","Internationalizing a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Component Server HTTP API reference","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-rest-resources.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Component Server HTTP API reference","In this article"],"lvl1":["Component Server API"]},{"lang":"en","title":"Component data configuration types","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-configuration-types.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Component data configuration types","In this article"],"lvl1":["Dataset","Datastore"],"text":["It is common to classify the incoming data. It is similar to tagging data with several types. Data can commonly be categorized as follows:","Datastore: The data you need to connect to the backend.","Dataset: A datastore coupled with the data you need to execute an action.","Mark a model (complex object) as being a dataset.","API: @org.talend.sdk.component.api.configuration.type.DataSet","Sample:","Mark a model (complex object) as being a datastore (connection to a backend).","API: @org.talend.sdk.component.api.configuration.type.DataStore","Sample:"]},{"lang":"en","title":"Component field constraints and validations","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-constraints.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Component field constraints and validations","In this article"],"lvl1":["MaxLength","MinLength","Pattern","Max","Min","Required","MaxItems","MinItems","UniqueItems"],"text":["You can use metadata to specify that a field is required or has a minimum size, and so on. This is done using the validation metadata in the org.talend.sdk.component.api.configuration.constraint package:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: maxLength","Parameter Type: double","Supported Types: — java.lang.CharSequence","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: minLength","Parameter Type: double","Supported Types: — java.lang.CharSequence","Sample:","Validate the decorated string with a javascript pattern (even into the Studio).","API: @org.talend.sdk.component.api.configuration.constraint.Pattern","Name: pattern","Parameter Type: java.lang.string","Supported Types: — java.lang.CharSequence","Sample:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: max","Parameter Type: double","Supported Types: — java.lang.Number — int — short — byte — long — double — float","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: min","Parameter Type: double","Supported Types: — java.lang.Number — int — short — byte — long — double — float","Sample:","Mark the field as being mandatory.","API: @org.talend.sdk.component.api.configuration.constraint.Required","Name: required","Parameter Type: -","Supported Types: — java.lang.Object","Sample:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: maxItems","Parameter Type: double","Supported Types: — java.util.Collection","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: minItems","Parameter Type: double","Supported Types: — java.util.Collection","Sample:","Ensure the elements of the collection must be distinct (kind of set).","API: @org.talend.sdk.component.api.configuration.constraint.Uniques","Name: uniqueItems","Parameter Type: -","Supported Types: — java.util.Collection","Sample:"]},{"lang":"en","title":"Component server and HTTP API","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/documentation-rest.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Component server and HTTP API","In this article"],"lvl1":["HTTP API","HTTPS activation","Web forms and REST API","Logging","UiSpec Server","Docker"],"lvl2":["Component Server API","Deprecated endpoints","WebSocket transport","Using the UiSpec model without the tooling","JavaScript integration","Coordinates","Configuring the UiSpec server","HTTP API","Configuring the server module","Services","Run","Configure","Maven repository","Logging","Build the image yourself"],"lvl3":["Adding custom entries to the forms","Adding custom converters (selecting the widget or rendering)","Enabling help/hints","Client in Play","Defining a dropdown with all root configurations","Populate a dropdown from a remote call","Populate a dropdown with a list of references","Reloading the form based on the selected root","Reloading the form based on a selected entity reference","Component UiSpec Server","Deploy components to the server","default profile","Kafka profile","Tracing (Brave Monitoring)"],"text":["A test environment is available on Heroku and can be browsed using Talend Component Kit Server instance on Restlet Studio.","The HTTP API intends to expose most Talend Component Kit features over HTTP. It is a standalone Java HTTP server.","The WebSocket protocol is activated for the endpoints. Endpoints then use /websocket/v1 as base instead of /api/v1. See WebSocket for more details.","Here is the API:","To make sure that the migration can be enabled, you need to set the version the component was created with in the execution configuration that you send to the server (component version is in component the detail endpoint). To do that, use tcomp::component::version key.","Endpoints that are intended to disappear will be deprecated. A X-Talend-Warning header will be returned with a message as value.","You can connect yo any endpoint by:","Replacing /api with /websocket","Appending /<http method> to the URL","Formatting the request as:","For example:","The response is formatted as follows:","All endpoints are logged at startup. You can then find them in the logs if you have a doubt about which one to use.","If you don’t want to create a pool of connections per endpoint/verb, you can use the bus endpoint: /websocket/v1/bus. This endpoint requires that you add the destinationMethod header to each request with the verb value (GET by default):","Using the server ZIP (or Docker image), you can configure HTTPS by adding properties to MEECROWAVE_OPTS. Assuming that you have a certificate in /opt/certificates/component.p12 (don’t forget to add/mount it in the Docker image if you use it), you can activate it as follows:","The component-form library provides a way to build a component REST API facade that is compatible with React form library.","for example:","the Client can be created using ClientFactory.createDefault(System.getProperty(\"app.components.base\", \"http://localhost:8080/api/v1\")) and the service can be a simple new UiSpecService<>(). The factory uses JAX-RS if the API is available (assuming a JSON-B provider is registered). Otherwise, it tries to use Spring.","The conversion from the component model (REST API) to the uiSpec model is done through UiSpecService. It is based on the object model which is mapped to a UI model. Having a flat model in the component REST API allows to customize layers easily.","You can completely control the available components, tune the rendering by switching the uiSchema, and add or remove parts of the form. You can also add custom actions and buttons for specific needs of the application.","The /migrate endpoint was not shown in the previous snippet but if you need it, add it as well.","This Maven dependency provides the UISpec model classes. You can use the Ui API (with or without the builders) to create UiSpec representations.","For Example:","The model uses the JSON-B API to define the binding. Make sure to have an implementation in your classpath. To do that, add the following dependencies:","component-kit.js is no more available (previous versions stay on NPM) since it got replaced by @talend/react-containers. The previous import can be replaced by import kit from '@talend/react-containers/lib/ComponentForm/kit';.","Default JavaScript integration goes through the Talend UI Forms library and its Containers wrapper.","Documentation is now available on the previous link.","The logging uses Log4j2. You can specify a custom configuration by using the -Dlog4j.configurationFile system property or by adding a log4j2.xml file to the classpath.","Here are some common configurations:","Console logging:","Output messages look like:","JSON logging:","Output messages look like:","Rolling file appender:","More details are available in the RollingFileAppender documentation.","You can compose previous layout (message format) and appenders (where logs are written).","The UiSpec server is a companion application for the Component Server. It provides a client to the Component Server which serves UiSpec payload to integrate with the client JavaScript UiForm library.","the configuration is read from system properties, environment variables, …. If you use playx-microprofile-config, you can also use typesafe configuration.","Key","Description","Default","talend.component.proxy.actions.proposable.cached","If true the proposable (suggestion lists only depending on the server state) will be cached, otherwise they will be requested for each form rendering.","true","talend.component.proxy.application.home","A home location for relative path resolution (optional).","${playx.application.home}","talend.component.proxy.client.executor.threads","For the client executor, the number of threads.","64","talend.component.proxy.client.providers","List of JAX-RS providers to register on the client, at least a JSON-B one should be here.","-","talend.component.proxy.client.timeouts.connect","The connect timeout for the communication with the server.base in ms.","60000","talend.component.proxy.client.timeouts.read","The read timeout for the communication with the server.base in ms.","600000","talend.component.proxy.jcache.active","Should the server use jcache to store catalog information and refresh it with some polling. If so the keys talend.component.proxy.jcache.caches.$cacheName.expiry.duration, talend.component.proxy.jcache.caches.$cacheName.management.active and talend.component.proxy.jcache.caches.$cacheName.statistics.active will be read to create a JCache MutableConfiguration. Also note that if all the cachesshare the same configuration you can ignore the $cacheName layer.","true","talend.component.proxy.jcache.cache-key.name","A header to use in the cache key (to represent a tenant or equivalent).","-","talend.component.proxy.jcache.provider","Caching provider implementation to use (only set it if ambiguous).","-","talend.component.proxy.jcache.refresh.period","Number of seconds used to check if the server must be refreshed.","60","talend.component.proxy.processing.headers","The headers to append to the request when contacting the server. Format is a properties one. You can put a hardcoded value or a placeholder (${key}).In this case it will be read from the request attributes and headers.","-","talend.component.proxy.processing.uiSpec.patch","An optional location (absolute or resolved from APP_HOME environment variable). It can take an optional query parameter force which specifies if the startup should fail if the file is not resolved. The resolution is done per configuration type (datastore, dataset, …) but fallbacks on default type if the file is not found.","The values can be keys in the resource bundle org.talend.sdk.component.proxy.enrichment.i18n.Messages. Use that for display names, placeholders etc…The content","component-uispec-metadata.%s.json?force=false","talend.component.proxy.server.base","The base to contact the remote server (NOTE: it is recommanded to put a load balancer if you have multiple instances.)","-","As shown in the table above, you can customize the forms by type. The format reuses Talend Component Kit HTTP API (properties model) and defines two main types of extensions:","prependProperties: Lists all the models of properties added to the form before the actual underlying form.","appendProperties: Lists all the models of properties added to the form after the actual underlying form.","If you don’t specify a name, the path is used to deduce the name automatically.","Always make sure to define a root object for these properties. Do not use dots in the path value. It is recommended to prefix it with a $ character.","When developing a org.talend.sdk.component.form.internal.converter.CustomPropertyConverter CDI, the proxy adds it to the UiSpecService service and uses it with a high priority to convert the server model to a UiSpec model.","To make it a CDI bean, add @Dependent to the class and if you use the Play integration, customize the bean array: playx.cdi.beans.customs += {className: org.talend.myapp.MyConverter}.","This allows to use a custom @Ui API and advanced modeling when specific to applications. Converters are sorted respecting to the @Priority value. If the annotation is missing, the priority defaults to 0.","It is possible to show under the inputs the help about each property. To do that, you must set a PropertyContext.Configuration instance on UiSpecService with the includeDocumentationMetadata attribute set to true.","The client to use to connect to the Talend Component Kit server is the CXF client, using HttpClient HC (NIO) transport. When you use the Play module, it can be configured with its standard properties prefixed by talend.component.proxy..","You can find more information on CXF website.","The special dynamic_values action builtin::roots can be used for a dropdown filled with all available root types.","Here is a sample patch file:","In some cases you will want to call a remote service giving you a list of data. For that there is a specific http builtin trigger which will be caught on the proxy and redirected to the configured server to map it as a dynamic_values trigger.","Assume you want to call http:://foo.com/bar propagating the cookies to get the proposals for the entry bar, then you will configure it this way:","The configuration of the call is passed through a comma separated list in parenthesis as seen in previous snippet. The configuration entries are the following ones:","Name","Description","Sample","url","The target server to call. Note that placeholder are supported and filled from request headers (placeholderProvider).","proposals.service.com","headers","; separated list of headers to propagate (using placeholderProvider).","cookie,Authorization","accept","The Accept header. Note that current we only support to parse JSON output and it defaults to application/json.","application/v1+json","object","Boolean (default to false) to set to true if the response payload is an object and not a list.","true","objectKey","If object is true, the key to extract to get the list to process.","items","id","Name of the field to extract from an item of the response list to map to the identifier of the proposal (default to id).","id","name","Name of the field to extract from an item of the response list to map to the label of the proposal (default to name).","label","In some forms you will want to populate a dropdown with a list of entities available in your database. For that, the proxy will rely on a SPI called Integration. If you don’t implement it, it uses a Guice integration if Guice is in the classpath or a native CDI integration otherwise.","The integration will then let the proxy lookup a ReferenceService implementation which will provide from a configuration type type and name (for instance datastore, MyDataBaseConfig) the list of references you want to propose to the end user.","Here is very simple implementation:","Generally this kind of completion will be activated under the hood by the proxy using this kind of metadata:","In some cases you will want to hide this field if the proposals are ⇐ 1, in this case you can use a condition:","The builtin::root::reloadFromId action, with the reloadForm type, allows to reload the whole form:","It is common to have a dropdown with the list of roots and to reload the form when one is selected.","The client side (javascript) is now fully encapsulated in ComponentForm from @talend/ui.","The builtin::root::reloadFromParentEntityId action, with the reloadFromParentEntityId type, allows to reload the whole form:","references are automatically initialized if you use PropertiesService#filterProperties.","These endpoints allow to obtain UiSpec representations of the component/configuration types properties.","Version : v1","Contact : Talend Contact Email : contact@talend.com","License : Apache 2.0 License URL : www.apache.org/licenses/LICENSE-2.0.html Terms of service : null","Host : host:port BasePath : /componentproxy/api/v1 Schemes : HTTP, HTTPS","action","configuration","configurations","dataset","datastore","form","icon","persistence","ui spec","uispec","configuration types has action that can be executed using this endpoint","Type","Name","Schema","Query","action optional","string","Query","family optional","string","Query","language optional","string","Query","type optional","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","< string, CompletionStageMapStringObject > map","400","This response is returned when the action is null","ProxyErrorPayload","404","This response is returned when no action is found","ProxyErrorPayload","520","This response is returned when the action raise an unhandled error","ProxyErrorPayload","application/json","application/json","action","configurations","Every configuration has an icon. In the response an icon key is returned. this icon key can be one of the bundled icons or a custom one. The consumer of this endpoint will need to check if the icon key is in the icons bundle otherwise the icon need to be gathered using the familyId from this endpoint configurations/{id}/icon","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","datastore","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","UiNode","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","CompletionStageByte[]","application/json","application/json","application/octet-stream","icon","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","formId required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type : object","Type : object","Type : object","Type : object","Type : object","Type : object","Name","Description","Schema","id optional","The identifier of the entity related to current request. It is generally thecreated entity of updated one.","string","Name","Schema","defaultValue optional","object","description optional","string","enumValues optional","< string > array","id optional","string","items optional","JsonSchema","maxItems optional","integer (int32)","maxLength optional","integer (int32)","maximum optional","number (double)","minItems optional","integer (int32)","minLength optional","integer (int32)","minimum optional","number (double)","pattern optional","string","properties optional","< string, JsonSchema > map","ref optional","string","required optional","< string > array","schema optional","string","title optional","string","type optional","string","uniqueItems optional","boolean","Name","Schema","name optional","string","value optional","string","Name","Description","Schema","children optional","The list of configuration reusing this one as a reference (can be created \"next\").","< string > array","familyId optional","The identifier of the family of this configuration.","string","familyLabel optional","The display name of the family of this configuration.","string","icon optional","The icon of this configuration. If you use an existing bundle (@talend/ui/icon), ensure it is present by default and if not do a request using the family on the related endpoint.","string","id optional","The identifier of this configuration/node.","string","label optional","The display name of this configuration.","string","name optional","The technical name of this node (it is human readable but not i18n friendly), useful for debug purposes.","string","version optional","The version of this configuration for the migration management.","integer (int32)","Name","Description","Schema","nodes optional","The list of nodes matching the request. The key is the node identifier.","< string, Node > map","Name","Schema","path optional","string","type optional","string","Name","Schema","key optional","string","path optional","string","Name","Description","Schema","code optional","The error code independently of the locale and not as precise as a message (not context aware).","string","message optional","A human readable message to help understanding the error","string","Name","Schema","action optional","string","family optional","string","onEvent optional","string","options optional","< Option > array","parameters optional","< Parameter > array","type optional","string","Name","Schema","jsonSchema optional","JsonSchema","properties optional","object","uiSchema optional","< UiSchema > array","Name","Description","Schema","metadata optional","The metadata associated to the node if needed by the UI.","Node","ui optional","The ui specification corresponding to the requested node. It is literally the form representing this configuration.","Ui","Name","Schema","autoFocus optional","boolean","condition optional","< string, < object > array > map","description optional","string","disabled optional","boolean","itemWidget optional","string","items optional","< UiSchema > array","key optional","string","options optional","< string, string > map","placeholder optional","string","readOnly optional","boolean","required optional","boolean","restricted optional","boolean","title optional","string","titleMap optional","< NameValue > array","triggers optional","< Trigger > array","type optional","string","widget optional","string","There are two ways to call the save endpoint. If you don’t want to pass the form identifier and prefer to use a generic endpoint that simply passes the type of configuration you are configuring, then you need to modify your enrichment configuration to ensure that the form identifier is present and to specify which form field it is.","To do that, add the proxyserver::formId Boolean to the metadata:","Only the first property with proxyserver::formId set to \"true\" is used. The path cannot contain any array.","The server module contains several configurations that you can set in:","Environment variables.","System properties.","A file located based on the --component-configuration CLI option.","the configuration is read from system properties, environment variables, ….","Key","Description","Default","talend.component.server.component.coordinates","A comma separated list of gav to locate the components","-","talend.component.server.component.extend.dependencies","Should the component extensions add required dependencies.","true","talend.component.server.component.registry","A property file where the value is a gav of a component to register (complementary with coordinates)","-","talend.component.server.documentation.active","Should the /documentation endpoint be activated.","true","talend.component.server.execution.dataset.retriever.timeout","How long the read execution endpoint can last (max)","180","talend.component.server.execution.pool.size","The size of the execution pool for runtime endpoints.","64","talend.component.server.execution.pool.wait","How long the application waits during shutdown for the execution tasks to complete","PT10S","talend.component.server.jaxrs.exceptionhandler.defaultMessage","If set it will replace any message for exceptions. Set to false to use the actual exception message.","false","talend.component.server.maven.repository","The local maven repository used to locate components and their dependencies","-","talend.component.server.monitoring.brave.reporter.async","When using url or kafka reporter, you can configure the async reporter with properties passed to this configuration entry.Ex: messageTimeout=5000,closeTimeout=5000.","console","talend.component.server.monitoring.brave.reporter.type","The brave reporter to use to send the spans. Supported values are [log, noop]. When configuration is needed,you can use this syntax to configure the repoter if needed: <name>(config1=value1, config2=value2), for example: url(endpoint=http://brave.company.com.","In log mode, if environment variable TRACING_ON doesn’t exist or is set to false, noop will be selected, and is set to true, TRACING_KAFKA_URL, TRACING_KAFKA_TOPIC and TRACING_SAMPLING_RATE will configure kafka reporter..","noop","talend.component.server.monitoring.brave.sampling.action.rate","The accuracy rate of the sampling for action endpoints.","-1","talend.component.server.monitoring.brave.sampling.component.rate","The accuracy rate of the sampling for component endpoints.","-1","talend.component.server.monitoring.brave.sampling.configurationtype.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.documentation.rate","The accuracy rate of the sampling for documentation endpoint.","-1","talend.component.server.monitoring.brave.sampling.environment.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.execution.rate","The accuracy rate of the sampling for execution endpoints.","1","talend.component.server.monitoring.brave.sampling.rate","The accuracy rate of the sampling.","-1.","talend.component.server.monitoring.brave.service.name","The name used by the brave integration (zipkin)","component-server","talend.component.server.security.command.handler","How to validate a command/request. Accepted values: securityNoopHandler.","securityNoopHandler","talend.component.server.security.connection.handler","How to validate a connection. Accepted values: securityNoopHandler.","securityNoopHandler","The module provides some services usable to fulfill some basic requirements of the component interaction:","ConfigurationFormatter to (un)flatten the properties (JSON from/to key-value format)","ConfigurationVisitorService to browse properties and identify credentials to cipher them","ValidationService to validate a JSON properties set before any persistence action","The server image is deployed on Docker. Its version is suffixed with a timestamp to ensure images are not overriden and can break your usage. You can check the available version on Docker hub.","You can run the docker image by executing this command :","You can set the env variable MEECROWAVE_OPTS to customize the server, by default it is installed in /opt/talend/component-kit.","The maven repository is the default one of the machine, you can change it setting the system property talend_component_server_maven_repository=/path/to/your/m2.","If you want to deploy some components you can configure which ones in MEECROWAVE_OPTS (see server doc online) and redirect your local m2:","The component server docker image comes with two log4j2 profile default and kafka. The logging profile can be changed by setting the environment variable TALEND_COMPONENT_LOG4J2_PROFILE to kafka the default profile is active by default.","The default profile has file and console logging capabilities. The console logging is off by default and you can activate it by setting CONSOLE_LOG_LEVEL environment variable to DEBUG, INFO, WARN or any other log level supported by log4j2. In practise and during development you will want to see the logs without connecting to the server by activating console logging.","Run docker image with console logging","Kafka profile let you send log to Kafka servers. The log are formatted in json and follow the layout defined by Talend and described here github.com/Talend/daikon/tree/master/daikon-logging/logging-event-layout","This profile require two environment variables","LOG_KAFKA_TOPIC : Kafka topic.","LOG_KAFKA_URL : A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. This list should be in the form url:port separated by ,","Run docker image with kafka profile","Note : LOG_KAFKA_TOPIC will receive the application and the access logs and TRACING_KAFKA_TOPIC will receive brave tracing logs.","The component server use github.com/openzipkin/brave to monitor request.","The tracing can be activated by setting environment variable TRACING_ON to true.","You can choose the reporter type by setting talend_component_server_monitoring_brave_reporter_type environment variable to log (this is the default value in this docker image) or to noop which will deactivate the tracing. Other type of reporter may be added in the future.","The tracing rate is configurable by setting environment variable TRACING_SAMPLING_RATE. This is the default sample rate for all the endpoints and has a default value of 0.1","You can define more accurate rate for every component server endpoint using those environment variables :","Environment variable","Endpoint","talend_component_server_monitoring_brave_sampling_environment_rate","/api/v1/environment","talend_component_server_monitoring_brave_sampling_configurationtype_rate","/api/v1/configurationtype","talend_component_server_monitoring_brave_sampling_component_rate","/api/v1/component","talend_component_server_monitoring_brave_sampling_documentation_rate","/api/v1/documentation","talend_component_server_monitoring_brave_sampling_action_rate","/api/v1/action","talend_component_server_monitoring_brave_sampling_execution_rate","/api/v1/execution","Run docker image with tracing on","You can build component starter server in docker following those instructions :","this assumes the project is built before you run that command."]},{"lang":"en","title":"Contributing to Talend Component Kit documentation","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/how-to-contribute.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Contributing to Talend Component Kit documentation","In this article"],"lvl1":["How to contribute","General organization guidelines","List of metadata attributes","Conditionality regarding output formats","Content","Sample page"],"lvl2":["Page and section levels","Reusing content with includes","Adding images","Tables","Admonition blocks"],"text":["This document explains how Asciidoctor is used in the context of Talend Component Kit as well as the specific processes in place.","For general guidelines about Asciidoctor, refer to the Asciidoc Syntax quick reference page.","There are two ways for external contributors to suggest modifications or new content. Both of options below require you to have a GitHub account created.","On every page of the Talend Component Kit Developer Guide, a Suggest and edit button is available. It allows to access the corresponding source file on GitHub and to create a pull request with the suggested edits. The pull request is then assessed by the team in charge of the project.","Fork the Runtime repository of the Talend Component Kit project and edit .adoc files located under documentation/src/main/antora/modules/ROOT/pages. Make sure to follow the guidelines outlined in the current document, especially for large modifications or new content, to make sure it can properly be rendered. When done, create a pull request that will be assessed by the team in charge of the project.","The documentation is made of:","Documentation files manually are written under documentation/src/main/antora/modules/ROOT/pages.","Documentation files automatically generated from the source code under documentation/src/main/antora/modules/ROOT/pages/_partials. These files are individually called in manually written files through includes.","Assets, especially images, stored in the documentation/src/main/antora/modules/ROOT/assets folder. Some subfolders exist to categorize the assets.","Each file has a unique name and is rendered as a unique HTML page. Some of the files are prefixed to help identifying the type of content it contains. Most common examples are:","index- for pages referenced from the main index page. These pages also contain specific attributes to be correctly rendered on the main index page (see 'List of metadata attributes' below).","tutorial- for tutorials/guided examples.","generated_ for pages generated from the source code. These pages are generally stored in the _partials folder.","For all pages:",":page-partial indicates that the current .adoc file can be included in another document using an include::. This attribute has no value.",":page-talend_skipindexation: indicates that the current .adoc file must not be indexed. This attribute has no value. Add it to files that should not be returned in the search, like index files that only contain includes.",":description: is the meta description of the file. Each .adoc file is rendered as an HTML file.",":keywords: is the list of meta keywords relevant for the current .adoc file. Separate keywords using simple commas.",":page-talend_stage: draft indicates that the current document is a draft and is not final even if published. It triggers the display of a small banner indicating the status of the page. Remove this attribute once the page is final.","For pages that should appear as a tile on the index page:",":page-documentationindex-index: is the weight of the page. A low weight indicates that the page should be one of the first tiles to appear. A high weight will push the tile towards the end of the list in the index page.",":page-documentationindex-label: is the title of the tile in the index page.",":page-documentationindex-icon: is the icon of the tile in the index page. The value of this attribute should be the name of a free icon on fontawesome.",":page-documentationindex-description: is a short description of the page that will be displayed in the tile under its title.","For pages containing API descriptions:",":page-talend_swaggerui: true indicates that the page contains some API reference that should be displayed using Swagger UI","The Talend Component Kit documentation is published as HTML and PDF. Links can be troublesome in some cases, making pure lists of links (such as \"Related links\" sections) rather useless in the PDF output.","To avoid this, it is possible to define some conditionality to have some content only displaying in one of the output formats only. For example:","Every .adoc file can only contain one 'level 1' title (=), located at the top of the page. It is a best practices that all sublevels added to the document should be kept consistent. For example, don’t use a 'level 3' (===) section directly inside a 'level 1'.","When possible, avoid going lower than section 2 (===) to keep the page readable. In the HTML output, document title is rendered as <h1>, section 1 title as <h2>, etc. The \"in-page\" navigation available on the right side of the HTML rendering only considers <h2> and <h3> elements. Other levels are ignored to keep the navigation readable and simple.","It is possible to reuse content through \"includes\". Includes can be user to reuse entire files in other files, allowing to avoid copy pasting.","When using an 'include' (calling an .adoc file from another .adoc file), you can specify a level offset. Avoid using includes if not absolutely necessary. If the case happens, remember the above note to think about the rendering. An include can be done as follows:","In this case, both doc1.adoc and doc2.adoc are rendered in the same page and their content is offset by one level, meaning that the document title of doc1 becomes a <h2> instead of an <h1> in the final rendering, and so on.","Note that both doc1.adoc and doc2.adoc will in addition be rendered as standalone pages (doc1.html and doc2.html).","All images are stored under documentation > src > main > antora > modules > ROOT > assets > images. Relatively to .adoc files, it can be ../assets/images/ or ../../assets/images for _partials (automatically generated from code) pages. To avoid handling different relative paths, a variable is available and resolves directly image: to the image folder. Hence, paths to images should start with the following:","image:(<subfolder>/)<image_name>.png[<image_name>(,parameters)]","If there is no subfolder, type the image name right away. Adding an image title is mandatory to avoid empty broken spaces in the content. If necessary, you can add more parameters separated by a comma between the same brackets as the image title, such as the desired width, height, etc.","Use values in % for image size. For example; image:landscape.png[Landscape,70%]","In a general manner, avoid using tables if there are other solutions available. This is especially the case for complex tables that include assets or big code samples can lead to display issues.","API","Type","Description","@o.t.s.c.api.service.completion.DynamicValues","dynamic_values","Mark a method as being useful to fill potential values of a string option for a property denoted by its value.","@o.t.s.c.api.service.healthcheck.HealthCheck","healthcheck","This class marks an action doing a connection test","The following elements can be used. However, avoid using them one after another as it can make reading more difficult:","NOTE: for a simple information note","IMPORTANT: for a warning. Warnings should include information that lead to important errors if not taken into account","TIP: for alternative ways or shortcuts to ease a process or procedure","Admonition blocks should be kept as simple and short as possible. In some niche cases, it may be required to insert more complex content in an admonition block, such as a bullet list. In these cases, they should be formatted as follows:"]},{"lang":"en","title":"Creating a job pipeline","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/services-pipeline.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Creating a job pipeline","In this article"],"lvl1":["Job Builder","Beam case","Related articles"],"lvl2":["Environment/Runner","Key Provider","Inputs and Outputs","Processors","Converting a Beam.io into a component I/O"],"text":["The Job builder lets you create a job pipeline programmatically using Talend components (Producers and Processors). The job pipeline is an acyclic graph, allowing you to build complex pipelines.","Let’s take a simple use case where two data sources (employee and salary) are formatted to CSV and the result is written to a file.","A job is defined based on components (nodes) and links (edges) to connect their branches together.","Every component is defined by a unique id and an URI that identify the component.","The URI follows the form [family]://[component][?version][&configuration], where:","family is the name of the component family.","component is the name of the component.","version is the version of the component. It is represented in a key=value format. The key is __version and the value is a number.","configuration is component configuration. It is represented in a key=value format. The key is the path of the configuration and the value is a `string' corresponding to the configuration value.","configuration parameters must be URI/URL encoded.","It has some starting components (components that don’t have a from connection and that need to be of the producer type).","There are no cyclic connections. The job pipeline needs to be an acyclic graph.","All components used in the connections are already declared.","Each connection is used only once. You cannot connect a component input/output branch twice.","In this version, the execution of the job is linear. Components are not executed in parallel even if some steps may be independents.","Depending on the configuration, you can select the environment which you execute your job in.","To select the environment, the logic is the following one:","If an org.talend.sdk.component.runtime.manager.chain.Job.ExecutorBuilder class is passed through the job properties, then use it. The supported types are a ExecutionBuilder instance, a Class or a String.","if an ExecutionBuilder SPI is present, use it. It is the case if component-runtime-beam is present in your classpath.","else, use a local/standalone execution.","In the case of a Beam execution, you can customize the pipeline options using system properties. They have to be prefixed with talend.beam.job.. For example, to set the appName option, you need to use -Dtalend.beam.job.appName=mytest.","The job builder lets you set a key provider to join your data when a component has multiple inputs. The key provider can be set contextually to a component or globally to the job.","If the incoming data has different IDs, you can provide a complex global key provider that relies on the context given by the component id and the branch name.","For Beam case, you need to rely on Beam pipeline definition and use the component-runtime-beam dependency, which provides Beam bridges.","org.talend.sdk.component.runtime.beam.TalendIO provides a way to convert a partition mapper or a processor to an input or processor using the read or write methods.","org.talend.sdk.component.runtime.beam.TalendFn provides the way to wrap a processor in a Beam PTransform and to integrate it into the pipeline.","The multiple inputs and outputs are represented by a Map element in Beam case to avoid using multiple inputs and outputs.","You can use ViewsMappingTransform or CoGroupByKeyResultMappingTransform to adapt the input/output format to the record format representing the multiple inputs/output, like Map<String, List<?>>, but materialized as a JsonObject. Input data must be of the JsonObject type in this case.","For simple inputs and outputs, you can get an automatic and transparent conversion of the Beam.io into an I/O component, if you decorated your PTransform with @PartitionMapper or @Processor.","However, there are limitations:","Inputs must implement PTransform<PBegin, PCollection<?>> and must be a BoundedSource.","Outputs must implement PTransform<PCollection<?>, PDone> and register a DoFn on the input PCollection.","For more information, see the How to wrap a Beam I/O page.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Wrapping a Beam I/O"]},{"lang":"en","title":"Creating components for a REST API","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-create-components-rest-api.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Creating components for a REST API","In this article"],"lvl1":["Setting up the HTTP client","Configuring the component","Defining the component mapper","Defining the component source"],"lvl2":["Configuring basic authentication","Configuring the dataset"],"text":["This tutorial shows how to create components that consume a REST API.","The component developed as example in this tutorial is an input component that provides a search functionality for Zendesk using its Search API. Lombok is used to avoid writing getter, setter and constructor methods.","You can generate a project using the Talend Components Kit starter, as described in this tutorial.","The input component relies on Zendesk Search API and requires an HTTP client to consume it.","The Zendesk Search API takes the following parameters on the /api/v2/search.json endpoint.","query : The search query.","sort_by : The sorting type of the query result. Possible values are updated_at, created_at, priority, status, ticket_type, or relevance. It defaults to relevance.","sort_order: The sorting order of the query result. Possible values are asc (for ascending) or desc (for descending). It defaults to desc.","Talend Component Kit provides a built-in service to create an easy-to-use HTTP client in a declarative manner, using Java annotations.","No additional implementation is needed for the interface, as it is provided by the component framework, according to what is defined above.","This HTTP client can be injected into a mapper or a processor to perform HTTP requests.","This example uses the basic authentication that supported by the API.","The first step is to set up the configuration for the basic authentication. To be able to consume the Search API, the Zendesk instance URL, the username and the password are needed.","The data store is now configured. It provides a basic authentication token.","Once the data store is configured, you can define the dataset by configuring the search query. It is that query that defines the records processed by the input component.","Your component is configured. You can now create the component logic.","Mappers defined with this tutorial don’t implement the split part because HTTP calls are not split on many workers in this case.","Once the component logic implemented, you can create the source in charge of performing the HTTP request to the search API and converting the result to JsonObject records.","You now have created a simple Talend component that consumes a REST API.","To learn how to test this component, refer to this tutorial."]},{"lang":"en","title":"Creating plugins","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/creating-plugins.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Creating plugins","In this article"],"lvl1":["Defining the ContainerManager or the classloader manager","Creating plugins","Defining a listener for the plugin registration"],"text":["The entry point of the API is the ContainerManager. It allows you to define what is the Shared classloader and to create children:","how to resolve dependencies for plugins from the plugin file/location","how to configure the classloaders (what is the parent classloader, how to handle the parent first/last delegation, and so on).","It is recommended to keep the manager running if you can reuse plugins in order to avoid recreating classloaders and to mutualize them.","What the shared classloader is","Which classes are loaded from the shared loader first (intended to be used for API which shouldn’t be loaded from the plugin loader)","Which classes are loaded from the parent classloader. This can be useful to prevent loading a \"common\" library from the parent classloader. For instance, it can be neat for guava, commons-lang3, an so on).","Once you have defined a manager, you can create plugins:","To create the plugin container, the Resolver resolves the dependencies needed for the plugin, then the manager creates the plugin classloader and registers the plugin Container.","Some actions are needed when a plugin is registered or unregistered. For that purpose, you can use ContainerListener:","Plugins are directly registered on the manager:"]},{"lang":"en","title":"Creating your first component","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-create-my-first-component.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Creating your first component","In this article"],"lvl1":["Prerequisites","Generating a simple component project","Compiling and deploying the component to Talend Open Studio","Editing the component","Building a job with the component","Related articles"],"text":["This tutorial walks you through all the required steps to get started with Talend Component Kit, from the creation of a simple component to its integration into Talend Open Studio.","The component created in this tutorial is a simple output component that receives data from the previous component and displays it in the logs, along with an extra information entered by a user.","Once the prerequisites completed, this tutorial should take you about 20 minutes.","This tutorial aims at helping you to create your very first component. But before, get your development environment ready:","Download and install a Java JDK 1.8 or greater.","Download and install Talend Open Studio. For example, from Sourceforge.","Download and install IntelliJ.","Download the Talend Component Kit plugin for IntelliJ. The detailed installation steps for the plugin are available in this document.","The first step in this tutorial is to generate a project containing a simple output component using the Starter included in the Talend Component Kit plugin for IntelliJ.","Start IntelliJ and create a new project. In the available options, you should see Talend Component.","Make sure that a Project SDK is selected. Then, select Talend Component and click Next. The Talend Component Kit Starter opens.","Enter the project details. The goal here is to define the component and project metadata. Change the default values as follows:","The Component Family and the Category will be used later in Talend Open Studio to find the new component.","The project metadata are mostly used to identify the project structure. A common practice is to replace 'company' in the default value by a value of your own, like your domain name.","Once the metadata is filled, select ADD A COMPONENT. A new screen is displayed in the Talend Component Kit Starter that lets you define the generic configuration of the component.","Select PROCESSOR/OUTPUT and enter a valid Java name for the component. For example, Logger.","Select CONFIGURATION MODEL and add a string field named level. This input field will be used in the component configuration to enter additional information to display in the logs.","In the Input(s) / Output(s) section, click the default MAIN input branch to access its detail, and toggle the Generic option to specify that the component can receive any type of data. Leave the Name of the branch with its default MAIN value.","By default, when selecting PROCESSOR/OUTPUT, there is one input branch and no output branch for the component, which is fine in the case of this tutorial. A processor without any output branch is considered an output component.","Click Next and check the name and location of your project, then click Finish to generate the project in the IDE.","At this point, your component is technically already ready to be compiled and deployed to Talend Open Studio. But first, have a look at the generated project:","Two classes based on the name and type of component defined in the Talend Component Kit Starter have been generated:","LoggerOutput is where the component logic is defined","LoggerOutputConfiguration is where the component layout and configurable fields are defined, including the level string field that was defined earlier in the configuration model of the component.","The package-info.java file contains the component metadata defined in the Talend Component Kit Starter, like the family and category.","You can notice as well that the elements in the tree structure are named after the project metadata defined in the Talend Component Kit Starter.","These files are the starting point if you later need to edit the configuration, logic, and metadata of your component.","There is more that you can do and configure with the Talend Component Kit Starter. This tutorial covers only the basics. You can find more information in this document.","Without any modification in the component code, you can compile the project and deploy the component to a local instance of Talend Open Studio.","This way, it will be easy to check that what is visible in the Studio is what is intended.","Before starting to run any command, make sure Talend Open Studio is not running.","From your component project in IntelliJ, open a terminal.","There, you can see that the terminal opens directly at the root of the project. All commands shown in this tutorial are performed from this folder.","Compile the project by running the following command: mvnw clean install. The mvnw command refers to the Maven wrapper that is shipped with Talend Component Kit. It allows to use the right version of Maven for your project without having to install it manually beforehand. An equivalent wrapper is available for Gradle.","Once the command is executed and you see BUILD SUCCESS in the terminal, deploy the component to your local instance of Talend Open Studio using the following command: mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=\"<path to Talend Open Studio home>\"","Replace the path by your own value. If the path contains spaces (for example, Program Files), enclose it with double quotes.","Make sure the build is successful.","Open Talend Open Studio and create a new Job:","The new component is present inside the new family and category that were specified in the Talend Component Kit Starter. You can add it to your job and open its settings.","Notice that the level field that was specified in the configuration model of the component in the Talend Component Kit Starter is present.","At this point, your new component is available in Talend Open Studio, and its configurable part is already set. But the component logic is still to be defined. As a reminder, the initial goal of this component is to output the information it received in input in the logs of the job. Go to the next section to learn how to define a simple logic.","You can now edit the component to implement a simple logic aiming at reading the data contained in the input branch of the component, to display it the execution logs of the job. The value of the level field of the component also needs to be displayed and changed to uppercase.","Save the job created earlier and close Talend Open Studio.","Back in IntelliJ open the LoggerOutput class. This is the class where the component logic can be defined.","Look for the @ElementListener method. It is already present and references the default input branch that was defined in the Talend Component Kit Starter, but it is not complete yet.","To be able to log the data in input to the console, add the following lines:","The @ElementListener method now looks as follows:","Open the Terminal again to compile the project and deploy the component again. To do that, run successively the two following commands:","mvnw clean install","`mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=\"<path to Talend Open Studio home>\"","The update of the component logic should now be deployed to the Studio. After restarting the Studio, you will be ready to build a job and use your component for the first time.","To learn the different possibilities and methods available to develop more complex logics, refer to this document.","If you want to avoid having to close and re-open Talend Open Studio every time you need to make an edit, you can enable the developer mode, as explained in this document.","As the component is now ready to be used, it is time to create a job and check that it behaves as intended.","Open Talend Open Studio again and go to the job created earlier. The new component is still there.","Add a tRowGenerator component and connect it to the logger.","Double-click the tRowGenerator to specify the data to generate:","Add a first column named firstName and select the *TalendDataGenerator.getFirstName() function.","Add a second column named 'lastName' and select the *TalendDataGenerator.getLastName() function.","Set the Number of Rows for RowGenerator to 10.","Validate the tRowGenerator configuration.","Open the TutorialFamilyLogger component and set the level field to info.","Go to the Run tab of the job and run the job. The job is executed. You can observe in the console that each of the 10 generated rows is logged, and that the info value entered in the logger is also displayed with each record, in uppercase.","To go further and start implementing more complex components, you can refer to the following documents:","Methodology for creating components","Generating a project using the Talend Component Kit Starter","Registering a component","General component execution logic","Configuring a component","Defining an input component logic","Defining a processor/output logic","Internationalizing a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Defining a custom API","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/services-custom-api.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining a custom API","In this article"],"lvl1":["Extending the UI","Related articles"],"text":["It is possible to extend the Component API for custom front features.","What is important here is to keep in mind that you should do it only if it targets not portable components (only used by the Studio or Beam).","It is recommended to create a custom xxxx-component-api module with the new set of annotations.","To extend the UI, add an annotation that can be put on @Option fields, and that is decorated with @Ui. All its members are then put in the metadata of the parameter. For example:","Internationalizing a service","Providing actions through a service","Built-in services","Services and interceptors"]},{"lang":"en","title":"Defining a custom icon for a component or component family","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-defining-custom-icon.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining a custom icon for a component or component family","In this article"],"text":["Every component family and component needs to have a representative icon. You can use one of the icons provided by the framework or you can use a custom icon.","For the component family the icon is defined in the package-info.java file.","For the component itself, you need to declare the icon in the component class.","To use a custom icon, you need to have the icon file placed in the resources/icons folder of the project. The icon file needs to have a name following the convention IconName_icon32.png, where you can replace IconName by the name of your choice."]},{"lang":"en","title":"Defining a processor or an output component logic","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-define-processor-output.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining a processor or an output component logic","In this article"],"lvl1":["Defining a processor","Defining an output","Defining a combiner","Related articles"],"lvl2":["What is a processor","Defining multiple outputs","Defining multiple inputs","Implementing batch processing","What is an output","What is a combiner"],"lvl3":["Related articles"],"text":["Processors and output components are the components in charge of reading, processing and transforming data in a Talend job, as well as passing it to its required destination.","Before implementing the component logic and defining its layout and configurable fields, make sure you have specified its basic metadata, as detailed in this document.","A Processor is a component that converts incoming data to a different model.","A processor must have a method decorated with @ElementListener taking an incoming data and returning the processed data:","Processors must be Serializable because they are distributed components.","If you just need to access data on a map-based ruleset, you can use JsonObject as parameter type. From there, Talend Component Kit wraps the data to allow you to access it as a map. The parameter type is not enforced. This means that if you know you will get a SuperCustomDto, then you can use it as parameter type. But for generic components that are reusable in any chain, it is highly encouraged to use JsonObject until you have an evaluation language-based processor that has its own way to access components.","For example:","A processor also supports @BeforeGroup and @AfterGroup methods, which must not have any parameter and return void values. Any other result would be ignored. These methods are used by the runtime to mark a chunk of the data in a way which is estimated good for the execution flow size.","Because the size is estimated, the size of a group can vary. It is even possible to have groups of size 1.","It is recommended to batch records, for performance reasons:","You can optimize the data batch processing by using the maxBatchSize parameter. This parameter is automatically implemented on the component when it is deployed to a Talend application. Only the logic needs to be implemented. Learn how to implement chunking/bulking in this document.","In some cases, you may need to split the output of a processor in two. A common example is to have \"main\" and \"reject\" branches where part of the incoming data are passed to a specific bucket to be processed later.","To do that, you can use @Output as replacement of the returned value:","Alternatively, you can pass a string that represents the new branch:","Having multiple inputs is similar to having multiple outputs, except that an OutputEmitter wrapper is not needed:","@Input takes the input name as parameter. If no name is set, it defaults to the \"main (default)\" input branch. It is recommended to use the default branch when possible and to avoid naming branches according to the component semantic.","Depending on several requirements, including the system capacity and business needs, a processor can process records differently.","For example, for real-time or near-real time processing, it is more interesting to process small batches of data more often. On the other hand, in case of one-time processing, it is more optimal to adapt the way the component handles batches of data according to the system capacity.","By default, the runtime automatically estimates a group size that it considers good, according to the system capacity, to process the data. This group size can sometimes be too big and not optimal for your needs or for your system to handle effectively and correctly.","Users can then customize this size from the component settings in Talend Studio, by specifying a maxBatchSize that adapts the size of each group of data to be processed.","The estimated group size logic is automatically implemented when a component is deployed to a Talend application. Besides defining the @BeforeGroup and @AfterGroup logic detailed below, no action is required on the implementation side of the component.","The component batch processes the data as follows:","Case 1 - No maxBatchSize is specified in the component configuration. The runtime estimates a group size of 4. Records are processed by groups of 4.","Case 2 - The runtime estimates a group size of 4 but a maxBatchSize of 3 is specified in the component configuration. The system adapts the group size to 3. Records are processed by groups of 3.","","Each group is processed as follows until there is no record left:","The @BeforeGroup method resets a record buffer at the beginning of each group.","The records of the group are assessed one by one and placed in the buffer as follows: The @ElementListener method tests if the buffer size is greater or equal to the defined maxBatchSize. If it is, the records are processed. If not, then the current record is buffered.","The previous step happens for all records of the group. Then the @AfterGroup method tests if the buffer is empty.","","You can define the following logic in the processor configuration:","You can learn more about processors in this document.","Defining a processor/output logic","General component execution logic","Implementing bulk processing","Best practices","An Output is a Processor that does not return any data.","Conceptually, an output is a data listener. It matches the concept of processor. Being the last component of the execution chain or returning no data makes your processor an output component:","Currently, Talend Component Kit does not allow you to define a Combiner. A combiner is the symmetric part of a partition mapper and allows to aggregate results in a single partition.","Methodology for creating components","Generating a project using the starter","Registering a component","General component execution logic","Defining component layout and configuration","Implementing bulk processing","Internationalizing a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Defining an input component logic","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-define-input.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining an input component logic","In this article"],"lvl1":["Defining a partition mapper","Defining the producer method","Related articles"],"lvl2":["What is a partition mapper","Implementing a partition mapper"],"lvl3":["@Assessor","@Split","@Emitter"],"text":["Input components are the components generally placed at the beginning of a Talend job. They are in charge of retrieving the data that will later be processed in the job.","An input component is primarily made of three distinct logics: - The execution logic of the component itself, defined through a partition mapper. - The configurable part of the component, defined through the mapper configuration. - The source logic defined through a producer.","Before implementing the component logic and defining its layout and configurable fields, make sure you have specified its basic metadata, as detailed in this document.","A PartitionMapper is a component able to split itself to make the execution more efficient.","This concept is borrowed from big data and useful in this context only (BEAM executions). The idea is to divide the work before executing it in order to reduce the overall execution time.","The process is the following:","The size of the data you work on is estimated. This part can be heuristic and not very precise.","From that size, the execution engine (runner for Beam) requests the mapper to split itself in N mappers with a subset of the overall work.","The leaf (final) mapper is used as a Producer (actual reader) factory.","This kind of component must be Serializable to be distributable.","A partition mapper requires three methods marked with specific annotations:","@Assessor for the evaluating method","@Split for the dividing method","@Emitter for the Producer factory","The Assessor method returns the estimated size of the data related to the component (depending its configuration). It must return a Number and must not take any parameter.","For example:","The Split method returns a collection of partition mappers and can take optionally a @PartitionSize long value as parameter, which is the requested size of the dataset per sub partition mapper.","For example:","The Emitter method must not have any parameter and must return a producer. It uses the partition mapper configuration to instantiate and configure the producer.","For example:","The Producer method defines the source logic of an input component. It handles the interaction with a physical source and produces input data for the processing flow.","A producer must have a @Producer method without any parameter. It is triggered by the @Emitter of the partition mapper and can return any data. It is defined in the <component_name>Source.java file:","Methodology for creating components","Generating a project using the starter","Registering a component","General component execution logic","Defining component layout and configuration","Internationalizing a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Defining component layout and configuration","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-configuration.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining component layout and configuration","In this article"],"lvl1":["Parameter name","Parameter types","Mapping complex objects","Defining Constraints and validations on the configuration","Marking a configuration as dataset or datastore","Defining links between properties","Adding hints about the rendering","Related articles"],"lvl2":["Primitives","List case","Map case","MaxLength","MinLength","Pattern","Max","Min","Required","MaxItems","MinItems","UniqueItems","Dataset","Datastore","ActiveIf","ActiveIfs","@DefaultValue","@OptionsOrder","@AutoLayout","@GridLayout","@GridLayouts","@HorizontalLayout","@VerticalLayout","@Code","@Credential","@Structure","@TextArea"],"text":["The component configuration is defined in the <component_name>Configuration.java file of the package. It consists in defining the configurable part of the component that will be displayed in the UI.","To do that, you can specify parameters. When you import the project in your IDE, the parameters that you have specified in the starter are already present.","Components are configured using their constructor parameters. All parameters can be marked with the @Option property, which lets you give a name to them.","For the name to be correct, you must follow these guidelines:","Use a valid Java name.","Do not include any . character in it.","Do not start the name with a $.","Defining a name is optional. If you don’t set a specific name, it defaults to the bytecode name. This can require you to compile with a -parameter flag to avoid ending up with names such as arg0, arg1, and so on.","Option name","Valid","myName","","my_name","","my.name","","$myName","","Parameter types can be primitives or complex objects with fields decorated with @Option exactly like method parameters.","It is recommended to use simple models which can be serialized in order to ease serialized component implementations.","For example:","Using this kind of API makes the configuration extensible and component-oriented, which allows you to define all you need.","The instantiation of the parameters is done from the properties passed to the component.","A primitive is a class which can be directly converted from a String to the expected type.","It includes all Java primitives, like the String type itself, but also all types with a org.apache.xbean.propertyeditor.Converter:","BigDecimal","BigInteger","File","InetAddress","ObjectName","URI","URL","Pattern","The conversion from property to object uses the Dot notation.","For example, assuming the method parameter was configured with @Option(\"file\"):","matches","Lists rely on an indexed syntax to define their elements.","For example, assuming that the list parameter is named files and that the elements are of the FileOptions type, you can define a list of two elements as follows:","Similarly to the list case, the map uses .key[index] and .value[index] to represent its keys and values:","Avoid using the Map type. Instead, prefer configuring your component with an object if this is possible.","You can use metadata to specify that a field is required or has a minimum size, and so on. This is done using the validation metadata in the org.talend.sdk.component.api.configuration.constraint package:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: maxLength","Parameter Type: double","Supported Types: — java.lang.CharSequence","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: minLength","Parameter Type: double","Supported Types: — java.lang.CharSequence","Sample:","Validate the decorated string with a javascript pattern (even into the Studio).","API: @org.talend.sdk.component.api.configuration.constraint.Pattern","Name: pattern","Parameter Type: java.lang.string","Supported Types: — java.lang.CharSequence","Sample:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: max","Parameter Type: double","Supported Types: — java.lang.Number — int — short — byte — long — double — float","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: min","Parameter Type: double","Supported Types: — java.lang.Number — int — short — byte — long — double — float","Sample:","Mark the field as being mandatory.","API: @org.talend.sdk.component.api.configuration.constraint.Required","Name: required","Parameter Type: -","Supported Types: — java.lang.Object","Sample:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: maxItems","Parameter Type: double","Supported Types: — java.util.Collection","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: minItems","Parameter Type: double","Supported Types: — java.util.Collection","Sample:","Ensure the elements of the collection must be distinct (kind of set).","API: @org.talend.sdk.component.api.configuration.constraint.Uniques","Name: uniqueItems","Parameter Type: -","Supported Types: — java.util.Collection","Sample:","When using the programmatic API, metadata is prefixed by tcomp::. This prefix is stripped in the web for convenience, and the table above uses the web keys.","Also note that these validations are executed before the runtime is started (when loading the component instance) and that the execution will fail if they don’t pass. If it breaks your application, you can disable that validation on the JVM by setting the system property talend.component.configuration.validation.skip to true.","It is common to classify the incoming data. It is similar to tagging data with several types. Data can commonly be categorized as follows:","Datastore: The data you need to connect to the backend.","Dataset: A datastore coupled with the data you need to execute an action.","Mark a model (complex object) as being a dataset.","API: @org.talend.sdk.component.api.configuration.type.DataSet","Sample:","Mark a model (complex object) as being a datastore (connection to a backend).","API: @org.talend.sdk.component.api.configuration.type.DataStore","Sample:","The component family associated with a configuration type (datastore/dataset) is always the one related to the component using that configuration.","Those configuration types can be composed to provide one configuration item. For example, a dataset type often needs a datastore type to be provided. A datastore type (that provides the connection information) is used to create a dataset type.","Those configuration types are also used at design time to create shared configurations that can be stored and used at runtime.","For example, in the case of a relational database that supports JDBC:","A datastore can be made of:","a JDBC URL","a username","a password.","A dataset can be made of:","a datastore (that provides the data required to connect to the database)","a table name","data.","The component server scans all configuration types and returns a configuration type index. This index can be used for the integration into the targeted platforms (Studio, web applications, and so on).","The configuration type index is represented as a flat tree that contains all the configuration types, which themselves are represented as nodes and indexed by ID.","Every node can point to other nodes. This relation is represented as an array of edges that provides the child IDs.","As an illustration, a configuration type index for the example above can be defined as follows:","The model allows you to define meta information without restrictions. However, it is highly recommended to ensure that: a datastore is used in each dataset. each dataset has a corresponding source (mapper or emitter) which has a configuration that is usable if the software only fills the dataset part. All other properties must not be required.","The model allows you to define meta information without restrictions. However, it is highly recommended to ensure that:","a datastore is used in each dataset.","each dataset has a corresponding source (mapper or emitter) which has a configuration that is usable if the software only fills the dataset part. All other properties must not be required.","If you need to define a binding between properties, you can use a set of annotations:","If the evaluation of the element at the location matches value then the element is considered active, otherwise it is deactivated.","API: @org.talend.sdk.component.api.configuration.condition.ActiveIf","Type: if","Sample:","Allows to set multiple visibility conditions on the same property.","API: @org.talend.sdk.component.api.configuration.condition.ActiveIfs","Type: ifs","Sample:","The target element location is specified as a relative path to the current location, using Unix path characters. The configuration class delimiter is /. The parent configuration class is specified by ... Thus, ../targetProperty denotes a property, which is located in the parent configuration class and is named targetProperty.","When using the programmatic API, metadata is prefixed with tcomp::. This prefix is stripped in the web for convenience, and the previous table uses the web keys.","In some cases, you may need to add metadata about the configuration to let the UI render that configuration properly. For example, a password value that must be hidden and not a simple clear input box. For these cases - if you want to change the UI rendering - you can use a particular set of annotations:","Provide a default value the UI can use - only for primitive fields.","API: @org.talend.sdk.component.api.configuration.ui.DefaultValue","Sample:","Allows to sort a class properties.","API: @org.talend.sdk.component.api.configuration.ui.OptionsOrder","Sample:","Request the rendered to do what it thinks is best.","API: @org.talend.sdk.component.api.configuration.ui.layout.AutoLayout","Sample:","Advanced layout to place properties by row, this is exclusive with @OptionsOrder.","API: @org.talend.sdk.component.api.configuration.ui.layout.GridLayout","Sample:","Allow to configure multiple grid layouts on the same class, qualified with a classifier (name)","API: @org.talend.sdk.component.api.configuration.ui.layout.GridLayouts","Sample:","Put on a configuration class it notifies the UI an horizontal layout is preferred.","API: @org.talend.sdk.component.api.configuration.ui.layout.HorizontalLayout","Sample:","Put on a configuration class it notifies the UI a vertical layout is preferred.","API: @org.talend.sdk.component.api.configuration.ui.layout.VerticalLayout","Sample:","Mark a field as being represented by some code widget (vs textarea for instance).","API: @org.talend.sdk.component.api.configuration.ui.widget.Code","Sample:","Mark a field as being a credential. It is typically used to hide the value in the UI.","API: @org.talend.sdk.component.api.configuration.ui.widget.Credential","Sample:","Mark a List<String> or Map<String, String> field as being represented as the component data selector (field names generally or field names as key and type as value).","API: @org.talend.sdk.component.api.configuration.ui.widget.Structure","Sample:","Mark a field as being represented by a textarea(multiline text input).","API: @org.talend.sdk.component.api.configuration.ui.widget.TextArea","Sample:","When using the programmatic API, metadata is prefixed with tcomp::. This prefix is stripped in the web for convenience, and the previous table uses the web keys.","You can also check this example about masking credentials.","Target support should cover org.talend.core.model.process.EParameterFieldType but you need to ensure that the web renderer is able to handle the same widgets.","Methodology for creating components","Generating a project using the starter","Defining an input component","Defining a processor or output component","Registering a component","Internationalizing a component","Loading a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Defining services","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-defining-services.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Defining services","In this article"],"lvl1":["Built-in services","Internationalizing services","Providing actions for consumers","Services and interceptors","Defining a custom API"],"lvl2":["Lisf of built-in services","Using HttpClient","Related articles","Internationalization API","Related articles","Particular action types","Internationalization","Related articles","Related articles","Extending the UI","Related articles"],"lvl3":["LocalConfiguration","Customizing HTTP client requests","Big data streams","Dynamic Values","Healthcheck","Schema","Suggestions","Update","User","Validation"],"text":["Services are configurations that can be reused across several classes. Talend Component Kit comes with a predefined set of services that you can easily use.","You can still define your own services under the service node of your component project. By default, the Component Kit Starter generates a dedicated class in your project in which you can implement services.","Built-in services","Internationalizing a service","Providing actions through a service","Services and interceptors","Defining a custom API","The framework provides built-in services that you can inject by type in components and actions.","Type","Description","org.talend.sdk.component.api.service.cache.LocalCache","Provides a small abstraction to cache data that does not need to be recomputed very often. Commonly used by actions for UI interactions.","org.talend.sdk.component.api.service.dependency.Resolver","Allows to resolve a dependency from its Maven coordinates.","javax.json.bind.Jsonb","A JSON-B instance. If your model is static and you don’t want to handle the serialization manually using JSON-P, you can inject that instance.","javax.json.spi.JsonProvider","A JSON-P instance. Prefer other JSON-P instances if you don’t exactly know why you use this one.","javax.json.JsonBuilderFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.JsonWriterFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.JsonReaderFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.stream.JsonParserFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","javax.json.stream.JsonGeneratorFactory","A JSON-P instance. It is recommended to use this one instead of a custom one to optimize memory usage and speed.","org.talend.sdk.component.api.service.configuration.LocalConfiguration","Represents the local configuration that can be used during the design.","org.talend.sdk.component.api.service.dependency.Resolver","Allows to resolve files from Maven coordinates (like dependencies.txt for component). Note that it assumes that the files are available in the component Maven repository.","org.talend.sdk.component.api.service.injector.Injector","Utility to inject services in fields marked with @Service.","org.talend.sdk.component.api.service.factory.ObjectFactory","Allows to instantiate an object from its class name and properties.","It is not recommended to use it for the runtime because the local configuration is usually different and the instances are distinct.","You can also use the local cache as an interceptor with @Cached","Every interface that extends HttpClient and that contains methods annotated with @Request","Lets you define an HTTP client in a declarative manner using an annotated interface.","See the Using HttpClient for more details.","All these injected services are serializable, which is important for big data environments. If you create the instances yourself, you cannot benefit from these features, nor from the memory optimization done by the runtime. Prefer reusing the framework instances over custom ones.","The local configuration uses system properties and the environment (replacing dots per underscores) to look up the values. You can also put a TALEND-INF/local-configuration.properties file with default values. This allows to use the local_configuration:<key> syntax in @Ui annotation. Here is an example to read the default value of a property from the configuration:","Ensure your key is unique across all components to avoid global overrides on the JVM. In practice, it is strongly recommended to always use the family as a prefix. Also note that you can use @Configuration(\"prefix\") to inject a mapping of the LocalConfiguration in a component. It uses the same rules as for any configuration object.","The HttpClient usage is described in this section by using the REST API example below. It is assume that it requires a basic authentication header.","GET /api/records/{id}","-","POST /api/records","JSON payload to be created: {\"id\":\"some id\", \"data\":\"some data\"}","To create an HTTP client that is able to consume the REST API above, you need to define an interface that extends HttpClient.","The HttpClient interface lets you set the base for the HTTP address that the client will hit.","The base is the part of the address that needs to be added to the request path to hit the API.","Every method annotated with @Request in the interface defines an HTTP request. Every request can have a @Codec parameter that allows to encode or decode the request/response payloads.","You can ignore the encoding/decoding for String and Void payloads.","The interface should extend HttpClient.","In the codec classes (that implement Encoder/Decoder), you can inject any of your service annotated with @Service or @Internationalized into the constructor. Internationalization services can be useful to have internationalized messages for errors handling.","The interface can be injected into component classes or services to consume the defined API.","By default, /+json are mapped to JSON-P and /+xml to JAX-B if the model has a @XmlRootElement annotation.","For advanced cases, you can customize the Connection by directly using @UseConfigurer on the method. It calls your custom instance of Configurer. Note that you can use @ConfigurerOption in the method signature to pass some Configurer configurations.","For example, if you have the following Configurer:","You can then set it on a method to automatically add the basic header with this kind of API usage:","The framework provides in the component-api an OAuth1.Configurer which can be used as an example of configurer implementation. It expects a single OAuth1.Configuration parameter to be passed to the request as a @ConfigurationOption.","Here is a sample showing how it can be used:","By default, the client loads in memory the payload. In case of big payloads, it can consume too much memory. For these cases, you can get the payload as an InputStream:","You can use the Response wrapper, or not.","Internationalizing a service","Providing actions through a service","Services and interceptors","Defining a custom API","Internationalization requires following several best practices:","Storing messages using ResourceBundle properties file in your component module.","The location of the properties is in the same package than the related components and is named Messages. For example, org.talend.demo.MyComponent uses org.talend.demo.Messages[locale].properties.","Use the internationalization API for your own messages.","The Internationalization API is the mechanism to use to internationalize your own messages in your own components.","The principle of the API is to design messages as methods returning String values and get back a template using a ResourceBundle named Messages and located in the same package than the interface that defines these methods.","To ensure your internationalization API is identified, you need to mark it with the @Internationalized annotation:","Providing actions through a service","Built-in services","Services and interceptors","Defining a custom API","In some cases you can need to add some actions that are not related to the runtime. For example, enabling users of the plugin/library to test if a connection works properly.","To do so, you need to define an @Action, which is a method with a name (representing the event name), in a class decorated with @Service:","Services are singleton. If you need some thread safety, make sure that they match that requirement. Services should not store any status either because they can be serialized at any time. Status are held by the component.","Services can be used in components as well (matched by type). They allow to reuse some shared logic, like a client. Here is a sample with a service used to access files:","The service is automatically passed to the constructor. It can be used as a bean. In that case, it is only necessary to call the service method.","Some common actions need a clear contract so they are defined as API first-class citizen. For example, this is the case for wizards or health checks. Here is the list of the available actions:","Mark a method as being useful to fill potential values of a string option for a property denoted by its value. You can link a field as being completable using @Proposable(value). The resolution of the completion action is then done through the component family and value of the action. The callback doesn’t take any parameter.","Type: dynamic_values","API: @org.talend.sdk.component.api.service.completion.DynamicValues","Returned type: org.talend.sdk.component.api.service.completion.Values","Sample:","This class marks an action doing a connection test","Type: healthcheck","API: @org.talend.sdk.component.api.service.healthcheck.HealthCheck","Returned type: org.talend.sdk.component.api.service.healthcheck.HealthCheckStatus","Sample:","Mark an action as returning a discovered schema. Its parameter MUST be the type decorated with @Structure.","Type: schema","API: @org.talend.sdk.component.api.service.schema.DiscoverSchema","Returned type: org.talend.sdk.component.api.service.schema.Schema","Sample:","Mark a method as being useful to fill potential values of a string option. You can link a field as being completable using @Suggestable(value). The resolution of the completion action is then done when the user requests it (generally by clicking on a button or entering the field depending the environment).","Type: suggestions","API: @org.talend.sdk.component.api.service.completion.Suggestions","Returned type: org.talend.sdk.component.api.service.completion.SuggestionValues","Sample:","This class marks an action returning a new instance replacing part of a form/configuration.","Type: update","API: @org.talend.sdk.component.api.service.update.Update","Extension point for custom UI integrations and custom actions.","Type: user","API: @org.talend.sdk.component.api.service.Action","Mark a method as being used to validate a configuration.","this is a server validation so only use it if you can’t use other client side validation to implement it.","Type: validation","API: @org.talend.sdk.component.api.service.asyncvalidation.AsyncValidation","Returned type: org.talend.sdk.component.api.service.asyncvalidation.ValidationResult","Sample:","Internationalization is supported through the injection of the $lang parameter, which allows you to get the correct locale to use with an @Internationalized service:","You can combine the $lang option with the @Internationalized and @Language parameters.","Internationalizing a service","Built-in services","Services and interceptors","Defining a custom API","For common concerns such as caching, auditing, and so on, you can use an interceptor-like API. It is enabled on services by the framework.","An interceptor defines an annotation marked with @Intercepts, which defines the implementation of the interceptor (InterceptorHandler).","For example:","The handler is created from its constructor and can take service injections (by type). The first parameter, however, can be BiFunction<Method, Object[], Object>, which represents the invocation chain if your interceptor can be used with others.","If you make a generic interceptor, pass the invoker as first parameter. Otherwise you cannot combine interceptors at all.","Here is an example of interceptor implementation for the @Logged API:","This implementation is compatible with interceptor chains because it takes the invoker as first constructor parameter and it also takes a service injection. Then, the implementation simply does what is needed, which is logging the invoked method in this case.","The findAnnotation annotation, inherited from InterceptorHandler, is an utility method to find an annotation on a method or class (in this order).","Internationalizing a service","Providing actions through a service","Built-in services","Defining a custom API","It is possible to extend the Component API for custom front features.","What is important here is to keep in mind that you should do it only if it targets not portable components (only used by the Studio or Beam).","It is recommended to create a custom xxxx-component-api module with the new set of annotations.","To extend the UI, add an annotation that can be put on @Option fields, and that is decorated with @Ui. All its members are then put in the metadata of the parameter. For example:","Internationalizing a service","Providing actions through a service","Built-in services","Services and interceptors"]},{"lang":"en","title":"Framework package and JAR scanning","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-scanning-exclusions.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Framework package and JAR scanning","In this article"],"lvl1":["Jars Scanning","Package Scanning"],"text":["The framework uses two kind of filterings when scanning your component. One based on the JAR name and one based on the package name. Make sure that your component definitions (including services) are in a scanned module if they are not registered manually using ComponentManager.instance().addPlugin(), and that the component package is not excluded.","To find components the framework can scan the classpath but in this case, to avoid to scan the whole classpath which can be really huge an impacts a lot the startup time, several jars are excluded out of the box.","These jars use the following prefix:","ApacheJMeter","FastInfoset","HdrHistogram","HikariCP","PDFBox","RoaringBitmap-","XmlSchema-","accessors-smart","activation-","activeio-","activemq-","aeron","aether-","agrona","akka-","animal-sniffer-annotation","annotation","ant-","antlr-","antlr4-","aopalliance-","apache-el","apache-mime4j","apacheds-","api-asn1-","api-common-","api-util-","apiguardian-api-","app-","archaius-core","args4j-","arquillian-","asciidoctorj-","asm-","aspectj","async-http-client-","auto-value-","autoschema-","avalon-framework-","avro-","avro4s-","awaitility-","aws-","axis-","axis2-","base64-","batchee-jbatch","batik-","bcmail","bcpkix","bcprov-","beam-model-","beam-runners-","beam-sdks-","bigtable-client-","bigtable-protos-","boilerpipe-","bonecp","bootstrap.jar","brave-","bsf-","build-link","bval","byte-buddy","c3p0-","cache","carrier","cassandra-driver-core","catalina-","catalina.jar","cats","cdi-","cglib-","charsets.jar","chill","classindex","classmate","classutil","classycle","cldrdata","commands-","common-","commons-","component-api","component-form","component-runtime","component-server","component-spi","component-studio","components-adapter-beam","components-api","components-common","compress-lzf","config","constructr","container-core","contenttype","coverage-agent","cryptacular-","cssparser-","curator-","curvesapi-","cxf-","daikon","databinding","dataquality","dataset-","datastore-","debugger-agent","deltaspike-","deploy.jar","derby-","derbyclient-","derbynet-","dnsns","dom4j","draw2d","easymock-","ecj-","eclipselink-","ehcache-","el-api","enumeratum","enunciate-core-annotations","error_prone_annotations","expressions","fastutil","feign-core","feign-hystrix","feign-slf4j","filters-helpers","findbugs-","fluent-hc","fluentlenium-core","fontbox","freemarker-","fusemq-leveldb-","gax-","gcsio-","gef-","geocoder","geronimo-","gmbal","google-","gpars-","gragent.jar","graph","grizzled-scala","grizzly-","groovy-","grpc-","gson-","guava-","guice-","h2-","hadoop-","hamcrest-","hawtbuf-","hawtdispatch-","hawtio-","hawtjni-runtime","help-","hibernate-","hk2-","howl-","hsqldb-","htmlunit-","htrace-","httpclient-","httpcore-","httpmime","hystrix","iban4j-","icu4j-","idb-","idea_rt.jar","instrumentation-api","ion-java","isoparser-","istack-commons-runtime-","ivy-","j2objc-annotations","jBCrypt","jaccess","jackcess-","jackson-","janino-","jansi-","jasper-el.jar","jasper.jar","jasypt-","java-atk-wrapper","java-libpst-","java-support-","java-xmlbuilder-","javacsv","javaee-","javaee-api","javassist-","javaws.jar","javax.","jaxb-","jaxp-","jbake-","jboss-","jbossall-","jbosscx-","jbossjts-","jbosssx-","jcache","jce.jar","jcip-annotations","jcl-over-slf4j-","jcommander-","jdbcdslog-1","jempbox","jersey-","jets3t","jettison-","jetty-","jface","jfairy","jffi","jfr.jar","jfxrt.jar","jfxswt","jhighlight","jjwt","jline","jmatio-","jmdns-","jmespath-","jms","jmustache","jna-","jnr-","jobs-","joda-convert","joda-time-","johnzon-","jolokia-","jopt-simple","jruby-","json-","json4s-","jsonb-api","jsoup-","jsp-api","jsr","jsse.jar","jta","jul-to-slf4j-","juli-","junit-","junit5-","juniversalchardet","junrar-","jwt","jython","kafka","kahadb-","kotlin-runtime","kryo","leveldb","libphonenumber","lift-json","lmdbjava","localedata","log4j-","logback","logging-event-layout","logkit-","lombok","lucene","lz4","machinist","macro-compat","mail-","management-","mapstruct-","maven-","mbean-annotation-api-","meecrowave-","mesos-","metadata-extractor-","metrics-","microprofile-config-api-","mimepull-","mina-","minlog","mockito-core","mqtt-client-","multitenant-core","multiverse-core-","mx4j-","myfaces-","mysql-connector-java-","nashorn","neethi-","neko-htmlunit","nekohtml-","netflix","netty-","nimbus-jose-jwt","objenesis-","okhttp","okio","opencensus-","openjpa-","openmdx-","opennlp-","opensaml-","opentest4j-","openwebbeans-","openws-","ops4j-","org.apache.aries","org.apache.commons","org.apache.log4j","org.eclipse.","org.junit.","org.osgi.core-","org.osgi.enterprise","org.talend","orient-commons-","orientdb-core-","orientdb-nativeos-","oro-","osgi","paranamer","parquet","pax-url","pdfbox","play","plexus-","plugin.jar","poi-","postgresql","preferences-","prefixmapper","proto-","protobuf-","py4j-","pyrolite-","qdox-","quartz-2","quartz-openejb-","reactive-streams","reflectasm-","reflections","regexp-","registry-","resources.jar","rhino","ribbon","rmock-","rome","routes-compiler","routines","rt.jar","runners","runtime-","rxjava","rxnetty","saaj-","sac-","scala","scalap","scalatest","scannotation-","selenium","serializer-","serp-","service-common","servlet-api-","servo-","shaded","shapeless","shrinkwrap-","sisu-guice","sisu-inject","slf4j-","slick","smack-","smackx-","snakeyaml-","snappy-","spark-","specs2","spring-","sshd-","ssl-config-core","stax-api-","stax2-api-","stream","sunec.jar","sunjce_provider","sunpkcs11","surefire-","swagger-","swizzle-","sxc-","system-rules","tachyon-","tagsoup-","talend-icon","test-agent","test-interface","testng-","threetenbp","tika-","tomcat","tomee-","tools.jar","twirl","twitter4j-","tyrex","uncommons","unused","util","validation-api-","velocity-","wagon-","wandou","webbeans-","websocket","woodstox-core","workbench","ws-commons-util-","wsdl4j-","wss4j-","wstx-asl-","xalan-","xbean-","xercesImpl-","xlsx-streamer-","xml-apis-","xml-resolver-","xmlbeans-","xmlenc-","xmlgraphics-","xmlpcore","xmlpull-","xmlrpc-","xmlschema-","xmlsec-","xmltooling-","xmlunit-","xstream-","xz-","zipfs.jar","zipkin-","ziplock-","zkclient","zookeeper-","Since the framework can be used in the case of fatjars or shades, and because it still uses scanning, it is important to ensure we don’t scan the whole classes for performances reason.","Therefore, the following packages are ignored:","avro.shaded","com.codehale.metrics","com.ctc.wstx","com.datastax.driver.core","com.fasterxml.jackson.annotation","com.fasterxml.jackson.core","com.fasterxml.jackson.databind","com.fasterxml.jackson.dataformat","com.fasterxml.jackson.module","com.google.common","com.google.thirdparty","com.ibm.wsdl","com.jcraft.jsch","com.kenai.jffi","com.kenai.jnr","com.sun.istack","com.sun.xml.bind","com.sun.xml.messaging.saaj","com.sun.xml.txw2","com.thoughtworks","io.jsonwebtoken","io.netty","io.swagger.annotations","io.swagger.config","io.swagger.converter","io.swagger.core","io.swagger.jackson","io.swagger.jaxrs","io.swagger.model","io.swagger.models","io.swagger.util","javax","jnr","junit","net.sf.ehcache","net.shibboleth.utilities.java.support","org.aeonbits.owner","org.apache.activemq","org.apache.beam","org.apache.bval","org.apache.camel","org.apache.catalina","org.apache.commons.beanutils","org.apache.commons.cli","org.apache.commons.codec","org.apache.commons.collections","org.apache.commons.compress","org.apache.commons.dbcp2","org.apache.commons.digester","org.apache.commons.io","org.apache.commons.jcs.access","org.apache.commons.jcs.admin","org.apache.commons.jcs.auxiliary","org.apache.commons.jcs.engine","org.apache.commons.jcs.io","org.apache.commons.jcs.utils","org.apache.commons.lang","org.apache.commons.lang3","org.apache.commons.logging","org.apache.commons.pool2","org.apache.coyote","org.apache.cxf","org.apache.geronimo.javamail","org.apache.geronimo.mail","org.apache.geronimo.osgi","org.apache.geronimo.specs","org.apache.http","org.apache.jcp","org.apache.johnzon","org.apache.juli","org.apache.logging.log4j.core","org.apache.logging.log4j.jul","org.apache.logging.log4j.util","org.apache.logging.slf4j","org.apache.meecrowave","org.apache.myfaces","org.apache.naming","org.apache.neethi","org.apache.openejb","org.apache.openjpa","org.apache.oro","org.apache.tomcat","org.apache.tomee","org.apache.velocity","org.apache.webbeans","org.apache.ws","org.apache.wss4j","org.apache.xbean","org.apache.xml","org.apache.xml.resolver","org.bouncycastle","org.codehaus.jackson","org.codehaus.stax2","org.codehaus.swizzle.Grep","org.codehaus.swizzle.Lexer","org.cryptacular","org.eclipse.jdt.core","org.eclipse.jdt.internal","org.fusesource.hawtbuf","org.h2","org.hamcrest","org.hsqldb","org.jasypt","org.jboss.marshalling","org.joda.time","org.jose4j","org.junit","org.jvnet.mimepull","org.metatype.sxc","org.objectweb.asm","org.objectweb.howl","org.openejb","org.opensaml","org.slf4j","org.swizzle","org.terracotta.context","org.terracotta.entity","org.terracotta.modules.ehcache","org.terracotta.statistics","org.tukaani","org.yaml.snakeyaml","serp","it is not recommanded but possible to add in your plugin module a TALEND-INF/scanning.properties file with classloader.includes and classloader.excludes entries to refine the scanning with custom rules. In such a case, exclusions win over inclusions."]},{"lang":"en","title":"General component execution logic","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-execution.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["General component execution logic","In this article"],"text":["Each type of component has its own execution logic. The same basic logic is applied to all components of the same type, and is then extended to implement each component specificities. The project generated from the starter already contains the basic logic for each component.","Talend Component Kit framework relies on several primitive components.","All components can use @PostConstruct and @PreDestroy annotations to initialize or release some underlying resource at the beginning and the end of a processing.","In distributed environments, class constructor are called on cluster manager nodes. Methods annotated with @PostConstruct and @PreDestroy are called on worker nodes. Thus, partition plan computation and pipeline tasks are performed on different nodes.","","The created task is a JAR file containing class information, which describes the pipeline (flow) that should be processed in cluster.","During the partition plan computation step, the pipeline is analyzed and split into stages. The cluster manager node instantiates mappers/processors, gets estimated data size using mappers, and splits created mappers according to the estimated data size. All instances are then serialized and sent to the worker node.","Serialized instances are received and deserialized. Methods annotated with @PostConstruct are called. After that, pipeline execution starts. The @BeforeGroup annotated method of the processor is called before processing the first element in chunk. After processing the number of records estimated as chunk size, the @AfterGroup annotated method of the processor is called. Chunk size is calculated depending on the environment the pipeline is processed by. Once the pipeline is processed, methods annotated with @PreDestroy are called.","All the methods managed by the framework must be public. Private methods are ignored.","","","The framework is designed to be as declarative as possible but also to stay extensible by not using fixed interfaces or method signatures. This allows to incrementally add new features of the underlying implementations."]},{"lang":"en","title":"Generating a project","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-generating-project.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Generating a project","In this article"],"lvl1":["Generating a project using the Component Kit starter","Generating a project using IntelliJ plugin"],"lvl2":["Configuring the project","Creating an Input component","Creating a Processor component","Creating an Output component","Generating and downloading the final project","Compiling and exploring the generated project files","Related articles","Related articles"],"text":["The first step when developing new components is to create a project that will contain the skeleton of your components and set you on the right track.","The project generation can be achieved using the Talend Component Kit Starter or the Talend Component Kit plugin for IntelliJ.","Through a user-friendly interface, you can define the main lines of your project and of your component(s), including their name, family, type, configuration model, and so on.","Once completed, all the information filled are used to generate a project that you will use as starting point to implement the logic and layout of your components, and to iterate on them.","Using the starter","Using the IntelliJ plugin","Once your project is generated, you can start implementing the component logic.","The Component Kit starter lets you design your components configuration and generates a ready-to-implement project structure.","This tutorial shows you how to use the Component Kit starter to generate new components for MySQL databases. Before starting, make sure that you have correctly setup your environment. See this section.","Before being able to create components, you need to define the general settings of the project:","Create a folder on your local machine to store the resource files of the component you want to create. For example, C:/my_components.","Open the starter in the web browser of your choice.","Select your build tool. This tutorial uses Maven, but you can select Gradle instead.","Add the Talend Component Kit Testing facet to your project to automatically generate unit tests for the components created later in this tutorial. Add any facet you need.","Enter the Component Family of the components you want to develop in the project. This name must be a valid java name and is recommended to be capitalized, for example 'MySQL'. Once you have implemented your components in the Studio, this name is displayed in the Palette to group all of the MySQL-related components you develop, and is also part of your component name.","Select the Category of the components you want to create in the current project. As MySQL is a kind of database, select Databases in this tutorial. This Databases category is used and displayed as the parent family of the MySQL group in the Palette of the Studio.","Complete the project metadata by entering the Group, Artifact and Package.","Click the ADD A COMPONENT button to start designing your components.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create an input component that connects to a MySQL database, executes a SQL query and gets the result.","Choose the component type. INPUT in this case.","Enter the component name. For example, MySQLInput.","Click CONFIGURATION MODEL. This button lets you specify the required configuration for the component.","For each parameter that you need to add, click the (+) button on the right panel. Enter the name and choose the type of the parameter, then click the tick button to save the changes. In this tutorial, to be able to execute a SQL query on the Input MySQL database, the configuration requires the following parameters:+","a connection URL (string)","a username (string)","a password (string)","the SQL query to be executed (string).","Closing the configuration panel on the right does not delete your configuration.","Specify whether the component issues a stream or not. In this tutorial, the MySQL input component created is an ordinary (non streaming) component. In this case, let the toggle button disabled.","Select the Record Type generated by the component. In this tutorial, select Generic because the component is designed to generate JSON records. You can also select Custom to define a POJO that represents your records.","Your input component is now defined. You can add another component or generate and download your project.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create a simple processor component that receives a record, logs it and returns it at it is.","Choose the component type. PROCESSOR/OUTPUT in this case.","Enter the component name. For example, RecordLogger, as the processor created in this tutorial logs the records.","Specify the CONFIGURATION MODEL of the component. In this tutorial, the component doesn’t need any specific configuration. Skip this step.","Define the Input(s) of the component. For each input that you need to define, click ADD INPUT. In this tutorial, only one input is needed to receive the record to log.","Click the input name to access its configuration. You can change the name of the input and define its structure using a POJO. If you added several inputs, repeat this step for each one of them. The input in this tutorial is a generic record. Enable the Generic option.","Define the Output(s) of the component. For each output that you need to define, click ADD OUTPUT. In this tutorial, only one generic output is needed to return the received record. Outputs can be configured the same way as inputs (see previous steps).","Make sure to check the configuration of inputs and outputs as they are not set to Generic by default.","Your processor component is now defined. You can add another component or generate and download your project.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create an output component that receives a record and inserts it into a MySQL database table.","Output components are Processors without any output. In other words, the output is a processor that does not produce any records.","Choose the component type. PROCESSOR/OUTPUT in this case.","Enter the component name. For example, MySQLOutput.","Click CONFIGURATION MODEL. This button lets you specify the required configuration for the component.","For each parameter that you need to add, click the (+) button on the right panel. Enter the name and choose the type of the parameter, then click the tick button to save the changes. In this tutorial, to be able to insert a record in the output MySQL database, the configuration requires the following parameters:+","a connection URL (string)","a username (string)","a password (string)","the name of the table to insert the record in (string).","Closing the configuration panel on the right does not delete your configuration.","Define the Input(s) of the component. For each input that you need to define, click ADD INPUT. In this tutorial, only one input is needed.","Click the input name to access its configuration. You can change the name of the input and define its structure using a POJO. If you added several inputs, repeat this step for each one of them. The input in this tutorial is a generic record. Enable the Generic option.","Do not create any output because the component does not produce any record. This is the only difference between an output an a processor component.","Your output component is now defined. You can add another component or generate and download your project.","Once your project is configured and all the components you need are created, you can generate and download the final project. In this tutorial, the project was configured and three components of different types (input, processor and output) have been defined.","Click GO TO FINISH at the bottom of the page. You are redirected to a page that summarizes the project. On the left panel, you can also see all the components that you added to the project.","Generate the project using one of the two options available:","Download it locally as a ZIP file using the DOWNLOAD AS ZIP button.","Create a GitHub repository and push the project to it using the CREATE ON GITHUB button.","In this tutorial, the project is downloaded to the local machine as a ZIP file.","Once the package is available on your machine, you can compile it using the build tool selected when configuring the project.","In the tutorial, Maven is the build tool selected for the project. In the project directory, execute the mvn package command. If you don’t have Maven installed on your machine, you can use the Maven wrapper provided in the generated project, by executing the ./mvnw package command.","If you have created a Gradle project, you can compile it using the gradle build command or using the Gradle wrapper: ./gradlew build.","The generated project code contains documentation that can guide and help you implementing the component logic. Import the project to your favorite IDE to start the implementation.","The next tutorial shows how to implement an Input component in details.","Methodology","Creating a Hazelcast input component","Creating a Hazelcast output component","Creating a Zendesk REST API connector","Defining an input component","Defining a processor or output component","Once the plugin installed, you can generate a component project.","Select File > New > Project.","In the New Project wizard, choose Talend Component and click Next.","The plugin loads the component starter and lets you design your components. For more information about the Talend Component Kit starter, check this tutorial.","Once your project is configured, select Next, then click Finish.","The project is automatically imported into the IDEA using the build tool that you have chosen.","Methodology","Installing the IntelliJ plugin","Creating a Hazelcast input component","Creating a Hazelcast output component","Creating a Zendesk REST API connector","Defining an input component","Defining a processor or output component"]},{"lang":"en","title":"Generating a project using IntelliJ plugin","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/generate-project-using-intellij-plugin.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Generating a project using IntelliJ plugin","In this article"],"lvl1":["Related articles"],"text":["Once the plugin installed, you can generate a component project.","Select File > New > Project.","In the New Project wizard, choose Talend Component and click Next.","The plugin loads the component starter and lets you design your components. For more information about the Talend Component Kit starter, check this tutorial.","Once your project is configured, select Next, then click Finish.","The project is automatically imported into the IDEA using the build tool that you have chosen.","Methodology","Installing the IntelliJ plugin","Creating a Hazelcast input component","Creating a Hazelcast output component","Creating a Zendesk REST API connector","Defining an input component","Defining a processor or output component"]},{"lang":"en","title":"Generating a project using the Component Kit starter","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-generate-project-using-starter.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Generating a project using the Component Kit starter","In this article"],"lvl1":["Configuring the project","Creating an Input component","Creating a Processor component","Creating an Output component","Generating and downloading the final project","Compiling and exploring the generated project files","Related articles"],"text":["The Component Kit starter lets you design your components configuration and generates a ready-to-implement project structure.","This tutorial shows you how to use the Component Kit starter to generate new components for MySQL databases. Before starting, make sure that you have correctly setup your environment. See this section.","Before being able to create components, you need to define the general settings of the project:","Create a folder on your local machine to store the resource files of the component you want to create. For example, C:/my_components.","Open the starter in the web browser of your choice.","Select your build tool. This tutorial uses Maven, but you can select Gradle instead.","Add the Talend Component Kit Testing facet to your project to automatically generate unit tests for the components created later in this tutorial. Add any facet you need.","Enter the Component Family of the components you want to develop in the project. This name must be a valid java name and is recommended to be capitalized, for example 'MySQL'. Once you have implemented your components in the Studio, this name is displayed in the Palette to group all of the MySQL-related components you develop, and is also part of your component name.","Select the Category of the components you want to create in the current project. As MySQL is a kind of database, select Databases in this tutorial. This Databases category is used and displayed as the parent family of the MySQL group in the Palette of the Studio.","Complete the project metadata by entering the Group, Artifact and Package.","Click the ADD A COMPONENT button to start designing your components.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create an input component that connects to a MySQL database, executes a SQL query and gets the result.","Choose the component type. INPUT in this case.","Enter the component name. For example, MySQLInput.","Click CONFIGURATION MODEL. This button lets you specify the required configuration for the component.","For each parameter that you need to add, click the (+) button on the right panel. Enter the name and choose the type of the parameter, then click the tick button to save the changes. In this tutorial, to be able to execute a SQL query on the Input MySQL database, the configuration requires the following parameters:+","a connection URL (string)","a username (string)","a password (string)","the SQL query to be executed (string).","Closing the configuration panel on the right does not delete your configuration.","Specify whether the component issues a stream or not. In this tutorial, the MySQL input component created is an ordinary (non streaming) component. In this case, let the toggle button disabled.","Select the Record Type generated by the component. In this tutorial, select Generic because the component is designed to generate JSON records. You can also select Custom to define a POJO that represents your records.","Your input component is now defined. You can add another component or generate and download your project.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create a simple processor component that receives a record, logs it and returns it at it is.","Choose the component type. PROCESSOR/OUTPUT in this case.","Enter the component name. For example, RecordLogger, as the processor created in this tutorial logs the records.","Specify the CONFIGURATION MODEL of the component. In this tutorial, the component doesn’t need any specific configuration. Skip this step.","Define the Input(s) of the component. For each input that you need to define, click ADD INPUT. In this tutorial, only one input is needed to receive the record to log.","Click the input name to access its configuration. You can change the name of the input and define its structure using a POJO. If you added several inputs, repeat this step for each one of them. The input in this tutorial is a generic record. Enable the Generic option.","Define the Output(s) of the component. For each output that you need to define, click ADD OUTPUT. In this tutorial, only one generic output is needed to return the received record. Outputs can be configured the same way as inputs (see previous steps).","Make sure to check the configuration of inputs and outputs as they are not set to Generic by default.","Your processor component is now defined. You can add another component or generate and download your project.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create an output component that receives a record and inserts it into a MySQL database table.","Output components are Processors without any output. In other words, the output is a processor that does not produce any records.","Choose the component type. PROCESSOR/OUTPUT in this case.","Enter the component name. For example, MySQLOutput.","Click CONFIGURATION MODEL. This button lets you specify the required configuration for the component.","For each parameter that you need to add, click the (+) button on the right panel. Enter the name and choose the type of the parameter, then click the tick button to save the changes. In this tutorial, to be able to insert a record in the output MySQL database, the configuration requires the following parameters:+","a connection URL (string)","a username (string)","a password (string)","the name of the table to insert the record in (string).","Closing the configuration panel on the right does not delete your configuration.","Define the Input(s) of the component. For each input that you need to define, click ADD INPUT. In this tutorial, only one input is needed.","Click the input name to access its configuration. You can change the name of the input and define its structure using a POJO. If you added several inputs, repeat this step for each one of them. The input in this tutorial is a generic record. Enable the Generic option.","Do not create any output because the component does not produce any record. This is the only difference between an output an a processor component.","Your output component is now defined. You can add another component or generate and download your project.","Once your project is configured and all the components you need are created, you can generate and download the final project. In this tutorial, the project was configured and three components of different types (input, processor and output) have been defined.","Click GO TO FINISH at the bottom of the page. You are redirected to a page that summarizes the project. On the left panel, you can also see all the components that you added to the project.","Generate the project using one of the two options available:","Download it locally as a ZIP file using the DOWNLOAD AS ZIP button.","Create a GitHub repository and push the project to it using the CREATE ON GITHUB button.","In this tutorial, the project is downloaded to the local machine as a ZIP file.","Once the package is available on your machine, you can compile it using the build tool selected when configuring the project.","In the tutorial, Maven is the build tool selected for the project. In the project directory, execute the mvn package command. If you don’t have Maven installed on your machine, you can use the Maven wrapper provided in the generated project, by executing the ./mvnw package command.","If you have created a Gradle project, you can compile it using the gradle build command or using the Gradle wrapper: ./gradlew build.","The generated project code contains documentation that can guide and help you implementing the component logic. Import the project to your favorite IDE to start the implementation.","The next tutorial shows how to implement an Input component in details.","Methodology","Creating a Hazelcast input component","Creating a Hazelcast output component","Creating a Zendesk REST API connector","Defining an input component","Defining a processor or output component"]},{"lang":"en","title":"Generating data","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-generating-data.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Generating data","In this article"],"lvl1":["Related articles"],"text":["Several data generators exist if you want to populate objects with a semantic that is more evolved than a plain random string like commons-lang3:","github.com/Codearte/jfairy","github.com/DiUS/java-faker","github.com/andygibson/datafactory","etc.","Even more advanced, the following generators allow to directly bind generic data on a model. However, data quality is not always optimal:","github.com/devopsfolks/podam","github.com/benas/random-beans","etc.","There are two main kinds of implementation:","Implementations using a pattern and random generated data.","Implementations using a set of precomputed data extrapolated to create new values.","Check your use case to know which one fits best.","An alternative to data generation can be to import real data and use Talend Studio to sanitize the data, by removing sensitive information and replacing it with generated or anonymized data. Then you just need to inject that file into the system.","If you are using JUnit 5, you can have a look at glytching.github.io/junit-extensions/randomBeans.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Simple/Test Pipeline API"]},{"lang":"en","title":"Getting Started with Talend Component Kit","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-getting-started-with-tck.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Getting Started with Talend Component Kit","In this article"],"lvl1":["Talend Component Kit methodology","General component execution logic","Talend Component Kit Overview","Creating your first component"],"lvl2":["Related articles","Framework tools","Repositories","Related articles","Prerequisites","Generating a simple component project","Compiling and deploying the component to Talend Open Studio","Editing the component","Building a job with the component","Related articles"],"text":["Talend components are functional objects that let you easily perform operations on given sets of data, through a comprehensive graphical environment.","Talend Component Kit is a framework designed to help you developing new Talend components. From generating a Java project and coding until testing and using them in Talend applications, use this toolkit to ensure your components fit your needs.","If you are new to Talend component development or with the Talend Component Kit framework, you can start by reading the following articles to get a better overview of the framework design.","Development methodology","General component execution logic","Framework Overview","You can also learn the basics of component development by following this tutorial:","Creating your first component","To learn more about Talend components in general and about existing components that you can already use, refer to the following documents:","Talend Help Center component reference documentation","What is a Talend Component","Talend Component Kit is a framework designed to simplify the development of components at two levels:","Runtime: Runtime is about injecting the specific component code into a job or pipeline. The framework helps unify as much as possible the code required to run in Data Integration (DI) and BEAM environments.","Graphical interface: The framework helps unify the code required to be able to render the component in a browser (web) or in the Eclipse-based Studio (SWT).","Before being able to develop new components, check the prerequisites to make sure that you have all you need to get started.","Developing new components using the framework includes:","Creating a project using the starter or the Talend IntelliJ plugin. This step allows to build the skeleton of the project. It consists in:","Defining the general configuration model for each component in your project","Generating and downloading the project archive from the starter","Compiling the project","Importing the compiled project in your IDE. This step is not required if you have generated the project using the IntelliJ plugin.","Implementing the components, including:","Registering the component by specifying its metadata: family, categories, version, icon, type, and name.","Defining the layout and configurable part of the components","Defining the partition mapper for Input components","Implementing the source logic (producer) for Input components","Defining the processor for Output components","Testing the components","Deploying the components to Talend Studio or Cloud applications","Some additional configuration steps can be necessary according to your requirements:","Defining services that can be reused in several components","Masking sensitive data","","Talend Component Kit framework overview","General component execution logic","Each type of component has its own execution logic. The same basic logic is applied to all components of the same type, and is then extended to implement each component specificities. The project generated from the starter already contains the basic logic for each component.","Talend Component Kit framework relies on several primitive components.","All components can use @PostConstruct and @PreDestroy annotations to initialize or release some underlying resource at the beginning and the end of a processing.","In distributed environments, class constructor are called on cluster manager nodes. Methods annotated with @PostConstruct and @PreDestroy are called on worker nodes. Thus, partition plan computation and pipeline tasks are performed on different nodes.","","The created task is a JAR file containing class information, which describes the pipeline (flow) that should be processed in cluster.","During the partition plan computation step, the pipeline is analyzed and split into stages. The cluster manager node instantiates mappers/processors, gets estimated data size using mappers, and splits created mappers according to the estimated data size. All instances are then serialized and sent to the worker node.","Serialized instances are received and deserialized. Methods annotated with @PostConstruct are called. After that, pipeline execution starts. The @BeforeGroup annotated method of the processor is called before processing the first element in chunk. After processing the number of records estimated as chunk size, the @AfterGroup annotated method of the processor is called. Chunk size is calculated depending on the environment the pipeline is processed by. Once the pipeline is processed, methods annotated with @PreDestroy are called.","All the methods managed by the framework must be public. Private methods are ignored.","","","The framework is designed to be as declarative as possible but also to stay extensible by not using fixed interfaces or method signatures. This allows to incrementally add new features of the underlying implementations.","Talend Component Kit is a toolkit based on Java and designed to simplify the development of components at two levels:","Runtime: Runtime is about injecting the specific component code into a job or pipeline. The framework helps unify as much as possible the code required to run in Data Integration (DI) and BEAM environments.","Graphical interface: The framework helps unify the code required to be able to render the component in a browser (web) or in the Eclipse-based Studio (SWT).","The Talend Component Kit framework is made of several tools designed to help you during the component development process. It allows to develop components that fit in both Java web UIs.","Starter: Generate the skeleton of your development project using a user-friendly interface. The Talend Component Kit Starter is available as a web tool or as a plugin for the IntelliJ IDE.","","Component API: Check all classes available to implement components.","Build tools: The framework comes with Maven and Gradle wrappers, which allow to always use the version of Maven or Gradle that is right for your component development environment and version.","Testing tools: Test components before integrating them into Talend Studio or Cloud applications. Testing tools include the Talend Component Kit Web Tester, which allows to check the web UI of your components on your local machine.","","You can find more details about the framework design in this document.","The Talend Component Kit project is available on GitHub in the following repositories:","Runtime repository","API repository","Methodology for creating components","General component execution logic","This tutorial walks you through all the required steps to get started with Talend Component Kit, from the creation of a simple component to its integration into Talend Open Studio.","The component created in this tutorial is a simple output component that receives data from the previous component and displays it in the logs, along with an extra information entered by a user.","Once the prerequisites completed, this tutorial should take you about 20 minutes.","This tutorial aims at helping you to create your very first component. But before, get your development environment ready:","Download and install a Java JDK 1.8 or greater.","Download and install Talend Open Studio. For example, from Sourceforge.","Download and install IntelliJ.","Download the Talend Component Kit plugin for IntelliJ. The detailed installation steps for the plugin are available in this document.","The first step in this tutorial is to generate a project containing a simple output component using the Starter included in the Talend Component Kit plugin for IntelliJ.","Start IntelliJ and create a new project. In the available options, you should see Talend Component.","Make sure that a Project SDK is selected. Then, select Talend Component and click Next. The Talend Component Kit Starter opens.","Enter the project details. The goal here is to define the component and project metadata. Change the default values as follows:","The Component Family and the Category will be used later in Talend Open Studio to find the new component.","The project metadata are mostly used to identify the project structure. A common practice is to replace 'company' in the default value by a value of your own, like your domain name.","Once the metadata is filled, select ADD A COMPONENT. A new screen is displayed in the Talend Component Kit Starter that lets you define the generic configuration of the component.","Select PROCESSOR/OUTPUT and enter a valid Java name for the component. For example, Logger.","Select CONFIGURATION MODEL and add a string field named level. This input field will be used in the component configuration to enter additional information to display in the logs.","In the Input(s) / Output(s) section, click the default MAIN input branch to access its detail, and toggle the Generic option to specify that the component can receive any type of data. Leave the Name of the branch with its default MAIN value.","By default, when selecting PROCESSOR/OUTPUT, there is one input branch and no output branch for the component, which is fine in the case of this tutorial. A processor without any output branch is considered an output component.","Click Next and check the name and location of your project, then click Finish to generate the project in the IDE.","At this point, your component is technically already ready to be compiled and deployed to Talend Open Studio. But first, have a look at the generated project:","Two classes based on the name and type of component defined in the Talend Component Kit Starter have been generated:","LoggerOutput is where the component logic is defined","LoggerOutputConfiguration is where the component layout and configurable fields are defined, including the level string field that was defined earlier in the configuration model of the component.","The package-info.java file contains the component metadata defined in the Talend Component Kit Starter, like the family and category.","You can notice as well that the elements in the tree structure are named after the project metadata defined in the Talend Component Kit Starter.","These files are the starting point if you later need to edit the configuration, logic, and metadata of your component.","There is more that you can do and configure with the Talend Component Kit Starter. This tutorial covers only the basics. You can find more information in this document.","Without any modification in the component code, you can compile the project and deploy the component to a local instance of Talend Open Studio.","This way, it will be easy to check that what is visible in the Studio is what is intended.","Before starting to run any command, make sure Talend Open Studio is not running.","From your component project in IntelliJ, open a terminal.","There, you can see that the terminal opens directly at the root of the project. All commands shown in this tutorial are performed from this folder.","Compile the project by running the following command: mvnw clean install. The mvnw command refers to the Maven wrapper that is shipped with Talend Component Kit. It allows to use the right version of Maven for your project without having to install it manually beforehand. An equivalent wrapper is available for Gradle.","Once the command is executed and you see BUILD SUCCESS in the terminal, deploy the component to your local instance of Talend Open Studio using the following command: mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=\"<path to Talend Open Studio home>\"","Replace the path by your own value. If the path contains spaces (for example, Program Files), enclose it with double quotes.","Make sure the build is successful.","Open Talend Open Studio and create a new Job:","The new component is present inside the new family and category that were specified in the Talend Component Kit Starter. You can add it to your job and open its settings.","Notice that the level field that was specified in the configuration model of the component in the Talend Component Kit Starter is present.","At this point, your new component is available in Talend Open Studio, and its configurable part is already set. But the component logic is still to be defined. As a reminder, the initial goal of this component is to output the information it received in input in the logs of the job. Go to the next section to learn how to define a simple logic.","You can now edit the component to implement a simple logic aiming at reading the data contained in the input branch of the component, to display it the execution logs of the job. The value of the level field of the component also needs to be displayed and changed to uppercase.","Save the job created earlier and close Talend Open Studio.","Back in IntelliJ open the LoggerOutput class. This is the class where the component logic can be defined.","Look for the @ElementListener method. It is already present and references the default input branch that was defined in the Talend Component Kit Starter, but it is not complete yet.","To be able to log the data in input to the console, add the following lines:","The @ElementListener method now looks as follows:","Open the Terminal again to compile the project and deploy the component again. To do that, run successively the two following commands:","mvnw clean install","`mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=\"<path to Talend Open Studio home>\"","The update of the component logic should now be deployed to the Studio. After restarting the Studio, you will be ready to build a job and use your component for the first time.","To learn the different possibilities and methods available to develop more complex logics, refer to this document.","If you want to avoid having to close and re-open Talend Open Studio every time you need to make an edit, you can enable the developer mode, as explained in this document.","As the component is now ready to be used, it is time to create a job and check that it behaves as intended.","Open Talend Open Studio again and go to the job created earlier. The new component is still there.","Add a tRowGenerator component and connect it to the logger.","Double-click the tRowGenerator to specify the data to generate:","Add a first column named firstName and select the *TalendDataGenerator.getFirstName() function.","Add a second column named 'lastName' and select the *TalendDataGenerator.getLastName() function.","Set the Number of Rows for RowGenerator to 10.","Validate the tRowGenerator configuration.","Open the TutorialFamilyLogger component and set the level field to info.","Go to the Run tab of the job and run the job. The job is executed. You can observe in the console that each of the 10 generated rows is logged, and that the info value entered in the logger is also displayed with each record, in uppercase.","To go further and start implementing more complex components, you can refer to the following documents:","Methodology for creating components","Generating a project using the Talend Component Kit Starter","Registering a component","General component execution logic","Configuring a component","Defining an input component logic","Defining a processor/output logic","Internationalizing a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Getting started with Talend Component Kit","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/getting-started.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Getting started with Talend Component Kit","In this article"],"lvl1":["System Requirements","Main principles"],"text":["Talend Component Kit is a framework designed to simplify the development of components at two levels:","Runtime: Runtime is about injecting the specific component code into a job or pipeline. The framework helps unify as much as possible the code required to run in Data Integration (DI) and BEAM environments.","Graphical interface: The framework helps unify the code required to be able to render the component in a browser (web) or in the Eclipse-based Studio (SWT).","In order to use Talend Component Kit, you need the following tools installed on your machine:","Java JDK 1.8.x. You can download it from Oracle website.","Apache Maven 3.5.x is recommended to develop a component or the project itself. You can download it from Apache Maven website. You can also use Gradle.","A Java Integrated Development Environment such as Eclipse or IntelliJ.","The version of your Studio is 7.0 and onwards.","Developing new components using the framework includes:","Creating a project using the starter or the Talend IntelliJ plugin.","Defining the general configuration model for each component in your project","Generating and downloading the project’s archive from the starter","Compiling the project","Implementing the components","Registering the components family","Defining the layout and configurable part of the components","Defining the partition mapper for Input components","Implementing the source logic for Input components","Defining the processor for Output components","Testing the components","Some additional configuration steps can be necessary according to your requirements:","Generate a component","Create an input component","Create an output component","Test your components","Configuration and sensitive data","Create components for REST API","How to test a REST API","Dev vs CI setup"]},{"lang":"en","title":"Handling component version migration","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-handle-talend-component-migration.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Handling component version migration","In this article"],"lvl1":["Requirements","Creating the version 1 of the component","Creating the version 2 of the component","Handling the migration from the version 1 to the version 2"],"lvl2":["Declaring the migration handler","Implementing the migration handler"],"text":["Talend Component Kit provides a migration mechanism between two versions of a component to let you ensure backward compatibility.","For example, a new version of a component may have some new options that need to be remapped, set with a default value in the older versions, or disabled.","This tutorial shows how to create a migration handler for a component that needs to be upgraded from a version 1 to a version 2. The upgrade to the newer version includes adding new options to the component.","This tutorial assumes that you know the basics about component development and are familiar with component project generation and implementation.","To follow this tutorial, you need:","Java 8","A Talend component development environment using Talend Component Kit. Refer to this document.","Have generated a project containing a simple processor component using the Talend Component Kit Starter.","First, create a simple processor component configured as follows:","Create a simple configuration class that represents a basic authentication and that can be used in any component requiring this kind of authentication.","Create a simple output component that uses the configuration defined earlier. The component configuration is injected into the component constructor.","The version of the configuration class is aligned with the component version. The configuration class is consumed by the component and inherits its version.","By configuring these two classes, the first version of the component is ready to use a simple authentication mechanism.","Now, assuming that the component needs to support a new authentication mode following a new requirement, the next steps are:","Creating a version 2 of the component that supports the new authentication mode.","Handling migration from the first version to the new version.","The second version of the component needs to support a new authentication method and let the user choose the authentication mode he wants to use using a dropdown list.","Add an Oauth2 authentication mode to the component in addition to the basic mode. For example:","The options of the new authentication mode are now defined.","Wrap the configuration created above in a global configuration with the basic authentication mode and add an enumeration to let the user choose the mode to use. For example, create an AuthenticationConfiguration class as follows:","Using the @ActiveIf annotation allows to activate the authentication type according to the selected authentication mode.","Edit the component to use the new configuration that supports an additional authentication mode. Also upgrade the component version from 1 to 2 as its configuration has changed.","The component now supports two authentication modes in its version 2. Once the new version is ready, you can implement the migration handler that will take care of adapting the old configuration to the new one.","What can happen if an old configuration is passed to the new component version?","It simply fails, as the version 2 does not recognize the old version anymore. For that reason, a migration handler that adapts the old configuration to the new one is required. It can be achieved by defining a migration handler class in the @Version annotation of the component class.","An old configuration may already be persisted by an application that integrates the version 1 of the component (Studio or web application).","Add a migration handler class to the component version.","Create the migration handler class MyOutputMigrationHandler","the incoming version, which is the version of the configuration that we are migrating from","a map (key, value) of the configuration, where the key is the configuration path and the value is the value of the configuration.","You need to be familiar with the component configuration path construction to better understand this part. Refer to Defining component layout and configuration.","Assuming that you are familiar with component configuration path construction, let’s implement the migration handler.","As a reminder, the following changes were made since the version 1 of the component:","The configuration BasicAuth from the version 1 is not the root configuration anymore, as it is under AuthenticationConfiguration.","AuthenticationConfiguration is the new root configuration.","The component supports a new authentication mode (Oauth2) which is the default mode in the version 2 of the component.","To migrate the old component version to the new version and to keep backward compatibility, you need to:","Remap the old configuration to the new one.","Give the adequate default values to some options.","In the case of this scenario, it means making all configurations based on the version 1 of the component have the authenticationMode set to basic by default and remapping the old basic authentication configuration to the new one.","if a configuration has been renamed between 2 component versions, you can get the old configuration option from the configuration map by using its old path and set its value using its new path.","You can now upgrade your component without losing backward compatibility."]},{"lang":"en","title":"Implementing an Output component","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-create-an-output-component.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Implementing an Output component","In this article"],"lvl1":["Defining the configurable part and the layout of the component","Configuring the Output"],"lvl2":["Defining the constructor method","Defining the PostConstruct method","Defining the PreDestroy method","Defining the ElementListener method","Full implementation of the Output"],"text":["This tutorial shows how to create a complete working output component for Hazelcast, including:","Defining the configurable part and the layout of the component.","Defining the output that is responsible for connecting and writing data to the data source.","The methodology to define the component configuration is described in the Implementing an input component tutorial.","In this case, the input component configuration defined in the tutorial mentioned above can be used as a starting point.","Two additional fields are required for the output component:","These fields are used to determine the key and value attributes for the Hazelcast map.","The output component needs to work in distributed environments and should implement a serializable interface.","The skeleton of the output component looks as follows.","If you need to bulk write the updates accordingly to groups, see Processors and batch processing.","Each of the methods mentioned above now needs to be created.","To make it work, a Hazelcast instance and a Hazelcast map are required. The corresponding attributes need to be added to the output.","In production, avoid creating one instance per thread/worker.","Shut down the Hazelcast client instance created by the method annotated with @PostConstruct and thus free the Hazelcast map reference.","Once implemented, the Output configuration is as follows. For more information about outputs, refer to this document.","You have now created a complete working output component. You can follow this tutorial to learn how to create unit tests for your new component."]},{"lang":"en","title":"Implementing an input component","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-create-an-input-component.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Implementing an input component","In this article"],"lvl1":["Registering the component family","Defining the configurable part and the layout of the component","Configuring The Partition Mapper","Configuring the Producer (Source)"],"lvl2":["Defining the constructor method","Defining the PostConstruct method","Defining the PreDestroy method","Defining the Assessor method","Defining the Split method","The Emitter method","Full implementation of the Partition Mapper"],"text":["This tutorial shows how to create a complete working input component for Hazelcast, including:","Registering the component family.","Defining the configurable part and the layout of the component.","Configuring the partition mapper, to let the input split itself to work in a distributed environment.","Configuring the source that is responsible for connecting and reading data from the data source.","Getter and Setter methods are omitted for simplicity in this tutorial.","The following procedures assume that you have already generated the component package from the Talend Component Kit starter. See this tutorial to learn how to generate this package.","Register the component family via a the package-info.java file in the package of the component.","The component configuration includes defining the part of the components that can be configured once integrated to Talend solutions, in addition to the configuration type and the UI layout.","The configuration is a POJO class decorated with annotations from the component framework. In this case, the component is configured as follows:","Read more about component configuration in this document.","The Hazelcast component created through this tutorial needs to work first in distributed environments.","Every input component has to define a partition mapper class.","At runtime, this class heuristically estimates the size of the data to be handled. Based on this estimation and on the capacity of the execution engine of your component, it divides the work of your component to reduce the overall execution time.","For more information about the partition mapper class, see Partition mapper.","The skeleton of the partition mapper looks as follows:","Configuration parameters are annotated with @Option.","Other parameters are considered as services and are injected by the component framework. Services can be local (classes annotated with @Service) or provided by the component framework.","Each of the methods mentioned above now needs to be created.","The @PostConstruct method is used to initialize a Hazelcast client instance.","The HazelcastService is implemented as follows. Every class annotated with @Service can be injected to the component via its constructor.","The method annotated with @PreDestroy cleans up the resources at the end of the execution of the partition mapper.","The method annotated with @Assessor is used to estimate the volume of the dataset to be handled.","Then, you can Implement the methods annotated with @PreDestroy and @Accessor to create a map of the volumes of the Hazelcast cluster members.","The method annotated with @Split dynamically splits the partition mapper into a collection of sub-mappers according to:","the bundle size required by the execution engine to be used.","to the volume of the dataset to handle.","The method annotated with @Emitter generates producers using the component configuration. It can be used to load data to the processing flow of a Talend Job. Each sub-mapper generates one producer.","Once implemented, the Partition Mapper configuration is as follows. For more information about Partition Mappers, refer to this document.","The component configuration and the partition mapper in charge of creating the producers are now defined. At this point, you can implement the source logic that uses the configuration provided by the mapper to read the records from the data source.","To implement a source, you need to define the producer method that creates a record every time it is invoked.","To learn more about producers, refer to this document.","You have now created a complete working input component. You can follow this tutorial to learn how to create unit tests for your new component."]},{"lang":"en","title":"Implementing batch processing","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/concept-processor-and-batch-processing.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Implementing batch processing","In this article"],"lvl1":["Related articles"],"text":["Depending on several requirements, including the system capacity and business needs, a processor can process records differently.","For example, for real-time or near-real time processing, it is more interesting to process small batches of data more often. On the other hand, in case of one-time processing, it is more optimal to adapt the way the component handles batches of data according to the system capacity.","By default, the runtime automatically estimates a group size that it considers good, according to the system capacity, to process the data. This group size can sometimes be too big and not optimal for your needs or for your system to handle effectively and correctly.","Users can then customize this size from the component settings in Talend Studio, by specifying a maxBatchSize that adapts the size of each group of data to be processed.","The estimated group size logic is automatically implemented when a component is deployed to a Talend application. Besides defining the @BeforeGroup and @AfterGroup logic detailed below, no action is required on the implementation side of the component.","The component batch processes the data as follows:","Case 1 - No maxBatchSize is specified in the component configuration. The runtime estimates a group size of 4. Records are processed by groups of 4.","Case 2 - The runtime estimates a group size of 4 but a maxBatchSize of 3 is specified in the component configuration. The system adapts the group size to 3. Records are processed by groups of 3.","","Each group is processed as follows until there is no record left:","The @BeforeGroup method resets a record buffer at the beginning of each group.","The records of the group are assessed one by one and placed in the buffer as follows: The @ElementListener method tests if the buffer size is greater or equal to the defined maxBatchSize. If it is, the records are processed. If not, then the current record is buffered.","The previous step happens for all records of the group. Then the @AfterGroup method tests if the buffer is empty.","","You can define the following logic in the processor configuration:","You can learn more about processors in this document.","Defining a processor/output logic","General component execution logic","Implementing bulk processing","Best practices"]},{"lang":"en","title":"Implementing components","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-creating-components.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Implementing components","In this article"],"lvl1":["Registering components","Defining an input component logic","Defining a processor or an output component logic","Defining component layout and configuration","Internationalizing components","Managing component versions and migration","Masking sensitive data in your configuration","Implementing batch processing","Building components with Maven","Building components with Gradle","Wrapping a Beam I/O","Talend Component Kit best practices","Component Loading"],"lvl2":["Component family and categories","Component icon and version","Component type and name","Related articles","Defining a partition mapper","Defining the producer method","Related articles","Defining a processor","Defining an output","Defining a combiner","Related articles","Parameter name","Parameter types","Mapping complex objects","Defining Constraints and validations on the configuration","Marking a configuration as dataset or datastore","Defining links between properties","Adding hints about the rendering","Related articles","Default components keys","Internationalizing a configuration class","Related articles","Marking sensitive data","Related articles","Related articles","Dependencies","Validating the component programming model","Generating the component documentation","Testing a component web rendering","Generating inputs or outputs","Generating the component archive","Deploying to the Studio","Help","Related articles","Related articles","Limitations","Wrapping an input","Wrapping an output","Tip","Advanced","Related articles","Organizing your code","Configuring components","Handling UI interactions","Enforcing versioning on components","Testing components","Related articles","Packaging a plugin","Packaging an application","Component scanning rules and default exclusions","Related articles"],"lvl3":["Defining a custom icon for a component or component family","What is a partition mapper","Implementing a partition mapper","What is a processor","Defining multiple outputs","Defining multiple inputs","Implementing batch processing","What is an output","What is a combiner","Primitives","List case","Map case","MaxLength","MinLength","Pattern","Max","Min","Required","MaxItems","MinItems","UniqueItems","Dataset","Datastore","ActiveIf","ActiveIfs","@DefaultValue","@OptionsOrder","@AutoLayout","@GridLayout","@GridLayouts","@HorizontalLayout","@VerticalLayout","@Code","@Credential","@Structure","@TextArea","Rendering your documentation","Coder","JsonObject to IndexedRecord","Sample","Serializing your configuration","Input and output components","Processor components","Validations","Completion","Component representation","Dependencies","Listing needed plugins","maven-shade-plugin extensions","Jars Scanning","Package Scanning"],"text":["Once you have generated a project, you can start implementing the logic and layout of your components and iterate on it. Depending on the type of component you want to create, the logic implementation can differ. However, the layout and component metadata are defined the same way for all types of components in your project. The main steps are:","Defining family and component metadata","Defining an input component logic","Defining a processor/output logic","Defining component layout and configuration","","In some cases, you will require specific implementations to handle more advanced cases, such as:","Internationalizing a component","Managing component versions","Masking sensitive data","Implementing batch processing","You can also make certain configurations reusable across your project by defining services. Using your Java IDE along with a build tool supported by the framework, you can then compile your components to test and deploy them to Talend Studio or other Talend applications:","Building components with Maven","Building components with Gradle","Wrapping a Beam I/O","In any case, follow these best practices to ensure the components you develop are optimized.","You can also learn more about component loading and plugins here:","Loading a component","Before implementing a component logic and configuration, you need to specify the family and the category it belongs to, the component type and name, as well as its name and a few other generic parameters. This set of metadata, and more particularly the family, categories and component type, is mandatory to recognize and load the component to Talend Studio or Cloud applications.","Some of these parameters are handled at the project generation using the starter, but can still be accessed and updated later on.","The family and category of a component is automatically written in the package-info.java of the component package, using the @Components annotation. By default, these parameters are already configured in this file when you import your project in your IDE. Their value correspond to what was defined during the project definition with the starter.","Multiple components can share the same family and category value, but the family + name pair must be unique for the system.","A component can belong to one family only and to one or several categories. If not specified, the category defaults to Misc.","The package-info.java also defines the component family icon, which is different from the component icon. You can learn how to customize this icon in this section.","Here is a sample package-info.java:","Another example with an existing component:","Components can require metadata to be integrated in Talend Studio or Cloud platforms. Metadata is set on the component class and belongs to the org.talend.sdk.component.api.component package.","When you generate your project and import it in your IDE, icon and version both come with a default value.","@Icon: Sets an icon key used to represent the component. You can use a custom key with the custom() method but the icon may not be rendered properly. The icon defaults to Star. Learn how to set a custom icon for your component in this section.","@Version: Sets the component version. 1 by default. Learn how to manage different versions and migrations between your component versions in this section.","Every component family and component needs to have a representative icon. You can use one of the icons provided by the framework or you can use a custom icon.","For the component family the icon is defined in the package-info.java file.","For the component itself, you need to declare the icon in the component class.","To use a custom icon, you need to have the icon file placed in the resources/icons folder of the project. The icon file needs to have a name following the convention IconName_icon32.png, where you can replace IconName by the name of your choice.","The component type is declared in the component class. When you import your project generated from the starter in your IDE, the component type is already defined.","Input components can be:","A partition mapper. @PartitionMapper is the default for input components.","An emitter. @Emitter is a shortcut for @PartitionMapper when you don’t support distribution. It enforces an implicit partition mapper execution with an assessor size of 1 and a split returning itself.","Processor/Output components can be:","A processor. @Processor is the default for output components. A method decorated with @Processor is considered as a producer factory.","Combiners are not supported by the framework. Combiners allow to aggregate results in a single partition.","The name of the component is defined there as well as a parameter of the component type","Once the component type is defined, you can start implementing its specific logic:","Defining an input component","Defining a processor or output component","Methodology for creating components","Generating a project using the starter","Managing component versions","Defining an input component","Defining a processor or output component","Defining component layout and configuration","Best practices","Input components are the components generally placed at the beginning of a Talend job. They are in charge of retrieving the data that will later be processed in the job.","An input component is primarily made of three distinct logics: - The execution logic of the component itself, defined through a partition mapper. - The configurable part of the component, defined through the mapper configuration. - The source logic defined through a producer.","Before implementing the component logic and defining its layout and configurable fields, make sure you have specified its basic metadata, as detailed in this document.","A PartitionMapper is a component able to split itself to make the execution more efficient.","This concept is borrowed from big data and useful in this context only (BEAM executions). The idea is to divide the work before executing it in order to reduce the overall execution time.","The process is the following:","The size of the data you work on is estimated. This part can be heuristic and not very precise.","From that size, the execution engine (runner for Beam) requests the mapper to split itself in N mappers with a subset of the overall work.","The leaf (final) mapper is used as a Producer (actual reader) factory.","This kind of component must be Serializable to be distributable.","A partition mapper requires three methods marked with specific annotations:","@Assessor for the evaluating method","@Split for the dividing method","@Emitter for the Producer factory","The Assessor method returns the estimated size of the data related to the component (depending its configuration). It must return a Number and must not take any parameter.","For example:","The Split method returns a collection of partition mappers and can take optionally a @PartitionSize long value as parameter, which is the requested size of the dataset per sub partition mapper.","For example:","The Emitter method must not have any parameter and must return a producer. It uses the partition mapper configuration to instantiate and configure the producer.","For example:","The Producer method defines the source logic of an input component. It handles the interaction with a physical source and produces input data for the processing flow.","A producer must have a @Producer method without any parameter. It is triggered by the @Emitter of the partition mapper and can return any data. It is defined in the <component_name>Source.java file:","Methodology for creating components","Generating a project using the starter","Registering a component","General component execution logic","Defining component layout and configuration","Internationalizing a component","Masking sensitive data","Best practices","Processors and output components are the components in charge of reading, processing and transforming data in a Talend job, as well as passing it to its required destination.","Before implementing the component logic and defining its layout and configurable fields, make sure you have specified its basic metadata, as detailed in this document.","A Processor is a component that converts incoming data to a different model.","A processor must have a method decorated with @ElementListener taking an incoming data and returning the processed data:","Processors must be Serializable because they are distributed components.","If you just need to access data on a map-based ruleset, you can use JsonObject as parameter type. From there, Talend Component Kit wraps the data to allow you to access it as a map. The parameter type is not enforced. This means that if you know you will get a SuperCustomDto, then you can use it as parameter type. But for generic components that are reusable in any chain, it is highly encouraged to use JsonObject until you have an evaluation language-based processor that has its own way to access components.","For example:","A processor also supports @BeforeGroup and @AfterGroup methods, which must not have any parameter and return void values. Any other result would be ignored. These methods are used by the runtime to mark a chunk of the data in a way which is estimated good for the execution flow size.","Because the size is estimated, the size of a group can vary. It is even possible to have groups of size 1.","It is recommended to batch records, for performance reasons:","You can optimize the data batch processing by using the maxBatchSize parameter. This parameter is automatically implemented on the component when it is deployed to a Talend application. Only the logic needs to be implemented. Learn how to implement chunking/bulking in this document.","In some cases, you may need to split the output of a processor in two. A common example is to have \"main\" and \"reject\" branches where part of the incoming data are passed to a specific bucket to be processed later.","To do that, you can use @Output as replacement of the returned value:","Alternatively, you can pass a string that represents the new branch:","Having multiple inputs is similar to having multiple outputs, except that an OutputEmitter wrapper is not needed:","@Input takes the input name as parameter. If no name is set, it defaults to the \"main (default)\" input branch. It is recommended to use the default branch when possible and to avoid naming branches according to the component semantic.","Depending on several requirements, including the system capacity and business needs, a processor can process records differently.","For example, for real-time or near-real time processing, it is more interesting to process small batches of data more often. On the other hand, in case of one-time processing, it is more optimal to adapt the way the component handles batches of data according to the system capacity.","By default, the runtime automatically estimates a group size that it considers good, according to the system capacity, to process the data. This group size can sometimes be too big and not optimal for your needs or for your system to handle effectively and correctly.","Users can then customize this size from the component settings in Talend Studio, by specifying a maxBatchSize that adapts the size of each group of data to be processed.","The estimated group size logic is automatically implemented when a component is deployed to a Talend application. Besides defining the @BeforeGroup and @AfterGroup logic detailed below, no action is required on the implementation side of the component.","The component batch processes the data as follows:","Case 1 - No maxBatchSize is specified in the component configuration. The runtime estimates a group size of 4. Records are processed by groups of 4.","Case 2 - The runtime estimates a group size of 4 but a maxBatchSize of 3 is specified in the component configuration. The system adapts the group size to 3. Records are processed by groups of 3.","","Each group is processed as follows until there is no record left:","The @BeforeGroup method resets a record buffer at the beginning of each group.","The records of the group are assessed one by one and placed in the buffer as follows: The @ElementListener method tests if the buffer size is greater or equal to the defined maxBatchSize. If it is, the records are processed. If not, then the current record is buffered.","The previous step happens for all records of the group. Then the @AfterGroup method tests if the buffer is empty.","","You can define the following logic in the processor configuration:","You can learn more about processors in this document.","Defining a processor/output logic","General component execution logic","Implementing bulk processing","Best practices","An Output is a Processor that does not return any data.","Conceptually, an output is a data listener. It matches the concept of processor. Being the last component of the execution chain or returning no data makes your processor an output component:","Currently, Talend Component Kit does not allow you to define a Combiner. A combiner is the symmetric part of a partition mapper and allows to aggregate results in a single partition.","Methodology for creating components","Generating a project using the starter","Registering a component","General component execution logic","Defining component layout and configuration","Implementing bulk processing","Internationalizing a component","Masking sensitive data","Best practices","The component configuration is defined in the <component_name>Configuration.java file of the package. It consists in defining the configurable part of the component that will be displayed in the UI.","To do that, you can specify parameters. When you import the project in your IDE, the parameters that you have specified in the starter are already present.","Components are configured using their constructor parameters. All parameters can be marked with the @Option property, which lets you give a name to them.","For the name to be correct, you must follow these guidelines:","Use a valid Java name.","Do not include any . character in it.","Do not start the name with a $.","Defining a name is optional. If you don’t set a specific name, it defaults to the bytecode name. This can require you to compile with a -parameter flag to avoid ending up with names such as arg0, arg1, and so on.","Option name","Valid","myName","","my_name","","my.name","","$myName","","Parameter types can be primitives or complex objects with fields decorated with @Option exactly like method parameters.","It is recommended to use simple models which can be serialized in order to ease serialized component implementations.","For example:","Using this kind of API makes the configuration extensible and component-oriented, which allows you to define all you need.","The instantiation of the parameters is done from the properties passed to the component.","A primitive is a class which can be directly converted from a String to the expected type.","It includes all Java primitives, like the String type itself, but also all types with a org.apache.xbean.propertyeditor.Converter:","BigDecimal","BigInteger","File","InetAddress","ObjectName","URI","URL","Pattern","The conversion from property to object uses the Dot notation.","For example, assuming the method parameter was configured with @Option(\"file\"):","matches","Lists rely on an indexed syntax to define their elements.","For example, assuming that the list parameter is named files and that the elements are of the FileOptions type, you can define a list of two elements as follows:","Similarly to the list case, the map uses .key[index] and .value[index] to represent its keys and values:","Avoid using the Map type. Instead, prefer configuring your component with an object if this is possible.","You can use metadata to specify that a field is required or has a minimum size, and so on. This is done using the validation metadata in the org.talend.sdk.component.api.configuration.constraint package:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: maxLength","Parameter Type: double","Supported Types: — java.lang.CharSequence","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: minLength","Parameter Type: double","Supported Types: — java.lang.CharSequence","Sample:","Validate the decorated string with a javascript pattern (even into the Studio).","API: @org.talend.sdk.component.api.configuration.constraint.Pattern","Name: pattern","Parameter Type: java.lang.string","Supported Types: — java.lang.CharSequence","Sample:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: max","Parameter Type: double","Supported Types: — java.lang.Number — int — short — byte — long — double — float","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: min","Parameter Type: double","Supported Types: — java.lang.Number — int — short — byte — long — double — float","Sample:","Mark the field as being mandatory.","API: @org.talend.sdk.component.api.configuration.constraint.Required","Name: required","Parameter Type: -","Supported Types: — java.lang.Object","Sample:","Ensure the decorated option size is validated with a higher bound.","API: @org.talend.sdk.component.api.configuration.constraint.Max","Name: maxItems","Parameter Type: double","Supported Types: — java.util.Collection","Sample:","Ensure the decorated option size is validated with a lower bound.","API: @org.talend.sdk.component.api.configuration.constraint.Min","Name: minItems","Parameter Type: double","Supported Types: — java.util.Collection","Sample:","Ensure the elements of the collection must be distinct (kind of set).","API: @org.talend.sdk.component.api.configuration.constraint.Uniques","Name: uniqueItems","Parameter Type: -","Supported Types: — java.util.Collection","Sample:","When using the programmatic API, metadata is prefixed by tcomp::. This prefix is stripped in the web for convenience, and the table above uses the web keys.","Also note that these validations are executed before the runtime is started (when loading the component instance) and that the execution will fail if they don’t pass. If it breaks your application, you can disable that validation on the JVM by setting the system property talend.component.configuration.validation.skip to true.","It is common to classify the incoming data. It is similar to tagging data with several types. Data can commonly be categorized as follows:","Datastore: The data you need to connect to the backend.","Dataset: A datastore coupled with the data you need to execute an action.","Mark a model (complex object) as being a dataset.","API: @org.talend.sdk.component.api.configuration.type.DataSet","Sample:","Mark a model (complex object) as being a datastore (connection to a backend).","API: @org.talend.sdk.component.api.configuration.type.DataStore","Sample:","The component family associated with a configuration type (datastore/dataset) is always the one related to the component using that configuration.","Those configuration types can be composed to provide one configuration item. For example, a dataset type often needs a datastore type to be provided. A datastore type (that provides the connection information) is used to create a dataset type.","Those configuration types are also used at design time to create shared configurations that can be stored and used at runtime.","For example, in the case of a relational database that supports JDBC:","A datastore can be made of:","a JDBC URL","a username","a password.","A dataset can be made of:","a datastore (that provides the data required to connect to the database)","a table name","data.","The component server scans all configuration types and returns a configuration type index. This index can be used for the integration into the targeted platforms (Studio, web applications, and so on).","The configuration type index is represented as a flat tree that contains all the configuration types, which themselves are represented as nodes and indexed by ID.","Every node can point to other nodes. This relation is represented as an array of edges that provides the child IDs.","As an illustration, a configuration type index for the example above can be defined as follows:","The model allows you to define meta information without restrictions. However, it is highly recommended to ensure that: a datastore is used in each dataset. each dataset has a corresponding source (mapper or emitter) which has a configuration that is usable if the software only fills the dataset part. All other properties must not be required.","The model allows you to define meta information without restrictions. However, it is highly recommended to ensure that:","a datastore is used in each dataset.","each dataset has a corresponding source (mapper or emitter) which has a configuration that is usable if the software only fills the dataset part. All other properties must not be required.","If you need to define a binding between properties, you can use a set of annotations:","If the evaluation of the element at the location matches value then the element is considered active, otherwise it is deactivated.","API: @org.talend.sdk.component.api.configuration.condition.ActiveIf","Type: if","Sample:","Allows to set multiple visibility conditions on the same property.","API: @org.talend.sdk.component.api.configuration.condition.ActiveIfs","Type: ifs","Sample:","The target element location is specified as a relative path to the current location, using Unix path characters. The configuration class delimiter is /. The parent configuration class is specified by ... Thus, ../targetProperty denotes a property, which is located in the parent configuration class and is named targetProperty.","When using the programmatic API, metadata is prefixed with tcomp::. This prefix is stripped in the web for convenience, and the previous table uses the web keys.","In some cases, you may need to add metadata about the configuration to let the UI render that configuration properly. For example, a password value that must be hidden and not a simple clear input box. For these cases - if you want to change the UI rendering - you can use a particular set of annotations:","Provide a default value the UI can use - only for primitive fields.","API: @org.talend.sdk.component.api.configuration.ui.DefaultValue","Sample:","Allows to sort a class properties.","API: @org.talend.sdk.component.api.configuration.ui.OptionsOrder","Sample:","Request the rendered to do what it thinks is best.","API: @org.talend.sdk.component.api.configuration.ui.layout.AutoLayout","Sample:","Advanced layout to place properties by row, this is exclusive with @OptionsOrder.","API: @org.talend.sdk.component.api.configuration.ui.layout.GridLayout","Sample:","Allow to configure multiple grid layouts on the same class, qualified with a classifier (name)","API: @org.talend.sdk.component.api.configuration.ui.layout.GridLayouts","Sample:","Put on a configuration class it notifies the UI an horizontal layout is preferred.","API: @org.talend.sdk.component.api.configuration.ui.layout.HorizontalLayout","Sample:","Put on a configuration class it notifies the UI a vertical layout is preferred.","API: @org.talend.sdk.component.api.configuration.ui.layout.VerticalLayout","Sample:","Mark a field as being represented by some code widget (vs textarea for instance).","API: @org.talend.sdk.component.api.configuration.ui.widget.Code","Sample:","Mark a field as being a credential. It is typically used to hide the value in the UI.","API: @org.talend.sdk.component.api.configuration.ui.widget.Credential","Sample:","Mark a List<String> or Map<String, String> field as being represented as the component data selector (field names generally or field names as key and type as value).","API: @org.talend.sdk.component.api.configuration.ui.widget.Structure","Sample:","Mark a field as being represented by a textarea(multiline text input).","API: @org.talend.sdk.component.api.configuration.ui.widget.TextArea","Sample:","When using the programmatic API, metadata is prefixed with tcomp::. This prefix is stripped in the web for convenience, and the previous table uses the web keys.","You can also check this example about masking credentials.","Target support should cover org.talend.core.model.process.EParameterFieldType but you need to ensure that the web renderer is able to handle the same widgets.","Methodology for creating components","Generating a project using the starter","Defining an input component","Defining a processor or output component","Registering a component","Internationalizing a component","Loading a component","Masking sensitive data","Best practices","In common cases, you can store messages using a properties file in your component module to use internationalization.","This properties file must be stored in the same package as the related components and named Messages. For example, org.talend.demo.MyComponent uses org.talend.demo.Messages[locale].properties.","This file already exists when you import a project generated from the starter.","Out of the box components are internationalized using the same location logic for the resource bundle. The supported keys are:","Name Pattern","Description","${family}._displayName","Display name of the family","${family}.${category}._category","Display name of the category ${category} in the family ${family}.","${family}.${configurationType}.${name}._displayName","Display name of a configuration type (dataStore or dataSet). Important: this key is read from the family package (not the class package), to unify the localization of the metadata.","${family}.actions.${actionType}.${actionName}._displayName","Display name of an action of the family. Specifying it is optional and will default on the action name if not set.","${family}.${component_name}._displayName","Display name of the component (used by the GUIs)","${property_path}._displayName","Display name of the option.","${simple_class_name}.${property_name}._displayName","Display name of the option using its class name.","${enum_simple_class_name}.${enum_name}._displayName","Display name of the enum_name value of the enum_simple_class_name enumeration.","${property_path}._placeholder","Placeholder of the option.","Example of configuration for a component named list and belonging to the memory family (@Emitter(family = \"memory\", name = \"list\")):","Configuration classes can be translated using the simple class name in the messages properties file. This is useful in case of common configurations shared by multiple components.","For example, if you have a configuration class as follows :","You can give it a translatable display name by adding ${simple_class_name}.${property_name}._displayName to Messages.properties under the same package as the configuration class.","If you have a display name using the property path, it overrides the display name defined using the simple class name. This rule also applies to placeholders.","Generating a project using the starter","Defining component layout and configuration","Masking sensitive data","Best practices","If some changes impact the configuration, they can be managed through a migration handler at the component level (enabling trans-model migration support).","The @Version annotation supports a migrationHandler method which migrates the incoming configuration to the current model.","For example, if the filepath configuration entry from v1 changed to location in v2, you can remap the value in your MigrationHandler implementation.","A best practice is to split migrations into services that you can inject in the migration handler (through constructor) rather than managing all migrations directly in the handler. For example:","What is important to notice in this snippet is the fact that you can organize your migrations the way that best fits your component.","If you need to apply migrations in a specific order, make sure that they are sorted.","Consider this API as a migration callback rather than a migration API. Adjust the migration code structure you need behind the MigrationHandler, based on your component requirements, using service injection.","This tutorial shows how to correctly mask the sensitive data of a component configuration.","It is very common to define credentials when configuring a component. Most common cases can include passwords, secrets, keys (it is also common to show them in plain text in a textarea), and tokens.","For example, this REST client configuration specifies that a username, a password and a token are needed to connect to the REST API:","This configuration defines that these credentials are three simple String, represented as plain inputs, which causes severe security concerns:","The password and token are clearly readable in all Talend user interfaces (Studio or Web),","The password and token are potentially stored in clear.","To avoid this behavior, you need to mark sensitive data as @Credential.","Talend Component Kit provides you with the @Credential marker, that you can use on any @Option. This marker has two effects:","It Replaces the default input widget by a password oriented widget","It Requests the Studio or the Talend Cloud products to store the data as sensitive data (as encrypted values).","In order to ensure that the password and token are never stored in clear or shown in the code, add the @Credential marker to the sensitive data. For example:","Your password and token (or any other sensitive data that you need to mask) are not accessible by error anymore.","Generating a project using the starter","Defining an input component","Defining a processor or output component","Configuring a component","Registering a component","Internationalizing a component","Loading a component","Best practices","Depending on several requirements, including the system capacity and business needs, a processor can process records differently.","For example, for real-time or near-real time processing, it is more interesting to process small batches of data more often. On the other hand, in case of one-time processing, it is more optimal to adapt the way the component handles batches of data according to the system capacity.","By default, the runtime automatically estimates a group size that it considers good, according to the system capacity, to process the data. This group size can sometimes be too big and not optimal for your needs or for your system to handle effectively and correctly.","Users can then customize this size from the component settings in Talend Studio, by specifying a maxBatchSize that adapts the size of each group of data to be processed.","The estimated group size logic is automatically implemented when a component is deployed to a Talend application. Besides defining the @BeforeGroup and @AfterGroup logic detailed below, no action is required on the implementation side of the component.","The component batch processes the data as follows:","Case 1 - No maxBatchSize is specified in the component configuration. The runtime estimates a group size of 4. Records are processed by groups of 4.","Case 2 - The runtime estimates a group size of 4 but a maxBatchSize of 3 is specified in the component configuration. The system adapts the group size to 3. Records are processed by groups of 3.","","Each group is processed as follows until there is no record left:","The @BeforeGroup method resets a record buffer at the beginning of each group.","The records of the group are assessed one by one and placed in the buffer as follows: The @ElementListener method tests if the buffer size is greater or equal to the defined maxBatchSize. If it is, the records are processed. If not, then the current record is buffered.","The previous step happens for all records of the group. Then the @AfterGroup method tests if the buffer is empty.","","You can define the following logic in the processor configuration:","You can learn more about processors in this document.","Defining a processor/output logic","General component execution logic","Implementing bulk processing","Best practices","To develop new components, Talend Component Kit requires a build tool in which you will import the component project generated from the starter.","You will then be able to install and deploy it to Talend applications. A Talend Component Kit plugin is available for each of the supported build tools.","talend-component-maven-plugin helps you write components that match best practices and generate transparently metadata used by Talend Studio.","You can use it as follows:","This plugin is also an extension so you can declare it in your build/extensions block as:","Used as an extension, the goals detailed below will be set up.","You can run the following command from the root of the project, by adapting it with each goal name, parameters and values:","The first goal is a shortcut for the maven-dependency-plugin. It creates the TALEND-INF/dependencies.txt file with the compile and runtime dependencies, allowing the component to use it at runtime:","This goal helps you validate the common programming model of the component. To activate it, you can use following execution definition:","It is bound to the process-classes phase by default. When executed, it performs several validations that can be disabled by setting the corresponding flags to false in the <configuration> block of the execution:","Name","Description","User property","Default","validateInternationalization","Validates that resource bundles are presents and contain commonly used keys (for example, _displayName)","talend.validation.internationalization","true","validateModel","Ensures that components pass validations of the ComponentManager and Talend Component runtime","talend.validation.model","true","validateSerializable","Ensures that components are Serializable. This is a sanity check, the component is not actually serialized here. If you have a doubt, make sure to test it. It also checks that any @Internationalized class is valid and has its keys.","talend.validation.serializable","true","validateMetadata","Ensures that components have an @Icon and a @Version defined.","talend.validation.metadata","true","validateDataStore","Ensures that any @DataStore defines a @HealthCheck and has a unique name.","talend.validation.datastore","true","validateDataSet","Ensures that any @DataSet has a unique name. Also ensures that there is a source instantiable just filling the dataset properties (all others not being required).","talend.validation.dataset","true","validateComponent","Ensures that the native programming model is respected. You can disable it when using another programming model like Beam.","talend.validation.component","true","validateActions","Validates action signatures for actions not tolerating dynamic binding (@HealthCheck, @DynamicValues, and so on). It is recommended to keep it set to true.","talend.validation.action","true","validateFamily","Validates the family by verifying that the package containing the @Components has a @Icon property defined.","talend.validation.family","true","validateDocumentation","Ensures that all components and @Option properties have a documentation using the @Documentation property.","talend.validation.documentation","true","validateLayout","Ensures that the layout is referencing existing options and properties.","talend.validation.layout","true","validateOptionNames","Ensures that the option names are compliant with the framework. It is highly recommended and safer to keep it set to true.","talend.validation.options","true","The asciidoc goal generates an Asciidoc file documenting your component from the configuration model (@Option) and the @Documentation property that you can add to options and to the component itself.","Name","Description","User property","Default","level","Level of the root title.","talend.documentation.level","2 (==)","output","Output folder path. It is recommended to keep it to the default value.","talend.documentation.output","${classes}/TALEND-INF/documentation.adoc","formats","Map of the renderings to do. Keys are the format (pdf or html) and values the output paths.","talend.documentation.formats","-","attributes","Asciidoctor attributes to use for the rendering when formats is set.","talend.documentation.attributes","-","templateEngine","Template engine configuration for the rendering.","talend.documentation.templateEngine","-","templateDir","Template directory for the rendering.","talend.documentation.templateDir","-","title","Document title.","talend.documentation.title","${project.name}","version","The component version. It defaults to the pom version","talend.documentation.version","${project.version}","workDir","The template directory for the Asciidoctor rendering - if 'formats' is set.","talend.documentation.workdDir","${project.build.directory}/talend-component/workdir","attachDocumentations","Allows to attach (and deploy) the documentations (.adoc, and formats keys) to the project.","talend.documentation.attach","true","htmlAndPdf","If you use the plugin as an extension, you can add this property and set it to true in your project to automatically get HTML and PDF renderings of the documentation.","talend.documentation.htmlAndPdf","false","To render the generated documentation in HTML or PDF, you can use the Asciidoctor Maven plugin (or Gradle equivalent). You can configure both executions if you want both HTML and PDF renderings.","Make sure to execute the rendering after the documentation generation.","If you prefer a HTML rendering, you can configure the following execution in the asciidoctor plugin. The example below:","Generates the components documentation in target/classes/TALEND-INF/documentation.adoc.","Renders the documentation as an HTML file stored in target/documentation/documentation.html.","If you prefer a PDF rendering, you can configure the following execution in the asciidoctor plugin:","If you want to add some more content or a title, you can include the generated document into another document using Asciidoc include directive.","For example:","To be able to do that, you need to pass the generated_doc attribute to the plugin. For example:","This is optional but allows to reuse Maven placeholders to pass paths, which can be convenient in an automated build.","You can find more customization options on Asciidoctor website.","Testing the rendering of your component configuration into the Studio requires deploying the component in Talend Studio. Refer to the Studio documentation.","In the case where you need to deploy your component into a Cloud (web) environment, you can test its web rendering by using the web goal of the plugin:","Run the mvn talend-component:web command.","Open the following URL in a web browser: localhost:8080.","Select the component form you want to see from the treeview on the left. The selected form is displayed on the right.","Two parameters are available with the plugin:","serverPort, which allows to change the default port (8080) of the embedded server. Its associated user property is talend.web.port.","serverArguments, that you can use to pass Meecrowave options to the server. Learn more about that configuration at openwebbeans.apache.org/meecrowave/meecrowave-core/cli.html.","Make sure to install the artifact before using this command because it reads the component JAR from the local Maven repository.","The Mojo generate (Maven plugin goal) of the same plugin also embeds a generator that you can use to bootstrap any input or output component:","It is intended to be used from the command line (or IDE Maven integration) as follows:","For this command to work, you need to register the plugin as follows:","Component ARchive (.car) is the way to bundle a component to share it in the Talend ecosystem. It is a plain Java ARchive (.jar) containing a metadata file and a nested Maven repository containing the component and its depenencies.","This command creates a .car file in your build directory. This file can be shared on Talend platforms.","This command has some optional parameters:","Name","Description","User property","Default","attach","Specifies whether the component should archive should be attached.","talend.car.attach","true","classifier","The classifier to use if attach is set to true.","talend.car.attach","component","metadata","Additional custom metadata to bundle in the component archive.","-","-","output","Specifies the output path and name of the archive","talend.car.output","${project.build.directory}/${project.build.finalName}.car","packaging","Specifies the packaging","-","${project.packaging}","This CAR is executable and exposes the studio-deploy command which takes a Talend Studio home path as parameter. When executed, it installs the dependencies into the Studio and registers the component in your instance. For example:","You can also upload the dependencies to your Nexus server using the following command:","In this command, Nexus URL and repository name are mandatory arguments. All other arguments are optional. If arguments contain spaces or special symbols, you need to quote the whole value of the argument. For example:","The deploy-in-studio goal deploys the current component module into a local Talend Studio instance.","Name","Description","User property","Default","studioHome","Path to the Studio home directory","talend.component.studioHome","-","You can use the following command from the root folder of your project:","The help goal displays help information on talend-component-maven-plugin. Call mvn talend-component:help -Ddetail=true -Dgoal=<goal-name> to display the parameter details of a specific goal.","Name","Description","User property","Default","detail","Displays all settable properties for each goal.","detail","false","goal","The name of the goal for which to show help. If unspecified, all goals are displayed.","goal","-","indentSize","Number of spaces per indentation level. This integer should be positive.","indentSize","2","lineLength","Maximum length of a display line. This integer should be positive.","lineLength","80","Best practices","Building components with Gradle","Integrating to the Studio","To develop new components, Talend Component Kit requires a build tool in which you will import the component project generated from the starter. With this build tool, you will also be able to implement the logic of your component and to install and deploy it to Talend applications. A Talend Component Kit plugin is available for each of the supported build tools.","gradle-talend-component helps you write components that match the best practices. It is inspired from the Maven plugin and adds the ability to generate automatically the dependencies.txt file used by the SDK to build the component classpath. For more information on the configuration, refer to the Maven properties matching the attributes.","You can use it as follows:","Best practices","Building components with Maven","Integrating to the Studio","This part is limited to specific kinds of Beam PTransform:","PTransform<PBegin, PCollection<?>> for inputs.","PTransform<PCollection<?>, PDone> for outputs. Outputs must use a single (composite or not) DoFn in their apply method.","To illustrate the input wrapping, this procedure uses the following input as a starting point (based on existing Beam inputs):","To wrap the Read in a framework component, create a transform delegating to that Read with at least a @PartitionMapper annotation and using @Option constructor injections to configure the component. Also make sure to follow the best practices and to specify @Icon and @Version.","To illustrate the output wrapping, this procedure uses the following output as a starting point (based on existing Beam outputs):","You can wrap this output exactly the same way you wrap an input, but using @Processor instead of:","Note that the org.talend.sdk.component.runtime.beam.transform.DelegatingTransform class fully delegates the \"expansion\" to another transform. Therefore, you can extend it and implement the configuration mapping:","In terms of classloading, when you write an I/O, the Beam SDK Java core stack is assumed as provided in Talend Component Kit runtime. This way, you don’t need to include it in the compile scope, it would be ignored anyway.","If you need a JSonCoder, you can use the org.talend.sdk.component.runtime.beam.factory.service.PluginCoderFactory service, which gives you access to the JSON-P and JSON-B coders.","There is also an Avro coder, which uses the FileContainer. It ensures it is self-contained for IndexedRecord and it does not require—as the default Apache Beam AvroCoder—to set the schema when creating a pipeline. It consumes more space and therefore is slightly slower, but it is fine for DoFn, since it does not rely on serialization in most cases. See org.talend.sdk.component.runtime.beam.transform.avro.IndexedRecordCoder.","The mainstream model is JsonObject but it is common to have a legacy system using IndexedRecord. To mitigate the transition, you can use the following PTransforms:","IndexedRecordToJson: to convert an IndexedRecord to a JsonObject.","JsonToIndexedRecord: to convert a JsonObject to an IndexedRecord.","SchemalessJsonToIndexedRecord: to convert a JsonObject to an IndexedRecord with AVRO schema inference.","Because the Beam wrapper does not respect the standard Talend Component Kit programming model ( for example, there is no @Emitter), you need to set the <talend.validation.component>false</talend.validation.component> property in your pom.xml file (or equivalent for Gradle) to skip the component programming model validations of the framework.","Defining an input component","Defining a processor or output component","Creating a job pipeline","Beam testing","Testing in multiple environments","Some recommendations apply to the way component packages are organized:","Make sure to create a package-info.java file with the component family/categories at the root of your component package:","Create a package for the configuration.","Create a package for the actions.","Create a package for the component and one sub-package by type of component (input, output, processors, and so on).","It is recommended to serialize your configuration in order to be able to pass it through other components.","When building a new component, the first step is to identify the way it must be configured.","The two main concepts are:","The DataStore which is the way you can access the backend.","The DataSet which is the way you interact with the backend.","For example:","Example description","DataStore","DataSet","Accessing a relational database like MySQL","JDBC driver, URL, username, password","Query to execute, row mapper, and so on.","Accessing a file system","File pattern (or directory + file extension/prefix/…)","File format, buffer size, and so on.","It is common to have the dataset including the datastore, because both are required to work. However, it is recommended to replace this pattern by defining both dataset and datastore in a higher level configuration model. For example:","Input and output components are particular because they can be linked to a set of actions. It is recommended to wire all the actions you can apply to ensure the consumers of your component can provide a rich experience to their users.","The most common actions are the following ones:","Type","Action","Description","Configuration example","Action example","DataStore","@Checkable","Exposes a way to ensure the datastore/connection works","Until the studio integration is complete, it is recommended to limit processors to one input.","Configuring processor components is simpler than configuring input and output components because it is specific for each component. For example, a mapper takes the mapping between the input and output models:","It is recommended to provide as much information as possible to let the UI work with the data during its edition.","Light validations are all the validations you can execute on the client side. They are listed in the UI hint section.","Use light validations first before going with custom validations because they are more efficient.","Custom validations enforce custom code to be executed, they are more heavy to process, so prefer using light validations when possible.","Define an action with the parameters needed for the validation and link the option you want to validate to this action. For example, to validate a dataset for a JDBC driver:","You can also define a Validable class and use it to validate a form by setting it on your whole configuration:","The parameter binding of the validation method uses the same logic as the component configuration injection. Therefore, the @Option method specifies the prefix to use to reference a parameter. It is recommended to use @Option(\"value\") until you know exactly why you don’t use it. This way, the consumer can match the configuration model and just prefix it with value. to send the instance to validate.","It can be handy and user-friendly to provide completion on some fields. For example, to define completion for available drivers:","Each component must have its own icon:","You can use talend.surge.sh/icons/ to find the icon you want to use.","It is recommended to enforce the version of your component, event though it is not mandatory for the first version.","If you break a configuration entry in a later version; make sure to:","Upgrade the version.","Support a migration of the configuration.","Testing your components is critical. You can use unit and simple standalone JUnit tests, but it is also highly recommended to have Beam tests in order to make sure that your component works in Big Data.","Generating a project using the starter","Defining an input component","Defining a processor or output component","Configuring a component","Registering a component","Internationalizing a component","Loading a component","Masking sensitive data","Defining services","Testing components","Talend Component scanning is based on plugins. To make sure that plugins can be developed in parallel and avoid conflicts, they need to be isolated (component or group of components in a single jar/plugin).","Multiple options are available:","Graph classloading: this option allows you to link the plugins and dependencies together dynamically in any direction. For example, the graph classloading can be illustrated by OSGi containers.","Tree classloading: a shared classloader inherited by plugin classloaders. However, plugin classloader classes are not seen by the shared classloader, nor by other plugins. For example, the tree classloading is commonly used by Servlet containers where plugins are web applications.","Flat classpath: listed for completeness but rejected by design because it doesn’t comply with this requirement.","In order to avoid much complexity added by this layer, Talend Component Kit relies on a tree classloading. The advantage is that you don’t need to define the relationship with other plugins/dependencies, because it is built-in.","Here is a representation of this solution:","","The shared area contains Talend Component Kit API, which only contains by default the classes shared by the plugins.","Then, each plugin is loaded with its own classloader and dependencies.","This section explains the overall way to handle dependencies but the Talend Maven plugin provides a shortcut for that.","A plugin is a JAR file that was enriched with the list of its dependencies. By default, Talend Component Kit runtime is able to read the output of maven-dependency-plugin in TALEND-INF/dependencies.txt. You just need to make sure that your component defines the following plugin:","Once build, check the JAR file and look for the following lines:","What is important to see is the scope related to the artifacts:","The APIs (component-api and geronimo-annotation_1.3_spec) are provided because you can consider them to be there when executing (they come with the framework).","Your specific dependencies (awesome-project in the example above) are marked as compile: they are included as needed dependencies by the framework (note that using runtime works too).","the other dependencies are ignored. For example, test dependencies.","Even if a flat classpath deployment is possible, it is not recommended because it would then reduce the capabilities of the components.","The way the framework resolves dependencies is based on a local Maven repository layout. As a quick reminder, it looks like:","This is all the layout the framework uses. The logic converts t-uple {groupId, artifactId, version, type (jar)} to the path in the repository.","Talend Component Kit runtime has two ways to find an artifact:","From the file system based on a configured Maven 2 repository.","From a fat JAR (uber JAR) with a nested Maven repository under MAVEN-INF/repository.","The first option uses either ${user.home}/.m2/repository default) or a specific path configured when creating a ComponentManager. The nested repository option needs some configuration during the packaging to ensure the repository is correctly created.","To create the nested MAVEN-INF/repository repository, you can use the nested-maven-repository extension:","Plugins are usually programmatically registered. If you want to make some of them automatically available, you need to generate a TALEND-INF/plugins.properties file that maps a plugin name to coordinates found with the Maven mechanism described above.","You can enrich maven-shade-plugin to do it:","Here is a final job/application bundle based on maven-shade-plugin:","The configuration unrelated to transformers depends on your application.","ContainerDependenciesTransformer embeds a Maven repository and PluginTransformer to create a file that lists (one per line) artifacts (representing plugins).","Both transformers share most of their configuration:","session: must be set to ${session}. This is used to retrieve dependencies.","scope: a comma-separated list of scopes to include in the artifact filtering (note that the default will rely on provided but you can replace it by compile, runtime, runtime+compile, runtime+system or test).","include: a comma-separated list of artifacts to include in the artifact filtering.","exclude: a comma-separated list of artifacts to exclude in the artifact filtering.","userArtifacts: a list of artifacts (groupId, artifactId, version, type - optional, file - optional for plugin transformer, scope - optional) which can be forced inline. This parameter is mainly useful for PluginTransformer.","includeTransitiveDependencies: should transitive dependencies of the components be included. Set to true by default.","includeProjectComponentDependencies: should project component dependencies be included. Set to false by default. It is not needed when a job project uses isolation for components.","userArtifacts: set of component artifacts to include.","With the component tooling, it is recommended to keep default locations. Also if you need to use project dependencies, you can need to refactor your project structure to ensure component isolation. Talend Component Kit lets you handle that part but the recommended practice is to use userArtifacts for the components instead of project <dependencies>.","ContainerDependenciesTransformer specific configuration is as follows:","repositoryBase: base repository location (MAVEN-INF/repository by default).","ignoredPaths: a comma-separated list of folders not to create in the output JAR. This is common for folders already created by other transformers/build parts.","ContainerDependenciesTransformer specific configuration is the following one:","pluginListResource: base repository location (default to TALEND-INF/plugins.properties`).","For example, if you want to list only the plugins you use, you can configure this transformer as follows:","The framework uses two kind of filterings when scanning your component. One based on the JAR name and one based on the package name. Make sure that your component definitions (including services) are in a scanned module if they are not registered manually using ComponentManager.instance().addPlugin(), and that the component package is not excluded.","To find components the framework can scan the classpath but in this case, to avoid to scan the whole classpath which can be really huge an impacts a lot the startup time, several jars are excluded out of the box.","These jars use the following prefix:","ApacheJMeter","FastInfoset","HdrHistogram","HikariCP","PDFBox","RoaringBitmap-","XmlSchema-","accessors-smart","activation-","activeio-","activemq-","aeron","aether-","agrona","akka-","animal-sniffer-annotation","annotation","ant-","antlr-","antlr4-","aopalliance-","apache-el","apache-mime4j","apacheds-","api-asn1-","api-common-","api-util-","apiguardian-api-","app-","archaius-core","args4j-","arquillian-","asciidoctorj-","asm-","aspectj","async-http-client-","auto-value-","autoschema-","avalon-framework-","avro-","avro4s-","awaitility-","aws-","axis-","axis2-","base64-","batchee-jbatch","batik-","bcmail","bcpkix","bcprov-","beam-model-","beam-runners-","beam-sdks-","bigtable-client-","bigtable-protos-","boilerpipe-","bonecp","bootstrap.jar","brave-","bsf-","build-link","bval","byte-buddy","c3p0-","cache","carrier","cassandra-driver-core","catalina-","catalina.jar","cats","cdi-","cglib-","charsets.jar","chill","classindex","classmate","classutil","classycle","cldrdata","commands-","common-","commons-","component-api","component-form","component-runtime","component-server","component-spi","component-studio","components-adapter-beam","components-api","components-common","compress-lzf","config","constructr","container-core","contenttype","coverage-agent","cryptacular-","cssparser-","curator-","curvesapi-","cxf-","daikon","databinding","dataquality","dataset-","datastore-","debugger-agent","deltaspike-","deploy.jar","derby-","derbyclient-","derbynet-","dnsns","dom4j","draw2d","easymock-","ecj-","eclipselink-","ehcache-","el-api","enumeratum","enunciate-core-annotations","error_prone_annotations","expressions","fastutil","feign-core","feign-hystrix","feign-slf4j","filters-helpers","findbugs-","fluent-hc","fluentlenium-core","fontbox","freemarker-","fusemq-leveldb-","gax-","gcsio-","gef-","geocoder","geronimo-","gmbal","google-","gpars-","gragent.jar","graph","grizzled-scala","grizzly-","groovy-","grpc-","gson-","guava-","guice-","h2-","hadoop-","hamcrest-","hawtbuf-","hawtdispatch-","hawtio-","hawtjni-runtime","help-","hibernate-","hk2-","howl-","hsqldb-","htmlunit-","htrace-","httpclient-","httpcore-","httpmime","hystrix","iban4j-","icu4j-","idb-","idea_rt.jar","instrumentation-api","ion-java","isoparser-","istack-commons-runtime-","ivy-","j2objc-annotations","jBCrypt","jaccess","jackcess-","jackson-","janino-","jansi-","jasper-el.jar","jasper.jar","jasypt-","java-atk-wrapper","java-libpst-","java-support-","java-xmlbuilder-","javacsv","javaee-","javaee-api","javassist-","javaws.jar","javax.","jaxb-","jaxp-","jbake-","jboss-","jbossall-","jbosscx-","jbossjts-","jbosssx-","jcache","jce.jar","jcip-annotations","jcl-over-slf4j-","jcommander-","jdbcdslog-1","jempbox","jersey-","jets3t","jettison-","jetty-","jface","jfairy","jffi","jfr.jar","jfxrt.jar","jfxswt","jhighlight","jjwt","jline","jmatio-","jmdns-","jmespath-","jms","jmustache","jna-","jnr-","jobs-","joda-convert","joda-time-","johnzon-","jolokia-","jopt-simple","jruby-","json-","json4s-","jsonb-api","jsoup-","jsp-api","jsr","jsse.jar","jta","jul-to-slf4j-","juli-","junit-","junit5-","juniversalchardet","junrar-","jwt","jython","kafka","kahadb-","kotlin-runtime","kryo","leveldb","libphonenumber","lift-json","lmdbjava","localedata","log4j-","logback","logging-event-layout","logkit-","lombok","lucene","lz4","machinist","macro-compat","mail-","management-","mapstruct-","maven-","mbean-annotation-api-","meecrowave-","mesos-","metadata-extractor-","metrics-","microprofile-config-api-","mimepull-","mina-","minlog","mockito-core","mqtt-client-","multitenant-core","multiverse-core-","mx4j-","myfaces-","mysql-connector-java-","nashorn","neethi-","neko-htmlunit","nekohtml-","netflix","netty-","nimbus-jose-jwt","objenesis-","okhttp","okio","opencensus-","openjpa-","openmdx-","opennlp-","opensaml-","opentest4j-","openwebbeans-","openws-","ops4j-","org.apache.aries","org.apache.commons","org.apache.log4j","org.eclipse.","org.junit.","org.osgi.core-","org.osgi.enterprise","org.talend","orient-commons-","orientdb-core-","orientdb-nativeos-","oro-","osgi","paranamer","parquet","pax-url","pdfbox","play","plexus-","plugin.jar","poi-","postgresql","preferences-","prefixmapper","proto-","protobuf-","py4j-","pyrolite-","qdox-","quartz-2","quartz-openejb-","reactive-streams","reflectasm-","reflections","regexp-","registry-","resources.jar","rhino","ribbon","rmock-","rome","routes-compiler","routines","rt.jar","runners","runtime-","rxjava","rxnetty","saaj-","sac-","scala","scalap","scalatest","scannotation-","selenium","serializer-","serp-","service-common","servlet-api-","servo-","shaded","shapeless","shrinkwrap-","sisu-guice","sisu-inject","slf4j-","slick","smack-","smackx-","snakeyaml-","snappy-","spark-","specs2","spring-","sshd-","ssl-config-core","stax-api-","stax2-api-","stream","sunec.jar","sunjce_provider","sunpkcs11","surefire-","swagger-","swizzle-","sxc-","system-rules","tachyon-","tagsoup-","talend-icon","test-agent","test-interface","testng-","threetenbp","tika-","tomcat","tomee-","tools.jar","twirl","twitter4j-","tyrex","uncommons","unused","util","validation-api-","velocity-","wagon-","wandou","webbeans-","websocket","woodstox-core","workbench","ws-commons-util-","wsdl4j-","wss4j-","wstx-asl-","xalan-","xbean-","xercesImpl-","xlsx-streamer-","xml-apis-","xml-resolver-","xmlbeans-","xmlenc-","xmlgraphics-","xmlpcore","xmlpull-","xmlrpc-","xmlschema-","xmlsec-","xmltooling-","xmlunit-","xstream-","xz-","zipfs.jar","zipkin-","ziplock-","zkclient","zookeeper-","Since the framework can be used in the case of fatjars or shades, and because it still uses scanning, it is important to ensure we don’t scan the whole classes for performances reason.","Therefore, the following packages are ignored:","avro.shaded","com.codehale.metrics","com.ctc.wstx","com.datastax.driver.core","com.fasterxml.jackson.annotation","com.fasterxml.jackson.core","com.fasterxml.jackson.databind","com.fasterxml.jackson.dataformat","com.fasterxml.jackson.module","com.google.common","com.google.thirdparty","com.ibm.wsdl","com.jcraft.jsch","com.kenai.jffi","com.kenai.jnr","com.sun.istack","com.sun.xml.bind","com.sun.xml.messaging.saaj","com.sun.xml.txw2","com.thoughtworks","io.jsonwebtoken","io.netty","io.swagger.annotations","io.swagger.config","io.swagger.converter","io.swagger.core","io.swagger.jackson","io.swagger.jaxrs","io.swagger.model","io.swagger.models","io.swagger.util","javax","jnr","junit","net.sf.ehcache","net.shibboleth.utilities.java.support","org.aeonbits.owner","org.apache.activemq","org.apache.beam","org.apache.bval","org.apache.camel","org.apache.catalina","org.apache.commons.beanutils","org.apache.commons.cli","org.apache.commons.codec","org.apache.commons.collections","org.apache.commons.compress","org.apache.commons.dbcp2","org.apache.commons.digester","org.apache.commons.io","org.apache.commons.jcs.access","org.apache.commons.jcs.admin","org.apache.commons.jcs.auxiliary","org.apache.commons.jcs.engine","org.apache.commons.jcs.io","org.apache.commons.jcs.utils","org.apache.commons.lang","org.apache.commons.lang3","org.apache.commons.logging","org.apache.commons.pool2","org.apache.coyote","org.apache.cxf","org.apache.geronimo.javamail","org.apache.geronimo.mail","org.apache.geronimo.osgi","org.apache.geronimo.specs","org.apache.http","org.apache.jcp","org.apache.johnzon","org.apache.juli","org.apache.logging.log4j.core","org.apache.logging.log4j.jul","org.apache.logging.log4j.util","org.apache.logging.slf4j","org.apache.meecrowave","org.apache.myfaces","org.apache.naming","org.apache.neethi","org.apache.openejb","org.apache.openjpa","org.apache.oro","org.apache.tomcat","org.apache.tomee","org.apache.velocity","org.apache.webbeans","org.apache.ws","org.apache.wss4j","org.apache.xbean","org.apache.xml","org.apache.xml.resolver","org.bouncycastle","org.codehaus.jackson","org.codehaus.stax2","org.codehaus.swizzle.Grep","org.codehaus.swizzle.Lexer","org.cryptacular","org.eclipse.jdt.core","org.eclipse.jdt.internal","org.fusesource.hawtbuf","org.h2","org.hamcrest","org.hsqldb","org.jasypt","org.jboss.marshalling","org.joda.time","org.jose4j","org.junit","org.jvnet.mimepull","org.metatype.sxc","org.objectweb.asm","org.objectweb.howl","org.openejb","org.opensaml","org.slf4j","org.swizzle","org.terracotta.context","org.terracotta.entity","org.terracotta.modules.ehcache","org.terracotta.statistics","org.tukaani","org.yaml.snakeyaml","serp","it is not recommanded but possible to add in your plugin module a TALEND-INF/scanning.properties file with classloader.includes and classloader.excludes entries to refine the scanning with custom rules. In such a case, exclusions win over inclusions.","Generating a project using the starter","Defining an input component","Defining a processor or output component","Defining component layout and configuration","Registering a component","Internationalizing a component","Masking sensitive data","Best practices"]},{"lang":"en","title":"Installing the Talend Component Kit IntelliJ plugin","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/installing-talend-intellij-plugin.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Installing the Talend Component Kit IntelliJ plugin","In this article"],"lvl1":["Installing the IntelliJ plugin","About the internationalization completion","Related articles"],"text":["The Talend Component Kit IntelliJ plugin is a plugin for the IntelliJ Java IDE. It adds support for the Talend Component Kit project creation.","Main features:","Project generation support.","Internationalization completion for component configuration.","In the Intellij IDEA:","Go to File > Settings…","On the left panel, select Plugins.","Select Browse repositories…","Enter Talend in the search field and choose Talend Component Kit - Intellij Plugin.","Select Install on the right.","Click the Restart IntelliJ IDEA button.","Confirm the IDEA restart to complete the installation.","The plugin is now installed on your IntelliJ IDEA. You can start using it.","The plugin offers auto-completion for the configuration internationalization. The Talend component configuration lets you setup translatable and user-friendly labels for your configuration using a property file. Auto-completion in possible for the configuration keys and default values in the property file.","For example, you can internationalize a simple configuration class for a basic authentication that you use in your component:","This configuration class contains three properties which you can attach a user-friendly label to.","For example, you can define a label like My server URL for the url option:","Create a Messages.properties file in the project resources and add the label to that file. The plugin automatically detects your configuration and provides you with key completion in the property file.","Press Ctrl+Space to see the key suggestions.","System requirements","Generating a project using the IntelliJ plugin"]},{"lang":"en","title":"Integrating components into Talend Cloud","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-cloud-integration.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Integrating components into Talend Cloud","In this article"],"lvl1":["Component server and HTTP API","UiSpec Server"],"lvl2":["HTTP API","HTTPS activation","Web forms and REST API","Logging","UiSpec Server","Docker","Coordinates","Configuring the UiSpec server","HTTP API","Configuring the server module","Services"],"lvl3":["Component Server API","Deprecated endpoints","WebSocket transport","Using the UiSpec model without the tooling","JavaScript integration","Coordinates","Configuring the UiSpec server","HTTP API","Configuring the server module","Services","Run","Configure","Maven repository","Logging","Build the image yourself","Adding custom entries to the forms","Adding custom converters (selecting the widget or rendering)","Enabling help/hints","Client in Play","Defining a dropdown with all root configurations","Populate a dropdown from a remote call","Populate a dropdown with a list of references","Reloading the form based on the selected root","Reloading the form based on a selected entity reference","Component UiSpec Server"],"text":["Learn about the component server with the following articles:","Component server and HTTP API","For more advanced cases, you can check the UiSpec Server documentation. The UiSpec server is a companion application for the Component Server. It provides a client to the Component Server which serves UiSpec payload to integrate with the client JavaScript UiForm library.","UiSpec Server","A test environment is available on Heroku and can be browsed using Talend Component Kit Server instance on Restlet Studio.","The HTTP API intends to expose most Talend Component Kit features over HTTP. It is a standalone Java HTTP server.","The WebSocket protocol is activated for the endpoints. Endpoints then use /websocket/v1 as base instead of /api/v1. See WebSocket for more details.","Here is the API:","To make sure that the migration can be enabled, you need to set the version the component was created with in the execution configuration that you send to the server (component version is in component the detail endpoint). To do that, use tcomp::component::version key.","Endpoints that are intended to disappear will be deprecated. A X-Talend-Warning header will be returned with a message as value.","You can connect yo any endpoint by:","Replacing /api with /websocket","Appending /<http method> to the URL","Formatting the request as:","For example:","The response is formatted as follows:","All endpoints are logged at startup. You can then find them in the logs if you have a doubt about which one to use.","If you don’t want to create a pool of connections per endpoint/verb, you can use the bus endpoint: /websocket/v1/bus. This endpoint requires that you add the destinationMethod header to each request with the verb value (GET by default):","Using the server ZIP (or Docker image), you can configure HTTPS by adding properties to MEECROWAVE_OPTS. Assuming that you have a certificate in /opt/certificates/component.p12 (don’t forget to add/mount it in the Docker image if you use it), you can activate it as follows:","The component-form library provides a way to build a component REST API facade that is compatible with React form library.","for example:","the Client can be created using ClientFactory.createDefault(System.getProperty(\"app.components.base\", \"http://localhost:8080/api/v1\")) and the service can be a simple new UiSpecService<>(). The factory uses JAX-RS if the API is available (assuming a JSON-B provider is registered). Otherwise, it tries to use Spring.","The conversion from the component model (REST API) to the uiSpec model is done through UiSpecService. It is based on the object model which is mapped to a UI model. Having a flat model in the component REST API allows to customize layers easily.","You can completely control the available components, tune the rendering by switching the uiSchema, and add or remove parts of the form. You can also add custom actions and buttons for specific needs of the application.","The /migrate endpoint was not shown in the previous snippet but if you need it, add it as well.","This Maven dependency provides the UISpec model classes. You can use the Ui API (with or without the builders) to create UiSpec representations.","For Example:","The model uses the JSON-B API to define the binding. Make sure to have an implementation in your classpath. To do that, add the following dependencies:","component-kit.js is no more available (previous versions stay on NPM) since it got replaced by @talend/react-containers. The previous import can be replaced by import kit from '@talend/react-containers/lib/ComponentForm/kit';.","Default JavaScript integration goes through the Talend UI Forms library and its Containers wrapper.","Documentation is now available on the previous link.","The logging uses Log4j2. You can specify a custom configuration by using the -Dlog4j.configurationFile system property or by adding a log4j2.xml file to the classpath.","Here are some common configurations:","Console logging:","Output messages look like:","JSON logging:","Output messages look like:","Rolling file appender:","More details are available in the RollingFileAppender documentation.","You can compose previous layout (message format) and appenders (where logs are written).","The UiSpec server is a companion application for the Component Server. It provides a client to the Component Server which serves UiSpec payload to integrate with the client JavaScript UiForm library.","the configuration is read from system properties, environment variables, …. If you use playx-microprofile-config, you can also use typesafe configuration.","Key","Description","Default","talend.component.proxy.actions.proposable.cached","If true the proposable (suggestion lists only depending on the server state) will be cached, otherwise they will be requested for each form rendering.","true","talend.component.proxy.application.home","A home location for relative path resolution (optional).","${playx.application.home}","talend.component.proxy.client.executor.threads","For the client executor, the number of threads.","64","talend.component.proxy.client.providers","List of JAX-RS providers to register on the client, at least a JSON-B one should be here.","-","talend.component.proxy.client.timeouts.connect","The connect timeout for the communication with the server.base in ms.","60000","talend.component.proxy.client.timeouts.read","The read timeout for the communication with the server.base in ms.","600000","talend.component.proxy.jcache.active","Should the server use jcache to store catalog information and refresh it with some polling. If so the keys talend.component.proxy.jcache.caches.$cacheName.expiry.duration, talend.component.proxy.jcache.caches.$cacheName.management.active and talend.component.proxy.jcache.caches.$cacheName.statistics.active will be read to create a JCache MutableConfiguration. Also note that if all the cachesshare the same configuration you can ignore the $cacheName layer.","true","talend.component.proxy.jcache.cache-key.name","A header to use in the cache key (to represent a tenant or equivalent).","-","talend.component.proxy.jcache.provider","Caching provider implementation to use (only set it if ambiguous).","-","talend.component.proxy.jcache.refresh.period","Number of seconds used to check if the server must be refreshed.","60","talend.component.proxy.processing.headers","The headers to append to the request when contacting the server. Format is a properties one. You can put a hardcoded value or a placeholder (${key}).In this case it will be read from the request attributes and headers.","-","talend.component.proxy.processing.uiSpec.patch","An optional location (absolute or resolved from APP_HOME environment variable). It can take an optional query parameter force which specifies if the startup should fail if the file is not resolved. The resolution is done per configuration type (datastore, dataset, …) but fallbacks on default type if the file is not found.","The values can be keys in the resource bundle org.talend.sdk.component.proxy.enrichment.i18n.Messages. Use that for display names, placeholders etc…The content","component-uispec-metadata.%s.json?force=false","talend.component.proxy.server.base","The base to contact the remote server (NOTE: it is recommanded to put a load balancer if you have multiple instances.)","-","As shown in the table above, you can customize the forms by type. The format reuses Talend Component Kit HTTP API (properties model) and defines two main types of extensions:","prependProperties: Lists all the models of properties added to the form before the actual underlying form.","appendProperties: Lists all the models of properties added to the form after the actual underlying form.","If you don’t specify a name, the path is used to deduce the name automatically.","Always make sure to define a root object for these properties. Do not use dots in the path value. It is recommended to prefix it with a $ character.","When developing a org.talend.sdk.component.form.internal.converter.CustomPropertyConverter CDI, the proxy adds it to the UiSpecService service and uses it with a high priority to convert the server model to a UiSpec model.","To make it a CDI bean, add @Dependent to the class and if you use the Play integration, customize the bean array: playx.cdi.beans.customs += {className: org.talend.myapp.MyConverter}.","This allows to use a custom @Ui API and advanced modeling when specific to applications. Converters are sorted respecting to the @Priority value. If the annotation is missing, the priority defaults to 0.","It is possible to show under the inputs the help about each property. To do that, you must set a PropertyContext.Configuration instance on UiSpecService with the includeDocumentationMetadata attribute set to true.","The client to use to connect to the Talend Component Kit server is the CXF client, using HttpClient HC (NIO) transport. When you use the Play module, it can be configured with its standard properties prefixed by talend.component.proxy..","You can find more information on CXF website.","The special dynamic_values action builtin::roots can be used for a dropdown filled with all available root types.","Here is a sample patch file:","In some cases you will want to call a remote service giving you a list of data. For that there is a specific http builtin trigger which will be caught on the proxy and redirected to the configured server to map it as a dynamic_values trigger.","Assume you want to call http:://foo.com/bar propagating the cookies to get the proposals for the entry bar, then you will configure it this way:","The configuration of the call is passed through a comma separated list in parenthesis as seen in previous snippet. The configuration entries are the following ones:","Name","Description","Sample","url","The target server to call. Note that placeholder are supported and filled from request headers (placeholderProvider).","proposals.service.com","headers","; separated list of headers to propagate (using placeholderProvider).","cookie,Authorization","accept","The Accept header. Note that current we only support to parse JSON output and it defaults to application/json.","application/v1+json","object","Boolean (default to false) to set to true if the response payload is an object and not a list.","true","objectKey","If object is true, the key to extract to get the list to process.","items","id","Name of the field to extract from an item of the response list to map to the identifier of the proposal (default to id).","id","name","Name of the field to extract from an item of the response list to map to the label of the proposal (default to name).","label","In some forms you will want to populate a dropdown with a list of entities available in your database. For that, the proxy will rely on a SPI called Integration. If you don’t implement it, it uses a Guice integration if Guice is in the classpath or a native CDI integration otherwise.","The integration will then let the proxy lookup a ReferenceService implementation which will provide from a configuration type type and name (for instance datastore, MyDataBaseConfig) the list of references you want to propose to the end user.","Here is very simple implementation:","Generally this kind of completion will be activated under the hood by the proxy using this kind of metadata:","In some cases you will want to hide this field if the proposals are ⇐ 1, in this case you can use a condition:","The builtin::root::reloadFromId action, with the reloadForm type, allows to reload the whole form:","It is common to have a dropdown with the list of roots and to reload the form when one is selected.","The client side (javascript) is now fully encapsulated in ComponentForm from @talend/ui.","The builtin::root::reloadFromParentEntityId action, with the reloadFromParentEntityId type, allows to reload the whole form:","references are automatically initialized if you use PropertiesService#filterProperties.","These endpoints allow to obtain UiSpec representations of the component/configuration types properties.","Version : v1","Contact : Talend Contact Email : contact@talend.com","License : Apache 2.0 License URL : www.apache.org/licenses/LICENSE-2.0.html Terms of service : null","Host : host:port BasePath : /componentproxy/api/v1 Schemes : HTTP, HTTPS","action","configuration","configurations","dataset","datastore","form","icon","persistence","ui spec","uispec","configuration types has action that can be executed using this endpoint","Type","Name","Schema","Query","action optional","string","Query","family optional","string","Query","language optional","string","Query","type optional","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","< string, CompletionStageMapStringObject > map","400","This response is returned when the action is null","ProxyErrorPayload","404","This response is returned when no action is found","ProxyErrorPayload","520","This response is returned when the action raise an unhandled error","ProxyErrorPayload","application/json","application/json","action","configurations","Every configuration has an icon. In the response an icon key is returned. this icon key can be one of the bundled icons or a custom one. The consumer of this endpoint will need to check if the icon key is in the icons bundle otherwise the icon need to be gathered using the familyId from this endpoint configurations/{id}/icon","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","datastore","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","UiNode","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","CompletionStageByte[]","application/json","application/json","application/octet-stream","icon","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","formId required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type : object","Type : object","Type : object","Type : object","Type : object","Type : object","Name","Description","Schema","id optional","The identifier of the entity related to current request. It is generally thecreated entity of updated one.","string","Name","Schema","defaultValue optional","object","description optional","string","enumValues optional","< string > array","id optional","string","items optional","JsonSchema","maxItems optional","integer (int32)","maxLength optional","integer (int32)","maximum optional","number (double)","minItems optional","integer (int32)","minLength optional","integer (int32)","minimum optional","number (double)","pattern optional","string","properties optional","< string, JsonSchema > map","ref optional","string","required optional","< string > array","schema optional","string","title optional","string","type optional","string","uniqueItems optional","boolean","Name","Schema","name optional","string","value optional","string","Name","Description","Schema","children optional","The list of configuration reusing this one as a reference (can be created \"next\").","< string > array","familyId optional","The identifier of the family of this configuration.","string","familyLabel optional","The display name of the family of this configuration.","string","icon optional","The icon of this configuration. If you use an existing bundle (@talend/ui/icon), ensure it is present by default and if not do a request using the family on the related endpoint.","string","id optional","The identifier of this configuration/node.","string","label optional","The display name of this configuration.","string","name optional","The technical name of this node (it is human readable but not i18n friendly), useful for debug purposes.","string","version optional","The version of this configuration for the migration management.","integer (int32)","Name","Description","Schema","nodes optional","The list of nodes matching the request. The key is the node identifier.","< string, Node > map","Name","Schema","path optional","string","type optional","string","Name","Schema","key optional","string","path optional","string","Name","Description","Schema","code optional","The error code independently of the locale and not as precise as a message (not context aware).","string","message optional","A human readable message to help understanding the error","string","Name","Schema","action optional","string","family optional","string","onEvent optional","string","options optional","< Option > array","parameters optional","< Parameter > array","type optional","string","Name","Schema","jsonSchema optional","JsonSchema","properties optional","object","uiSchema optional","< UiSchema > array","Name","Description","Schema","metadata optional","The metadata associated to the node if needed by the UI.","Node","ui optional","The ui specification corresponding to the requested node. It is literally the form representing this configuration.","Ui","Name","Schema","autoFocus optional","boolean","condition optional","< string, < object > array > map","description optional","string","disabled optional","boolean","itemWidget optional","string","items optional","< UiSchema > array","key optional","string","options optional","< string, string > map","placeholder optional","string","readOnly optional","boolean","required optional","boolean","restricted optional","boolean","title optional","string","titleMap optional","< NameValue > array","triggers optional","< Trigger > array","type optional","string","widget optional","string","There are two ways to call the save endpoint. If you don’t want to pass the form identifier and prefer to use a generic endpoint that simply passes the type of configuration you are configuring, then you need to modify your enrichment configuration to ensure that the form identifier is present and to specify which form field it is.","To do that, add the proxyserver::formId Boolean to the metadata:","Only the first property with proxyserver::formId set to \"true\" is used. The path cannot contain any array.","The server module contains several configurations that you can set in:","Environment variables.","System properties.","A file located based on the --component-configuration CLI option.","the configuration is read from system properties, environment variables, ….","Key","Description","Default","talend.component.server.component.coordinates","A comma separated list of gav to locate the components","-","talend.component.server.component.extend.dependencies","Should the component extensions add required dependencies.","true","talend.component.server.component.registry","A property file where the value is a gav of a component to register (complementary with coordinates)","-","talend.component.server.documentation.active","Should the /documentation endpoint be activated.","true","talend.component.server.execution.dataset.retriever.timeout","How long the read execution endpoint can last (max)","180","talend.component.server.execution.pool.size","The size of the execution pool for runtime endpoints.","64","talend.component.server.execution.pool.wait","How long the application waits during shutdown for the execution tasks to complete","PT10S","talend.component.server.jaxrs.exceptionhandler.defaultMessage","If set it will replace any message for exceptions. Set to false to use the actual exception message.","false","talend.component.server.maven.repository","The local maven repository used to locate components and their dependencies","-","talend.component.server.monitoring.brave.reporter.async","When using url or kafka reporter, you can configure the async reporter with properties passed to this configuration entry.Ex: messageTimeout=5000,closeTimeout=5000.","console","talend.component.server.monitoring.brave.reporter.type","The brave reporter to use to send the spans. Supported values are [log, noop]. When configuration is needed,you can use this syntax to configure the repoter if needed: <name>(config1=value1, config2=value2), for example: url(endpoint=http://brave.company.com.","In log mode, if environment variable TRACING_ON doesn’t exist or is set to false, noop will be selected, and is set to true, TRACING_KAFKA_URL, TRACING_KAFKA_TOPIC and TRACING_SAMPLING_RATE will configure kafka reporter..","noop","talend.component.server.monitoring.brave.sampling.action.rate","The accuracy rate of the sampling for action endpoints.","-1","talend.component.server.monitoring.brave.sampling.component.rate","The accuracy rate of the sampling for component endpoints.","-1","talend.component.server.monitoring.brave.sampling.configurationtype.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.documentation.rate","The accuracy rate of the sampling for documentation endpoint.","-1","talend.component.server.monitoring.brave.sampling.environment.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.execution.rate","The accuracy rate of the sampling for execution endpoints.","1","talend.component.server.monitoring.brave.sampling.rate","The accuracy rate of the sampling.","-1.","talend.component.server.monitoring.brave.service.name","The name used by the brave integration (zipkin)","component-server","talend.component.server.security.command.handler","How to validate a command/request. Accepted values: securityNoopHandler.","securityNoopHandler","talend.component.server.security.connection.handler","How to validate a connection. Accepted values: securityNoopHandler.","securityNoopHandler","The module provides some services usable to fulfill some basic requirements of the component interaction:","ConfigurationFormatter to (un)flatten the properties (JSON from/to key-value format)","ConfigurationVisitorService to browse properties and identify credentials to cipher them","ValidationService to validate a JSON properties set before any persistence action","The server image is deployed on Docker. Its version is suffixed with a timestamp to ensure images are not overriden and can break your usage. You can check the available version on Docker hub.","You can run the docker image by executing this command :","You can set the env variable MEECROWAVE_OPTS to customize the server, by default it is installed in /opt/talend/component-kit.","The maven repository is the default one of the machine, you can change it setting the system property talend_component_server_maven_repository=/path/to/your/m2.","If you want to deploy some components you can configure which ones in MEECROWAVE_OPTS (see server doc online) and redirect your local m2:","The component server docker image comes with two log4j2 profile default and kafka. The logging profile can be changed by setting the environment variable TALEND_COMPONENT_LOG4J2_PROFILE to kafka the default profile is active by default.","The default profile has file and console logging capabilities. The console logging is off by default and you can activate it by setting CONSOLE_LOG_LEVEL environment variable to DEBUG, INFO, WARN or any other log level supported by log4j2. In practise and during development you will want to see the logs without connecting to the server by activating console logging.","Run docker image with console logging","Kafka profile let you send log to Kafka servers. The log are formatted in json and follow the layout defined by Talend and described here github.com/Talend/daikon/tree/master/daikon-logging/logging-event-layout","This profile require two environment variables","LOG_KAFKA_TOPIC : Kafka topic.","LOG_KAFKA_URL : A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. This list should be in the form url:port separated by ,","Run docker image with kafka profile","Note : LOG_KAFKA_TOPIC will receive the application and the access logs and TRACING_KAFKA_TOPIC will receive brave tracing logs.","The component server use github.com/openzipkin/brave to monitor request.","The tracing can be activated by setting environment variable TRACING_ON to true.","You can choose the reporter type by setting talend_component_server_monitoring_brave_reporter_type environment variable to log (this is the default value in this docker image) or to noop which will deactivate the tracing. Other type of reporter may be added in the future.","The tracing rate is configurable by setting environment variable TRACING_SAMPLING_RATE. This is the default sample rate for all the endpoints and has a default value of 0.1","You can define more accurate rate for every component server endpoint using those environment variables :","Environment variable","Endpoint","talend_component_server_monitoring_brave_sampling_environment_rate","/api/v1/environment","talend_component_server_monitoring_brave_sampling_configurationtype_rate","/api/v1/configurationtype","talend_component_server_monitoring_brave_sampling_component_rate","/api/v1/component","talend_component_server_monitoring_brave_sampling_documentation_rate","/api/v1/documentation","talend_component_server_monitoring_brave_sampling_action_rate","/api/v1/action","talend_component_server_monitoring_brave_sampling_execution_rate","/api/v1/execution","Run docker image with tracing on","You can build component starter server in docker following those instructions :","this assumes the project is built before you run that command.","The UiSpec server is a companion application for the Component Server. It provides a client to the Component Server which serves UiSpec payload to integrate with the client JavaScript UiForm library.","the configuration is read from system properties, environment variables, …. If you use playx-microprofile-config, you can also use typesafe configuration.","Key","Description","Default","talend.component.proxy.actions.proposable.cached","If true the proposable (suggestion lists only depending on the server state) will be cached, otherwise they will be requested for each form rendering.","true","talend.component.proxy.application.home","A home location for relative path resolution (optional).","${playx.application.home}","talend.component.proxy.client.executor.threads","For the client executor, the number of threads.","64","talend.component.proxy.client.providers","List of JAX-RS providers to register on the client, at least a JSON-B one should be here.","-","talend.component.proxy.client.timeouts.connect","The connect timeout for the communication with the server.base in ms.","60000","talend.component.proxy.client.timeouts.read","The read timeout for the communication with the server.base in ms.","600000","talend.component.proxy.jcache.active","Should the server use jcache to store catalog information and refresh it with some polling. If so the keys talend.component.proxy.jcache.caches.$cacheName.expiry.duration, talend.component.proxy.jcache.caches.$cacheName.management.active and talend.component.proxy.jcache.caches.$cacheName.statistics.active will be read to create a JCache MutableConfiguration. Also note that if all the cachesshare the same configuration you can ignore the $cacheName layer.","true","talend.component.proxy.jcache.cache-key.name","A header to use in the cache key (to represent a tenant or equivalent).","-","talend.component.proxy.jcache.provider","Caching provider implementation to use (only set it if ambiguous).","-","talend.component.proxy.jcache.refresh.period","Number of seconds used to check if the server must be refreshed.","60","talend.component.proxy.processing.headers","The headers to append to the request when contacting the server. Format is a properties one. You can put a hardcoded value or a placeholder (${key}).In this case it will be read from the request attributes and headers.","-","talend.component.proxy.processing.uiSpec.patch","An optional location (absolute or resolved from APP_HOME environment variable). It can take an optional query parameter force which specifies if the startup should fail if the file is not resolved. The resolution is done per configuration type (datastore, dataset, …) but fallbacks on default type if the file is not found.","The values can be keys in the resource bundle org.talend.sdk.component.proxy.enrichment.i18n.Messages. Use that for display names, placeholders etc…The content","component-uispec-metadata.%s.json?force=false","talend.component.proxy.server.base","The base to contact the remote server (NOTE: it is recommanded to put a load balancer if you have multiple instances.)","-","As shown in the table above, you can customize the forms by type. The format reuses Talend Component Kit HTTP API (properties model) and defines two main types of extensions:","prependProperties: Lists all the models of properties added to the form before the actual underlying form.","appendProperties: Lists all the models of properties added to the form after the actual underlying form.","If you don’t specify a name, the path is used to deduce the name automatically.","Always make sure to define a root object for these properties. Do not use dots in the path value. It is recommended to prefix it with a $ character.","When developing a org.talend.sdk.component.form.internal.converter.CustomPropertyConverter CDI, the proxy adds it to the UiSpecService service and uses it with a high priority to convert the server model to a UiSpec model.","To make it a CDI bean, add @Dependent to the class and if you use the Play integration, customize the bean array: playx.cdi.beans.customs += {className: org.talend.myapp.MyConverter}.","This allows to use a custom @Ui API and advanced modeling when specific to applications. Converters are sorted respecting to the @Priority value. If the annotation is missing, the priority defaults to 0.","It is possible to show under the inputs the help about each property. To do that, you must set a PropertyContext.Configuration instance on UiSpecService with the includeDocumentationMetadata attribute set to true.","The client to use to connect to the Talend Component Kit server is the CXF client, using HttpClient HC (NIO) transport. When you use the Play module, it can be configured with its standard properties prefixed by talend.component.proxy..","You can find more information on CXF website.","The special dynamic_values action builtin::roots can be used for a dropdown filled with all available root types.","Here is a sample patch file:","In some cases you will want to call a remote service giving you a list of data. For that there is a specific http builtin trigger which will be caught on the proxy and redirected to the configured server to map it as a dynamic_values trigger.","Assume you want to call http:://foo.com/bar propagating the cookies to get the proposals for the entry bar, then you will configure it this way:","The configuration of the call is passed through a comma separated list in parenthesis as seen in previous snippet. The configuration entries are the following ones:","Name","Description","Sample","url","The target server to call. Note that placeholder are supported and filled from request headers (placeholderProvider).","proposals.service.com","headers","; separated list of headers to propagate (using placeholderProvider).","cookie,Authorization","accept","The Accept header. Note that current we only support to parse JSON output and it defaults to application/json.","application/v1+json","object","Boolean (default to false) to set to true if the response payload is an object and not a list.","true","objectKey","If object is true, the key to extract to get the list to process.","items","id","Name of the field to extract from an item of the response list to map to the identifier of the proposal (default to id).","id","name","Name of the field to extract from an item of the response list to map to the label of the proposal (default to name).","label","In some forms you will want to populate a dropdown with a list of entities available in your database. For that, the proxy will rely on a SPI called Integration. If you don’t implement it, it uses a Guice integration if Guice is in the classpath or a native CDI integration otherwise.","The integration will then let the proxy lookup a ReferenceService implementation which will provide from a configuration type type and name (for instance datastore, MyDataBaseConfig) the list of references you want to propose to the end user.","Here is very simple implementation:","Generally this kind of completion will be activated under the hood by the proxy using this kind of metadata:","In some cases you will want to hide this field if the proposals are ⇐ 1, in this case you can use a condition:","The builtin::root::reloadFromId action, with the reloadForm type, allows to reload the whole form:","It is common to have a dropdown with the list of roots and to reload the form when one is selected.","The client side (javascript) is now fully encapsulated in ComponentForm from @talend/ui.","The builtin::root::reloadFromParentEntityId action, with the reloadFromParentEntityId type, allows to reload the whole form:","references are automatically initialized if you use PropertiesService#filterProperties.","These endpoints allow to obtain UiSpec representations of the component/configuration types properties.","Version : v1","Contact : Talend Contact Email : contact@talend.com","License : Apache 2.0 License URL : www.apache.org/licenses/LICENSE-2.0.html Terms of service : null","Host : host:port BasePath : /componentproxy/api/v1 Schemes : HTTP, HTTPS","action","configuration","configurations","dataset","datastore","form","icon","persistence","ui spec","uispec","configuration types has action that can be executed using this endpoint","Type","Name","Schema","Query","action optional","string","Query","family optional","string","Query","language optional","string","Query","type optional","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","< string, CompletionStageMapStringObject > map","400","This response is returned when the action is null","ProxyErrorPayload","404","This response is returned when no action is found","ProxyErrorPayload","520","This response is returned when the action raise an unhandled error","ProxyErrorPayload","application/json","application/json","action","configurations","Every configuration has an icon. In the response an icon key is returned. this icon key can be one of the bundled icons or a custom one. The consumer of this endpoint will need to check if the icon key is in the icons bundle otherwise the icon need to be gathered using the familyId from this endpoint configurations/{id}/icon","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","datastore","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","UiNode","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","CompletionStageByte[]","application/json","application/json","application/octet-stream","icon","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","formId required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type : object","Type : object","Type : object","Type : object","Type : object","Type : object","Name","Description","Schema","id optional","The identifier of the entity related to current request. It is generally thecreated entity of updated one.","string","Name","Schema","defaultValue optional","object","description optional","string","enumValues optional","< string > array","id optional","string","items optional","JsonSchema","maxItems optional","integer (int32)","maxLength optional","integer (int32)","maximum optional","number (double)","minItems optional","integer (int32)","minLength optional","integer (int32)","minimum optional","number (double)","pattern optional","string","properties optional","< string, JsonSchema > map","ref optional","string","required optional","< string > array","schema optional","string","title optional","string","type optional","string","uniqueItems optional","boolean","Name","Schema","name optional","string","value optional","string","Name","Description","Schema","children optional","The list of configuration reusing this one as a reference (can be created \"next\").","< string > array","familyId optional","The identifier of the family of this configuration.","string","familyLabel optional","The display name of the family of this configuration.","string","icon optional","The icon of this configuration. If you use an existing bundle (@talend/ui/icon), ensure it is present by default and if not do a request using the family on the related endpoint.","string","id optional","The identifier of this configuration/node.","string","label optional","The display name of this configuration.","string","name optional","The technical name of this node (it is human readable but not i18n friendly), useful for debug purposes.","string","version optional","The version of this configuration for the migration management.","integer (int32)","Name","Description","Schema","nodes optional","The list of nodes matching the request. The key is the node identifier.","< string, Node > map","Name","Schema","path optional","string","type optional","string","Name","Schema","key optional","string","path optional","string","Name","Description","Schema","code optional","The error code independently of the locale and not as precise as a message (not context aware).","string","message optional","A human readable message to help understanding the error","string","Name","Schema","action optional","string","family optional","string","onEvent optional","string","options optional","< Option > array","parameters optional","< Parameter > array","type optional","string","Name","Schema","jsonSchema optional","JsonSchema","properties optional","object","uiSchema optional","< UiSchema > array","Name","Description","Schema","metadata optional","The metadata associated to the node if needed by the UI.","Node","ui optional","The ui specification corresponding to the requested node. It is literally the form representing this configuration.","Ui","Name","Schema","autoFocus optional","boolean","condition optional","< string, < object > array > map","description optional","string","disabled optional","boolean","itemWidget optional","string","items optional","< UiSchema > array","key optional","string","options optional","< string, string > map","placeholder optional","string","readOnly optional","boolean","required optional","boolean","restricted optional","boolean","title optional","string","titleMap optional","< NameValue > array","triggers optional","< Trigger > array","type optional","string","widget optional","string","There are two ways to call the save endpoint. If you don’t want to pass the form identifier and prefer to use a generic endpoint that simply passes the type of configuration you are configuring, then you need to modify your enrichment configuration to ensure that the form identifier is present and to specify which form field it is.","To do that, add the proxyserver::formId Boolean to the metadata:","Only the first property with proxyserver::formId set to \"true\" is used. The path cannot contain any array.","The server module contains several configurations that you can set in:","Environment variables.","System properties.","A file located based on the --component-configuration CLI option.","the configuration is read from system properties, environment variables, ….","Key","Description","Default","talend.component.server.component.coordinates","A comma separated list of gav to locate the components","-","talend.component.server.component.extend.dependencies","Should the component extensions add required dependencies.","true","talend.component.server.component.registry","A property file where the value is a gav of a component to register (complementary with coordinates)","-","talend.component.server.documentation.active","Should the /documentation endpoint be activated.","true","talend.component.server.execution.dataset.retriever.timeout","How long the read execution endpoint can last (max)","180","talend.component.server.execution.pool.size","The size of the execution pool for runtime endpoints.","64","talend.component.server.execution.pool.wait","How long the application waits during shutdown for the execution tasks to complete","PT10S","talend.component.server.jaxrs.exceptionhandler.defaultMessage","If set it will replace any message for exceptions. Set to false to use the actual exception message.","false","talend.component.server.maven.repository","The local maven repository used to locate components and their dependencies","-","talend.component.server.monitoring.brave.reporter.async","When using url or kafka reporter, you can configure the async reporter with properties passed to this configuration entry.Ex: messageTimeout=5000,closeTimeout=5000.","console","talend.component.server.monitoring.brave.reporter.type","The brave reporter to use to send the spans. Supported values are [log, noop]. When configuration is needed,you can use this syntax to configure the repoter if needed: <name>(config1=value1, config2=value2), for example: url(endpoint=http://brave.company.com.","In log mode, if environment variable TRACING_ON doesn’t exist or is set to false, noop will be selected, and is set to true, TRACING_KAFKA_URL, TRACING_KAFKA_TOPIC and TRACING_SAMPLING_RATE will configure kafka reporter..","noop","talend.component.server.monitoring.brave.sampling.action.rate","The accuracy rate of the sampling for action endpoints.","-1","talend.component.server.monitoring.brave.sampling.component.rate","The accuracy rate of the sampling for component endpoints.","-1","talend.component.server.monitoring.brave.sampling.configurationtype.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.documentation.rate","The accuracy rate of the sampling for documentation endpoint.","-1","talend.component.server.monitoring.brave.sampling.environment.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.execution.rate","The accuracy rate of the sampling for execution endpoints.","1","talend.component.server.monitoring.brave.sampling.rate","The accuracy rate of the sampling.","-1.","talend.component.server.monitoring.brave.service.name","The name used by the brave integration (zipkin)","component-server","talend.component.server.security.command.handler","How to validate a command/request. Accepted values: securityNoopHandler.","securityNoopHandler","talend.component.server.security.connection.handler","How to validate a connection. Accepted values: securityNoopHandler.","securityNoopHandler","The module provides some services usable to fulfill some basic requirements of the component interaction:","ConfigurationFormatter to (un)flatten the properties (JSON from/to key-value format)","ConfigurationVisitorService to browse properties and identify credentials to cipher them","ValidationService to validate a JSON properties set before any persistence action"]},{"lang":"en","title":"Integrating components into Talend Studio","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/studio.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Integrating components into Talend Studio","In this article"],"lvl1":["Design","Installing the components","Configuring the components","Related articles"],"lvl2":["Random port when running concurrent studio instances","Developer mode"],"text":["Before integrating your components into the Studio, learn how to build and deploy them using Maven or Gradle Talend Component Kit plugins.","The Studio integration relies on the Component Server (see Web for more details).","When the plugin is deployed, it starts a local server that the Studio uses to gather data about the components.","Copy org.talend.sdk.component.studio-integration.jar in the $STUDIO_HOME/plugins directory of the Studio.","Restart the Studio.","Make sure that the component-server dependencies and commons-cli 1.4 are in the Studio Maven repository. If you install any other component, ensure its dependencies are in the repository as well.","you can set the maven.repository value to global in $STUDIO_HOME/configuration/config.ini to reuse your local Maven repository.","The configuration is done in the $STUDIO_HOME/configuration/config.ini file.","Name","Description","Default","component.environment","Enables the developer mode when set to dev","-","component.debounce.timeout","Specifies the timeout (in milliseconds) before calling listeners in components Text fields","750","component.kit.skip","If set to true, the plugin is not enabled. It is useful if you don’t have any component developed with the framework.","false","component.java.arguments","Component server additional options","-","component.java.m2","Maven repository that the server uses to resolve components","Defaults to the global Studio configuration","component.java.coordinates","A list of comma-separated GAV (groupId:artifactId:version) of components to register","-","component.java.registry","A properties file with values matching component GAV (groupId:artifactId:version) registered at startup","-","component.java.port","Sets the port to use for the server","random","components.server.beam.active","Active, if set to true, beam support (Experimental). It requires beam sdk java core dependencies to be available.","false","component.server.jul.forceConsole","Adds a console handler to JUL to see logs in the console. This can be helpful in development because the formatting is clearer than the OSGi one in workspace/.metadata/.log.","It uses the java.util.logging.SimpleFormatter.format property to define its format. By default, it is %1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%6$s%n, but for development purposes [%4$s] %5$s%6$s%n is simpler and more readable.","false","A common developer configuration/config.ini file uses the following specific entries:","If you run multiple Studio instances automatically in parallel, you can run into some issues with the random port computation. For example on a CI platform. For that purpose, you can create the $HOME/.talend/locks/org.talend.sdk.component.studio-integration.lock file.","Then, when a server starts, it acquires a lock on that file and prevents another server to get a port until it is started. It ensures that you can’t have two concurrent processes getting the same port allocated.","However, it is highly unlikely to happen on a desktop. In that case, forcing a different value through component.java.port in your config.ini file is a better solution for local installations.","The developer mode adds a Talend Component Kit button in the main toolbar:","When clicking this button, all components developed with the Talend Component Kit framework are reloaded. The cache is invalidated and the components refreshed.","You still need to add and remove the components to see the changes.","The developer mode can be very useful to see some updates in components without having to restart entirely the Studio.","Best practices","Building components with Maven","Building components with Gradle"]},{"lang":"en","title":"Integrating components into Talend Studio","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-deploying-components.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Integrating components into Talend Studio","In this article"],"lvl1":["Integrating components into Talend Studio"],"lvl2":["Design","Installing the components","Configuring the components","Related articles"],"lvl3":["Random port when running concurrent studio instances","Developer mode"],"text":["To be able to see and use your newly developed components, you need to integrate them to the right application.","Currently, you can deploy your components created using Talend Component Kit in the following applications:","Integrating components to Talend Studio","Before integrating your components into the Studio, learn how to build and deploy them using Maven or Gradle Talend Component Kit plugins.","The Studio integration relies on the Component Server (see Web for more details).","When the plugin is deployed, it starts a local server that the Studio uses to gather data about the components.","Copy org.talend.sdk.component.studio-integration.jar in the $STUDIO_HOME/plugins directory of the Studio.","Restart the Studio.","Make sure that the component-server dependencies and commons-cli 1.4 are in the Studio Maven repository. If you install any other component, ensure its dependencies are in the repository as well.","you can set the maven.repository value to global in $STUDIO_HOME/configuration/config.ini to reuse your local Maven repository.","The configuration is done in the $STUDIO_HOME/configuration/config.ini file.","Name","Description","Default","component.environment","Enables the developer mode when set to dev","-","component.debounce.timeout","Specifies the timeout (in milliseconds) before calling listeners in components Text fields","750","component.kit.skip","If set to true, the plugin is not enabled. It is useful if you don’t have any component developed with the framework.","false","component.java.arguments","Component server additional options","-","component.java.m2","Maven repository that the server uses to resolve components","Defaults to the global Studio configuration","component.java.coordinates","A list of comma-separated GAV (groupId:artifactId:version) of components to register","-","component.java.registry","A properties file with values matching component GAV (groupId:artifactId:version) registered at startup","-","component.java.port","Sets the port to use for the server","random","components.server.beam.active","Active, if set to true, beam support (Experimental). It requires beam sdk java core dependencies to be available.","false","component.server.jul.forceConsole","Adds a console handler to JUL to see logs in the console. This can be helpful in development because the formatting is clearer than the OSGi one in workspace/.metadata/.log.","It uses the java.util.logging.SimpleFormatter.format property to define its format. By default, it is %1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%6$s%n, but for development purposes [%4$s] %5$s%6$s%n is simpler and more readable.","false","A common developer configuration/config.ini file uses the following specific entries:","If you run multiple Studio instances automatically in parallel, you can run into some issues with the random port computation. For example on a CI platform. For that purpose, you can create the $HOME/.talend/locks/org.talend.sdk.component.studio-integration.lock file.","Then, when a server starts, it acquires a lock on that file and prevents another server to get a port until it is started. It ensures that you can’t have two concurrent processes getting the same port allocated.","However, it is highly unlikely to happen on a desktop. In that case, forcing a different value through component.java.port in your config.ini file is a better solution for local installations.","The developer mode adds a Talend Component Kit button in the main toolbar:","When clicking this button, all components developed with the Talend Component Kit framework are reloaded. The cache is invalidated and the components refreshed.","You still need to add and remove the components to see the changes.","The developer mode can be very useful to see some updates in components without having to restart entirely the Studio.","Best practices","Building components with Maven","Building components with Gradle"]},{"lang":"en","title":"Internationalizing components","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-internationalization.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Internationalizing components","In this article"],"lvl1":["Default components keys","Internationalizing a configuration class","Related articles"],"text":["In common cases, you can store messages using a properties file in your component module to use internationalization.","This properties file must be stored in the same package as the related components and named Messages. For example, org.talend.demo.MyComponent uses org.talend.demo.Messages[locale].properties.","This file already exists when you import a project generated from the starter.","Out of the box components are internationalized using the same location logic for the resource bundle. The supported keys are:","Name Pattern","Description","${family}._displayName","Display name of the family","${family}.${category}._category","Display name of the category ${category} in the family ${family}.","${family}.${configurationType}.${name}._displayName","Display name of a configuration type (dataStore or dataSet). Important: this key is read from the family package (not the class package), to unify the localization of the metadata.","${family}.actions.${actionType}.${actionName}._displayName","Display name of an action of the family. Specifying it is optional and will default on the action name if not set.","${family}.${component_name}._displayName","Display name of the component (used by the GUIs)","${property_path}._displayName","Display name of the option.","${simple_class_name}.${property_name}._displayName","Display name of the option using its class name.","${enum_simple_class_name}.${enum_name}._displayName","Display name of the enum_name value of the enum_simple_class_name enumeration.","${property_path}._placeholder","Placeholder of the option.","Example of configuration for a component named list and belonging to the memory family (@Emitter(family = \"memory\", name = \"list\")):","Configuration classes can be translated using the simple class name in the messages properties file. This is useful in case of common configurations shared by multiple components.","For example, if you have a configuration class as follows :","You can give it a translatable display name by adding ${simple_class_name}.${property_name}._displayName to Messages.properties under the same package as the configuration class.","If you have a display name using the property path, it overrides the display name defined using the simple class name. This rule also applies to placeholders.","Generating a project using the starter","Defining component layout and configuration","Masking sensitive data","Best practices"]},{"lang":"en","title":"Internationalizing services","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/services-internationalization.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Internationalizing services","In this article"],"lvl1":["Internationalization API","Related articles"],"text":["Internationalization requires following several best practices:","Storing messages using ResourceBundle properties file in your component module.","The location of the properties is in the same package than the related components and is named Messages. For example, org.talend.demo.MyComponent uses org.talend.demo.Messages[locale].properties.","Use the internationalization API for your own messages.","The Internationalization API is the mechanism to use to internationalize your own messages in your own components.","The principle of the API is to design messages as methods returning String values and get back a template using a ResourceBundle named Messages and located in the same package than the interface that defines these methods.","To ensure your internationalization API is identified, you need to mark it with the @Internationalized annotation:","Providing actions through a service","Built-in services","Services and interceptors","Defining a custom API"]},{"lang":"en","title":"List of available actions","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-actions.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["List of available actions","In this article"],"lvl1":["Dynamic Values","Healthcheck","Schema","Suggestions","Update","User","Validation"],"text":["Some common actions need a clear contract so they are defined as API first-class citizen. For example, this is the case for wizards or health checks. Here is the list of the available actions:","Mark a method as being useful to fill potential values of a string option for a property denoted by its value. You can link a field as being completable using @Proposable(value). The resolution of the completion action is then done through the component family and value of the action. The callback doesn’t take any parameter.","Type: dynamic_values","API: @org.talend.sdk.component.api.service.completion.DynamicValues","Returned type: org.talend.sdk.component.api.service.completion.Values","Sample:","This class marks an action doing a connection test","Type: healthcheck","API: @org.talend.sdk.component.api.service.healthcheck.HealthCheck","Returned type: org.talend.sdk.component.api.service.healthcheck.HealthCheckStatus","Sample:","Mark an action as returning a discovered schema. Its parameter MUST be the type decorated with @Structure.","Type: schema","API: @org.talend.sdk.component.api.service.schema.DiscoverSchema","Returned type: org.talend.sdk.component.api.service.schema.Schema","Sample:","Mark a method as being useful to fill potential values of a string option. You can link a field as being completable using @Suggestable(value). The resolution of the completion action is then done when the user requests it (generally by clicking on a button or entering the field depending the environment).","Type: suggestions","API: @org.talend.sdk.component.api.service.completion.Suggestions","Returned type: org.talend.sdk.component.api.service.completion.SuggestionValues","Sample:","This class marks an action returning a new instance replacing part of a form/configuration.","Type: update","API: @org.talend.sdk.component.api.service.update.Update","Extension point for custom UI integrations and custom actions.","Type: user","API: @org.talend.sdk.component.api.service.Action","Mark a method as being used to validate a configuration.","this is a server validation so only use it if you can’t use other client side validation to implement it.","Type: validation","API: @org.talend.sdk.component.api.service.asyncvalidation.AsyncValidation","Returned type: org.talend.sdk.component.api.service.asyncvalidation.ValidationResult","Sample:"]},{"lang":"en","title":"List of conditions for binding properties","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-conditions.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["List of conditions for binding properties","In this article"],"lvl1":["ActiveIf","ActiveIfs"],"text":["If you need to define a binding between properties, you can use a set of annotations:","If the evaluation of the element at the location matches value then the element is considered active, otherwise it is deactivated.","API: @org.talend.sdk.component.api.configuration.condition.ActiveIf","Type: if","Sample:","Allows to set multiple visibility conditions on the same property.","API: @org.talend.sdk.component.api.configuration.condition.ActiveIfs","Type: ifs","Sample:"]},{"lang":"en","title":"Managing component versions and migration","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-versions-and-migration.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Managing component versions and migration","In this article"],"text":["If some changes impact the configuration, they can be managed through a migration handler at the component level (enabling trans-model migration support).","The @Version annotation supports a migrationHandler method which migrates the incoming configuration to the current model.","For example, if the filepath configuration entry from v1 changed to location in v2, you can remap the value in your MigrationHandler implementation.","A best practice is to split migrations into services that you can inject in the migration handler (through constructor) rather than managing all migrations directly in the handler. For example:","What is important to notice in this snippet is the fact that you can organize your migrations the way that best fits your component.","If you need to apply migrations in a specific order, make sure that they are sorted.","Consider this API as a migration callback rather than a migration API. Adjust the migration code structure you need behind the MigrationHandler, based on your component requirements, using service injection."]},{"lang":"en","title":"Masking sensitive data in your configuration","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-configuration-sensitive-data.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Masking sensitive data in your configuration","In this article"],"lvl1":["Marking sensitive data","Related articles"],"text":["This tutorial shows how to correctly mask the sensitive data of a component configuration.","It is very common to define credentials when configuring a component. Most common cases can include passwords, secrets, keys (it is also common to show them in plain text in a textarea), and tokens.","For example, this REST client configuration specifies that a username, a password and a token are needed to connect to the REST API:","This configuration defines that these credentials are three simple String, represented as plain inputs, which causes severe security concerns:","The password and token are clearly readable in all Talend user interfaces (Studio or Web),","The password and token are potentially stored in clear.","To avoid this behavior, you need to mark sensitive data as @Credential.","Talend Component Kit provides you with the @Credential marker, that you can use on any @Option. This marker has two effects:","It Replaces the default input widget by a password oriented widget","It Requests the Studio or the Talend Cloud products to store the data as sensitive data (as encrypted values).","In order to ensure that the password and token are never stored in clear or shown in the code, add the @Credential marker to the sensitive data. For example:","Your password and token (or any other sensitive data that you need to mask) are not accessible by error anymore.","Generating a project using the starter","Defining an input component","Defining a processor or output component","Configuring a component","Registering a component","Internationalizing a component","Loading a component","Best practices"]},{"lang":"en","title":"Provided JUnit testing environments","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-junit-environments.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Provided JUnit testing environments","In this article"],"text":["The provided environments set the contextual class loader in order to load the related runner of Apache Beam.","Package: org.talend.sdk.component.junit.environment.builtin.beam","the configuration is read from system properties, environment variables, ….","Class","Name","Description","ContextualEnvironment","Contextual","Contextual runner","DirectRunnerEnvironment","Direct","Direct runner","FlinkRunnerEnvironment","Flink","Flink runner","SparkRunnerEnvironment","Spark","Spark runner"]},{"lang":"en","title":"Providing actions for consumers","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/services-actions.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Providing actions for consumers","In this article"],"lvl1":["Particular action types","Internationalization","Related articles"],"lvl2":["Dynamic Values","Healthcheck","Schema","Suggestions","Update","User","Validation"],"text":["In some cases you can need to add some actions that are not related to the runtime. For example, enabling users of the plugin/library to test if a connection works properly.","To do so, you need to define an @Action, which is a method with a name (representing the event name), in a class decorated with @Service:","Services are singleton. If you need some thread safety, make sure that they match that requirement. Services should not store any status either because they can be serialized at any time. Status are held by the component.","Services can be used in components as well (matched by type). They allow to reuse some shared logic, like a client. Here is a sample with a service used to access files:","The service is automatically passed to the constructor. It can be used as a bean. In that case, it is only necessary to call the service method.","Some common actions need a clear contract so they are defined as API first-class citizen. For example, this is the case for wizards or health checks. Here is the list of the available actions:","Mark a method as being useful to fill potential values of a string option for a property denoted by its value. You can link a field as being completable using @Proposable(value). The resolution of the completion action is then done through the component family and value of the action. The callback doesn’t take any parameter.","Type: dynamic_values","API: @org.talend.sdk.component.api.service.completion.DynamicValues","Returned type: org.talend.sdk.component.api.service.completion.Values","Sample:","This class marks an action doing a connection test","Type: healthcheck","API: @org.talend.sdk.component.api.service.healthcheck.HealthCheck","Returned type: org.talend.sdk.component.api.service.healthcheck.HealthCheckStatus","Sample:","Mark an action as returning a discovered schema. Its parameter MUST be the type decorated with @Structure.","Type: schema","API: @org.talend.sdk.component.api.service.schema.DiscoverSchema","Returned type: org.talend.sdk.component.api.service.schema.Schema","Sample:","Mark a method as being useful to fill potential values of a string option. You can link a field as being completable using @Suggestable(value). The resolution of the completion action is then done when the user requests it (generally by clicking on a button or entering the field depending the environment).","Type: suggestions","API: @org.talend.sdk.component.api.service.completion.Suggestions","Returned type: org.talend.sdk.component.api.service.completion.SuggestionValues","Sample:","This class marks an action returning a new instance replacing part of a form/configuration.","Type: update","API: @org.talend.sdk.component.api.service.update.Update","Extension point for custom UI integrations and custom actions.","Type: user","API: @org.talend.sdk.component.api.service.Action","Mark a method as being used to validate a configuration.","this is a server validation so only use it if you can’t use other client side validation to implement it.","Type: validation","API: @org.talend.sdk.component.api.service.asyncvalidation.AsyncValidation","Returned type: org.talend.sdk.component.api.service.asyncvalidation.ValidationResult","Sample:","Internationalization is supported through the injection of the $lang parameter, which allows you to get the correct locale to use with an @Internationalized service:","You can combine the $lang option with the @Internationalized and @Language parameters.","Internationalizing a service","Built-in services","Services and interceptors","Defining a custom API"]},{"lang":"en","title":"Registering components","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/component-registering.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Registering components","In this article"],"lvl1":["Component family and categories","Component icon and version","Component type and name","Related articles"],"lvl2":["Defining a custom icon for a component or component family"],"text":["Before implementing a component logic and configuration, you need to specify the family and the category it belongs to, the component type and name, as well as its name and a few other generic parameters. This set of metadata, and more particularly the family, categories and component type, is mandatory to recognize and load the component to Talend Studio or Cloud applications.","Some of these parameters are handled at the project generation using the starter, but can still be accessed and updated later on.","The family and category of a component is automatically written in the package-info.java of the component package, using the @Components annotation. By default, these parameters are already configured in this file when you import your project in your IDE. Their value correspond to what was defined during the project definition with the starter.","Multiple components can share the same family and category value, but the family + name pair must be unique for the system.","A component can belong to one family only and to one or several categories. If not specified, the category defaults to Misc.","The package-info.java also defines the component family icon, which is different from the component icon. You can learn how to customize this icon in this section.","Here is a sample package-info.java:","Another example with an existing component:","Components can require metadata to be integrated in Talend Studio or Cloud platforms. Metadata is set on the component class and belongs to the org.talend.sdk.component.api.component package.","When you generate your project and import it in your IDE, icon and version both come with a default value.","@Icon: Sets an icon key used to represent the component. You can use a custom key with the custom() method but the icon may not be rendered properly. The icon defaults to Star. Learn how to set a custom icon for your component in this section.","@Version: Sets the component version. 1 by default. Learn how to manage different versions and migrations between your component versions in this section.","Every component family and component needs to have a representative icon. You can use one of the icons provided by the framework or you can use a custom icon.","For the component family the icon is defined in the package-info.java file.","For the component itself, you need to declare the icon in the component class.","To use a custom icon, you need to have the icon file placed in the resources/icons folder of the project. The icon file needs to have a name following the convention IconName_icon32.png, where you can replace IconName by the name of your choice.","The component type is declared in the component class. When you import your project generated from the starter in your IDE, the component type is already defined.","Input components can be:","A partition mapper. @PartitionMapper is the default for input components.","An emitter. @Emitter is a shortcut for @PartitionMapper when you don’t support distribution. It enforces an implicit partition mapper execution with an assessor size of 1 and a split returning itself.","Processor/Output components can be:","A processor. @Processor is the default for output components. A method decorated with @Processor is considered as a producer factory.","Combiners are not supported by the framework. Combiners allow to aggregate results in a single partition.","The name of the component is defined there as well as a parameter of the component type","Once the component type is defined, you can start implementing its specific logic:","Defining an input component","Defining a processor or output component","Methodology for creating components","Generating a project using the starter","Managing component versions","Defining an input component","Defining a processor or output component","Defining component layout and configuration","Best practices"]},{"lang":"en","title":"Search Result","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/search.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Search Result"]},{"lang":"en","title":"Secrets/Passwords and Maven","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-maven-passwords.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Secrets/Passwords and Maven","In this article"],"lvl1":["Related articles"],"text":["You can reuse Maven settings.xml server files, including the encrypted ones. org.talend.sdk.component.maven.MavenDecrypter allows yo to find a username/password from a server identifier:","It is very useful to avoid storing secrets and to perform tests on real systems on a continuous integration platform.","Even if you don’t use Maven on the platform, you can generate the settings.xml and`settings-security.xml` files to use that feature. See maven.apache.org/guides/mini/guide-encryption.html for more details.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Generating data for testing","Simple/Test Pipeline API"]},{"lang":"en","title":"Server configuration","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-server-configuration.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Server configuration","In this article"],"text":["the configuration is read from system properties, environment variables, ….","Key","Description","Default","talend.component.server.component.coordinates","A comma separated list of gav to locate the components","-","talend.component.server.component.extend.dependencies","Should the component extensions add required dependencies.","true","talend.component.server.component.registry","A property file where the value is a gav of a component to register (complementary with coordinates)","-","talend.component.server.documentation.active","Should the /documentation endpoint be activated.","true","talend.component.server.execution.dataset.retriever.timeout","How long the read execution endpoint can last (max)","180","talend.component.server.execution.pool.size","The size of the execution pool for runtime endpoints.","64","talend.component.server.execution.pool.wait","How long the application waits during shutdown for the execution tasks to complete","PT10S","talend.component.server.jaxrs.exceptionhandler.defaultMessage","If set it will replace any message for exceptions. Set to false to use the actual exception message.","false","talend.component.server.maven.repository","The local maven repository used to locate components and their dependencies","-","talend.component.server.monitoring.brave.reporter.async","When using url or kafka reporter, you can configure the async reporter with properties passed to this configuration entry.Ex: messageTimeout=5000,closeTimeout=5000.","console","talend.component.server.monitoring.brave.reporter.type","The brave reporter to use to send the spans. Supported values are [log, noop]. When configuration is needed,you can use this syntax to configure the repoter if needed: <name>(config1=value1, config2=value2), for example: url(endpoint=http://brave.company.com.","In log mode, if environment variable TRACING_ON doesn’t exist or is set to false, noop will be selected, and is set to true, TRACING_KAFKA_URL, TRACING_KAFKA_TOPIC and TRACING_SAMPLING_RATE will configure kafka reporter..","noop","talend.component.server.monitoring.brave.sampling.action.rate","The accuracy rate of the sampling for action endpoints.","-1","talend.component.server.monitoring.brave.sampling.component.rate","The accuracy rate of the sampling for component endpoints.","-1","talend.component.server.monitoring.brave.sampling.configurationtype.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.documentation.rate","The accuracy rate of the sampling for documentation endpoint.","-1","talend.component.server.monitoring.brave.sampling.environment.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.execution.rate","The accuracy rate of the sampling for execution endpoints.","1","talend.component.server.monitoring.brave.sampling.rate","The accuracy rate of the sampling.","-1.","talend.component.server.monitoring.brave.service.name","The name used by the brave integration (zipkin)","component-server","talend.component.server.security.command.handler","How to validate a command/request. Accepted values: securityNoopHandler.","securityNoopHandler","talend.component.server.security.connection.handler","How to validate a connection. Accepted values: securityNoopHandler.","securityNoopHandler"]},{"lang":"en","title":"Services and interceptors","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/services-interceptors.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Services and interceptors","In this article"],"lvl1":["Related articles"],"text":["For common concerns such as caching, auditing, and so on, you can use an interceptor-like API. It is enabled on services by the framework.","An interceptor defines an annotation marked with @Intercepts, which defines the implementation of the interceptor (InterceptorHandler).","For example:","The handler is created from its constructor and can take service injections (by type). The first parameter, however, can be BiFunction<Method, Object[], Object>, which represents the invocation chain if your interceptor can be used with others.","If you make a generic interceptor, pass the invoker as first parameter. Otherwise you cannot combine interceptors at all.","Here is an example of interceptor implementation for the @Logged API:","This implementation is compatible with interceptor chains because it takes the invoker as first constructor parameter and it also takes a service injection. Then, the implementation simply does what is needed, which is logging the invoked method in this case.","The findAnnotation annotation, inherited from InterceptorHandler, is an utility method to find an annotation on a method or class (in this order).","Internationalizing a service","Providing actions through a service","Built-in services","Defining a custom API"]},{"lang":"en","title":"Setting up your environment","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-setup-environment.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Setting up your environment","In this article"],"lvl1":["System prerequisites","Installing the Talend Component Kit IntelliJ plugin"],"lvl2":["Related articles","Installing the IntelliJ plugin","About the internationalization completion","Related articles"],"text":["Before being able to develop components using Talend Component Kit, you need the right system configuration and tools.","Although Talend Component Kit comes with some embedded tools, such as Maven and Gradle wrappers, you still need to prepare your system. A Talend Component Kit plugin for IntelliJ is also available and allows to design and generate your component project right from IntelliJ.","System requirements","Installing the IntelliJ plugin","In order to use Talend Component Kit, you need the following tools installed on your machine:","Java JDK 1.8.x. You can download it from Oracle website.","Talend Open Studio 7.0 or greater to integrate your components.","A Java Integrated Development Environment such as Eclipse or IntelliJ. IntelliJ is recommended as a Talend Component Kit plugin is available.","Optional: If you use IntelliJ, you can install the Talend Component Kit plugin for IntelliJ.","Optional: A build tool:","Apache Maven 3.5.4 is recommended to develop a component or the project itself. You can download it from Apache Maven website.","You can also use Gradle, but at the moment certain features are not supported, such as validations.","It is optional to install a build tool independently since Maven and Gradle wrappers are already available with Talend Component Kit.","IntelliJ plugin","The Talend Component Kit IntelliJ plugin is a plugin for the IntelliJ Java IDE. It adds support for the Talend Component Kit project creation.","Main features:","Project generation support.","Internationalization completion for component configuration.","In the Intellij IDEA:","Go to File > Settings…","On the left panel, select Plugins.","Select Browse repositories…","Enter Talend in the search field and choose Talend Component Kit - Intellij Plugin.","Select Install on the right.","Click the Restart IntelliJ IDEA button.","Confirm the IDEA restart to complete the installation.","The plugin is now installed on your IntelliJ IDEA. You can start using it.","The plugin offers auto-completion for the configuration internationalization. The Talend component configuration lets you setup translatable and user-friendly labels for your configuration using a property file. Auto-completion in possible for the configuration keys and default values in the property file.","For example, you can internationalize a simple configuration class for a basic authentication that you use in your component:","This configuration class contains three properties which you can attach a user-friendly label to.","For example, you can define a label like My server URL for the url option:","Create a Messages.properties file in the project resources and add the label to that file. The plugin automatically detects your configuration and provides you with key completion in the property file.","Press Ctrl+Space to see the key suggestions.","System requirements","Generating a project using the IntelliJ plugin"]},{"lang":"en","title":"System prerequisites","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/system-prerequisites.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["System prerequisites","In this article"],"lvl1":["Related articles"],"text":["In order to use Talend Component Kit, you need the following tools installed on your machine:","Java JDK 1.8.x. You can download it from Oracle website.","Talend Open Studio 7.0 or greater to integrate your components.","A Java Integrated Development Environment such as Eclipse or IntelliJ. IntelliJ is recommended as a Talend Component Kit plugin is available.","Optional: If you use IntelliJ, you can install the Talend Component Kit plugin for IntelliJ.","Optional: A build tool:","Apache Maven 3.5.4 is recommended to develop a component or the project itself. You can download it from Apache Maven website.","You can also use Gradle, but at the moment certain features are not supported, such as validations.","It is optional to install a build tool independently since Maven and Gradle wrappers are already available with Talend Component Kit.","IntelliJ plugin"]},{"lang":"en","title":"Talend Component Documentation","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/documentation.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Documentation","In this article"],"text":["include::documentation-definition.adoc[]","include::documentation-packaging.adoc[]","include::documentation-build-tools.adoc[]","include::documentation-services.adoc[]","include::documentation-testing.adoc[]"]},{"lang":"en","title":"Talend Component Kit Developer Reference Guide ::","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-spark.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["In this article"],"lvl1":["component-runtime-testing-spark"],"lvl2":["JUnit 4","JUnit 5","Checking the job execution status"],"text":["The following artifact allows you to test against a Spark cluster:","The testing relies on a JUnit TestRule. It is recommended to use it as a @ClassRule, to make sure that a single instance of a Spark cluster is built. You can also use it as a simple @Rule, to create the Spark cluster instances per method instead of per test class.","The @ClassRule takes the Spark and Scala versions to use as parameters. It then forks a master and N slaves. Finally, the submit* method allows you to send jobs either from the test classpath or from a shade if you run it as an integration test.","For example:","This testing methodology works with @Parameterized. You can submit several jobs with different arguments and even combine it with Beam TestPipeline if you make it transient.","The integration of that Spark cluster logic with JUnit 5 is done using the @WithSpark marker for the extension. Optionally, it allows you to inject—through @SparkInject—the BaseSpark<?> handler to access the Spark cluster meta information. For example, its host/port.","Currently, SparkClusterRule does not allow to know when a job execution is done, even by exposing and polling the web UI URL to check. The best solution at the moment is to make sure that the output of your job exists and contains the right value.","awaitability or any equivalent library can help you to implement such logic:","To wait until a file exists and check that its content (for example) is the expected one, you can use the following logic:"]},{"lang":"en","title":"Talend Component Kit Developer Reference Guide ::","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-junit.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["In this article"],"lvl1":["component-runtime-junit"],"lvl2":["JUnit 4","JUnit 5","Mocking the output","Mocking the input","Creating runtime configuration from component configuration","Testing a Mapper","Testing a Processor"],"text":["component-runtime-junit is a test library that allows you to validate simple logic based on the Talend Component Kit tooling.","To import it, add the following dependency to your project:","This dependency also provides mocked components that you can use with your own component to create tests.","The mocked components are provided under the test family:","emitter : a mock of an input component","collector : a mock of an output component","You can define a standard JUnit test and use the SimpleComponentRule rule:","The rule can also be defined as a @ClassRule to start it once per class and not per test as with @Rule.","To go further, you can add the ServiceInjectionRule rule, which allows to inject all the component family services into the test class by marking test class fields with @InjectService:","The JUnit 5 integration is very similar to JUnit 4, except that it uses the JUnit 5 extension mechanism.","The entry point is the @WithComponents annotation that you add to your test class, and which takes the component package you want to test. You can use @Injected to inject an instance of ComponentsHandler - which exposes the same utilities than the JUnit 4 rule - in a test class field :","If you use JUnit 5 for the first time, keep in mind that the imports changed and that you need to use org.junit.jupiter.api.Test instead of org.junit.Test. Some IDE versions and surefire versions can also require you to install either a plugin or a specific configuration.","As for JUnit 4, you can go further by injecting test class fields marked with @InjectService, but there is no additional extension to specify in this case:","Using the \"test\"/\"collector\" component as shown in the previous sample stores all records emitted by the chain (typically your source) in memory. You can then access them using theSimpleComponentRule.getCollectedData(type).","Note that this method filters by type. If you don’t need any specific type, you can use Object.class.","The input mocking is symmetric to the output. In this case, you provide the data you want to inject:","The component configuration is a POJO (using @Option on fields) and the runtime configuration (ExecutionChainBuilder) uses a Map<String, String>. To make the conversion easier, the JUnit integration provides a SimpleFactory.configurationByExample utility to get this map instance from a configuration instance.","The same factory provides a fluent DSL to create the configuration by calling configurationByExample without any parameter. The advantage is to be able to convert an object as a Map<String, String> or as a query string in order to use it with the Job DSL:","It handles the encoding of the URI to ensure it is correctly done.","The SimpleComponentRule also allows to test a mapper unitarily. You can get an instance from a configuration and execute this instance to collect the output.","As for a mapper, a processor is testable unitary. However, this case can be more complex in case of multiple inputs or outputs.","The rule allows you to instantiate a Processor from your code, and then to collect the output from the inputs you pass in. There are two convenient implementations of the input factory:","MainInputFactory for processors using only the default input.","JoinInputfactory with the withInput(branch, data) method for processors using multiple inputs. The first argument is the branch name and the second argument is the data used by the branch.","If needed, you can also implement your own input representation using org.talend.sdk.component.junit.ControllableInputFactory."]},{"lang":"en","title":"Talend Component Kit Developer Reference Guide ::","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-http.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["In this article"],"lvl1":["component-runtime-http-junit"],"lvl2":["JUnit 4","JUnit 5","Capturing mode","Passthrough mode","JUnit 5 and capture names"],"lvl3":["SSL","Query Parameters","SSL"],"text":["The HTTP JUnit module allows you to mock REST API very simply. The module coordinates are:","This module uses Apache Johnzon and Netty. If you have any conflict (in particular with Netty), you can add the shaded classifier to the dependency. This way, both dependencies are shaded, which avoids conflicts with your component.","It supports both JUnit 4 and JUnit 5. The concept is the exact same one: the extension/rule is able to serve precomputed responses saved in the classpath.","You can plug your own ResponseLocator to map a request to a response, but the default implementation - which should be sufficient in most cases - looks in talend/testing/http/<class name>_<method name>.json. Note that you can also put it in talend/testing/http/<request path>.json.","JUnit 4 setup is done through two rules:","JUnit4HttpApi, which is starts the server.","JUnit4HttpApiPerMethodConfigurator, which configures the server per test and also handles the capture mode.","If you don’t use the JUnit4HttpApiPerMethodConfigurator, the capture feature is disabled and the per test mocking is not available.","For tests using SSL-based services, you need to use activeSsl() on the JUnit4HttpApi rule.","You can access the client SSL socket factory through the API handler:","Sometimes the query parameters are sensitive and you don’t want to store them when capturing. In such cases, you can drop them from the captured data (.json) and the mock implementation will be able to match the request ignoring the query parameters.","JUnit 5 uses a JUnit 5 extension based on the HttpApi annotation that you can add to your test class. You can inject the test handler - which has some utilities for advanced cases - through @HttpApiInject:","The injection is optional and the @HttpApi annotation allows you to configure several test behaviors.","For tests using SSL-based services, you need to use @HttpApi(useSsl = true).","You can access the client SSL socket factory through the API handler:","The strength of this implementation is to run a small proxy server and to auto-configure the JVM: http[s].proxyHost, http[s].proxyPort, HttpsURLConnection#defaultSSLSocketFactory and SSLContext#default are auto-configured to work out-of-the-box with the proxy.","It allows you to keep the native and real URLs in your tests. For example, the following test is valid:","If you execute this test, it fails with an HTTP 400 error because the proxy does not find the mocked response. You can create it manually, as described in component-runtime-http-junit, but you can also set the talend.junit.http.capture property to the folder storing the captures. It must be the root folder and not the folder where the JSON files are located (not prefixed by talend/testing/http by default).","In most cases, use src/test/resources. If new File(\"src/test/resources\") resolves the valid folder when executing your test (Maven default), then you can just set the system property to true. Otherwise, you need to adjust accordingly the system property value.","When the tests run with this system property, the testing framework creates the correct mock response files. After that, you can remove the system property. The tests will still pass, using google.com, even if you disconnect your machine from the Internet.","If you set the talend.junit.http.passthrough system property to true, the server acts as a proxy and executes each request to the actual server - similarly to the capturing mode.","With its @ParameterizedTest, you can want to customize the name of the output file for JUnit 5 based captures/mocks. Concretely you want to ensure the replay of the same method with different data lead to different mock files. By default the framework will use the display name of the test to specialize it but it is not always very friendly. If you want some more advanced control over the name you can use @HttpApiName(\"myCapture.json\") on the test method. To parameterize the name using @HttpApiName, you can use the placeholders ${class} and ${method} which represents the declaring class and method name, and ${displayName} which represents the method name.","Here is an example to use the same capture file for all repeated test:","And here, the same example but using different files for each repetition:"]},{"lang":"en","title":"Talend Component Kit Javadocs","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/apidocs.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit Javadocs","In this article"],"text":["Refer to the following links to access the detailed API reference documentation:","API Documentation","JUnit API Documentation","HTTP JUnit API Documentation"]},{"lang":"en","title":"Talend Component Kit Overview","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tck-framework-overview.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit Overview","In this article"],"lvl1":["Framework tools","Repositories","Related articles"],"text":["Talend Component Kit is a toolkit based on Java and designed to simplify the development of components at two levels:","Runtime: Runtime is about injecting the specific component code into a job or pipeline. The framework helps unify as much as possible the code required to run in Data Integration (DI) and BEAM environments.","Graphical interface: The framework helps unify the code required to be able to render the component in a browser (web) or in the Eclipse-based Studio (SWT).","The Talend Component Kit framework is made of several tools designed to help you during the component development process. It allows to develop components that fit in both Java web UIs.","Starter: Generate the skeleton of your development project using a user-friendly interface. The Talend Component Kit Starter is available as a web tool or as a plugin for the IntelliJ IDE.","","Component API: Check all classes available to implement components.","Build tools: The framework comes with Maven and Gradle wrappers, which allow to always use the version of Maven or Gradle that is right for your component development environment and version.","Testing tools: Test components before integrating them into Talend Studio or Cloud applications. Testing tools include the Talend Component Kit Web Tester, which allows to check the web UI of your components on your local machine.","","You can find more details about the framework design in this document.","The Talend Component Kit project is available on GitHub in the following repositories:","Runtime repository","API repository","Methodology for creating components","General component execution logic"]},{"lang":"en","title":"Talend Component Kit Overview","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/documentation-overview.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit Overview","In this article"],"text":["If you don’t know about Talend Component Kit, you can get started by going through the following links:","Starting from scratch: Overview | Requirements","Step-by-step tutorial: Code"]},{"lang":"en","title":"Talend Component Kit Release Process","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/release-process.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit Release Process","In this article"],"lvl1":["Installing GPG and generating a key","Configuring settings.xml","Cleaning up JIRA","Releasing","After the release"],"text":["Version: 1.0.5","This page describes how to release the repository.","Before configuring Maven, you need to have a GPG key. Install GPG and import an existing key or generate a new one using gpg --gen-key.","Add the required credentials to your Maven settings.xml file for the release. The overall template is as follows:","All the environment variables should be either set in your environment or hardcoded inline. It is highly recommended to use Maven encryption: maven.apache.org/guides/mini/guide-encryption.html.","The OSSH variables are your Sonatype OSS repository credentials with the permissions to deploy on org.talend. If you don’t have them already, you can ask for them at issues.sonatype.org/projects/OSSRH using your Talend address.","The GitHub variables are your GitHub account credentials. they are mainly used to update the documentation.","The JIRA variables are your Talend account credentials with read permissions on jira.talendforge.org/projects/TCOMP/.","The Blackduck configuration is used for security scans.","The GPG variables reference the key mentioned in Installing GPG and generating a key.","The release connects to JIRA to retrieve and create the release notes. It uses all TCOMP issues which have the changelog label.","Before any release, go through all the issues of the version to release and add or remove the changelog label depending on the issues that need to appear in the release notes.","At that stage, it is assumed that all previous steps have been done.","The release uses a standard Maven process. You should be able to do it in two steps:","After releasing - it can take up to a few hours - the binaries become available on Maven Central Repository (repo.apache.maven.org/maven2/). Check it to make sure that there was no issue during the release process.","You can also validate that the release correctly deployed the new version from the Version menu of the website.","Then we must ensure docker images are deployed and the site","Ensure you pushed the tag if not already done : git push --follow-tags","Checkout the tag: git checkout -b component-runtime-$release component-runtime-$release","Build the tag: mvn clean install -DskipTests -Dinvoker.skip=true -T1C","Deploy the component-starter-server on Docker Hub (assumes your credentials are set up): export RELEASE_VERSION=$(grep \"<version>\" pom.xml | head -n 1 | sed \"s/.>\\\\(.\\\\)<.*/\\\\1/\") && cd .docker && docker build --build-arg SERVER_VERSION=$RELEASE_VERSION --build-arg ARTIFACT_ID=component-starter-server --tag tacokit/component-starter-server:$RELEASE_VERSION . && docker push tacokit/component-starter-server:$RELEASE_VERSION && cd -.","Deploy the component-server on Docker Hub: COMPONENT_SERVER_DOCKER_BUILD_ONLY=true ./.travis/docker.sh and then push the produced image (its name was logged but should be tacokit/component-server:$REALEASE_VERSION).","Rebuild the new master and push the updated files from the doc module (otherwise we’ll get a conflict with the tag): mvn clean install -DskipTests -Dinvoker.skip=true -T1C && git commit -a -m \"Updating doc for new dev round\" && git push","(optional) Redeploy manually the doc to not wait for travis: cd documentation && mvn clean install pre-site -Pgh-pages && cd -"]},{"lang":"en","title":"Talend Component Kit best practices","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/best-practices.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit best practices","In this article"],"lvl1":["Organizing your code","Configuring components","Handling UI interactions","Enforcing versioning on components","Testing components","Related articles"],"lvl2":["Serializing your configuration","Input and output components","Processor components","Validations","Completion","Component representation"],"lvl3":["About actions","Limitations","Light validations","Custom validations"],"text":["Some recommendations apply to the way component packages are organized:","Make sure to create a package-info.java file with the component family/categories at the root of your component package:","Create a package for the configuration.","Create a package for the actions.","Create a package for the component and one sub-package by type of component (input, output, processors, and so on).","It is recommended to serialize your configuration in order to be able to pass it through other components.","When building a new component, the first step is to identify the way it must be configured.","The two main concepts are:","The DataStore which is the way you can access the backend.","The DataSet which is the way you interact with the backend.","For example:","Example description","DataStore","DataSet","Accessing a relational database like MySQL","JDBC driver, URL, username, password","Query to execute, row mapper, and so on.","Accessing a file system","File pattern (or directory + file extension/prefix/…)","File format, buffer size, and so on.","It is common to have the dataset including the datastore, because both are required to work. However, it is recommended to replace this pattern by defining both dataset and datastore in a higher level configuration model. For example:","Input and output components are particular because they can be linked to a set of actions. It is recommended to wire all the actions you can apply to ensure the consumers of your component can provide a rich experience to their users.","The most common actions are the following ones:","Type","Action","Description","Configuration example","Action example","DataStore","@Checkable","Exposes a way to ensure the datastore/connection works","Until the studio integration is complete, it is recommended to limit processors to one input.","Configuring processor components is simpler than configuring input and output components because it is specific for each component. For example, a mapper takes the mapping between the input and output models:","It is recommended to provide as much information as possible to let the UI work with the data during its edition.","Light validations are all the validations you can execute on the client side. They are listed in the UI hint section.","Use light validations first before going with custom validations because they are more efficient.","Custom validations enforce custom code to be executed, they are more heavy to process, so prefer using light validations when possible.","Define an action with the parameters needed for the validation and link the option you want to validate to this action. For example, to validate a dataset for a JDBC driver:","You can also define a Validable class and use it to validate a form by setting it on your whole configuration:","The parameter binding of the validation method uses the same logic as the component configuration injection. Therefore, the @Option method specifies the prefix to use to reference a parameter. It is recommended to use @Option(\"value\") until you know exactly why you don’t use it. This way, the consumer can match the configuration model and just prefix it with value. to send the instance to validate.","It can be handy and user-friendly to provide completion on some fields. For example, to define completion for available drivers:","Each component must have its own icon:","You can use talend.surge.sh/icons/ to find the icon you want to use.","It is recommended to enforce the version of your component, event though it is not mandatory for the first version.","If you break a configuration entry in a later version; make sure to:","Upgrade the version.","Support a migration of the configuration.","Testing your components is critical. You can use unit and simple standalone JUnit tests, but it is also highly recommended to have Beam tests in order to make sure that your component works in Big Data.","Generating a project using the starter","Defining an input component","Defining a processor or output component","Configuring a component","Registering a component","Internationalizing a component","Loading a component","Masking sensitive data","Defining services","Testing components"]},{"lang":"en","title":"Talend Component Kit design overview","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/framework_design.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit design overview","In this article"],"lvl1":["Component API","Isolated","REST","Fixed set of icons","Related articles"],"lvl2":["Evolutive","Static","Flexible data modeling","Generic and specific","Consumable model","Execution with streaming"],"lvl3":["UI-friendly","Auditable and with clear expectations","Dev-friendly","No runtime assumption"],"text":["The component API is declarative (through annotations) to ensure it is:","Evolutive. It can get new features without breaking old code.","As static as possible.","Because it is fully declarative, any new API can be added iteratively without requiring any change to existing components.","For example, in the case of Beam potential evolution:","would not be affected by the addition of the new Timer API, which can be used as follows:","The intent of the framework is to be able to fit in a Java UI as well as in a web UI.","It must be understood as colocalized and remote UI. The goal is to move as much as possible the logic to the UI side for UI-related actions. For example, validating a pattern, a size, and so on, should be done on the client side rather than on the server side. Being static encourages this practice.","The other goal of being static in the API definition is to ensure that the model will not be mutated at runtime and that all the auditing and modeling can be done before, at the design phase.","Being static also ensures that the development can be validated as much as possible through build tools. This does not replace the requirement to test the components but helps developers to maintain components with automated tools.","The processor API supports JsonObject as well as any custom model. The goal is to support generic component development that need to access configured \"object paths\", as well as specific components that rely on a defined path from the input.","A generic component can look like:","A specific component can look like (with MyInput a POJO):","By design, the framework must run in DI (plain standalone Java program) and in Beam pipelines. It is out of scope of the framework to handle the way the runtime serializes - if needed - the data.","For that reason, it is critical not to import serialization constraints to the stack. As an example, this is the reason why JsonObject is not an IndexedRecord from Avro.","Any serialization concern should either be hidden in the framework runtime (outside of the component developer scope) or in the runtime integration with the framework (for example, Beam integration).","In this context, JSON-P can be good compromise because it brings a powerful API with very few constraints.","The components must be able to execute even if they have conflicting libraries. For that purpose, classloaders must be isolated. A component defines its dependencies based on a Maven format and is always bound to its own classloader.","The definition payload is as flat as possible and strongly typed to ensure it can be manipulated by consumers. This way, consumers can add or remove fields with simple mapping rules, without any abstract tree handling.","The execution (runtime) configuration is the concatenation of framework metadata (only the version) and a key/value model of the instance of the configuration based on the definition properties paths for the keys. It enables consumers to maintain and work with the keys/values according to their need.","The framework not being responsible for any persistence, it is very important to make sure that consumers can handle it from end to end, with the ability to search for values (update a machine, update a port and so on) and keys (for example, a new encryption rule on key certificate).","Talend Component Kit is a metamodel provider (to build forms) and a runtime execution platform. It takes a configuration instance and uses it volatilely to execute a component logic. This implies it cannot own the data nor define the contract it has for these two endpoints and must let the consumers handle the data lifecycle (creation, encryption, deletion, and so on).","A new mime type called talend/stream is introduced to define a streaming format.","It matches a JSON object per line:","Icons (@Icon) are based on a fixed set. Custom icons can be used but their display cannot be guaranteed. Components can be used in any environment and require a consistent look that cannot be guaranteed outside of the UI itself. Defining keys only is the best way to communicate this information.","Once you know exactly how you will deploy your component in the Studio, then you can use `@Icon(value = CUSTOM, custom = \"…\") to use a custom icon file.","Methodology for creating components","General component execution logic"]},{"lang":"en","title":"Talend Component Kit methodology","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/methodology-creating-components.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Talend Component Kit methodology","In this article"],"lvl1":["Related articles"],"text":["Talend Component Kit is a framework designed to simplify the development of components at two levels:","Runtime: Runtime is about injecting the specific component code into a job or pipeline. The framework helps unify as much as possible the code required to run in Data Integration (DI) and BEAM environments.","Graphical interface: The framework helps unify the code required to be able to render the component in a browser (web) or in the Eclipse-based Studio (SWT).","Before being able to develop new components, check the prerequisites to make sure that you have all you need to get started.","Developing new components using the framework includes:","Creating a project using the starter or the Talend IntelliJ plugin. This step allows to build the skeleton of the project. It consists in:","Defining the general configuration model for each component in your project","Generating and downloading the project archive from the starter","Compiling the project","Importing the compiled project in your IDE. This step is not required if you have generated the project using the IntelliJ plugin.","Implementing the components, including:","Registering the component by specifying its metadata: family, categories, version, icon, type, and name.","Defining the layout and configurable part of the components","Defining the partition mapper for Input components","Implementing the source logic (producer) for Input components","Defining the processor for Output components","Testing the components","Deploying the components to Talend Studio or Cloud applications","Some additional configuration steps can be necessary according to your requirements:","Defining services that can be reused in several components","Masking sensitive data","","Talend Component Kit framework overview","General component execution logic"]},{"lang":"en","title":"Testing a REST API","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-test-rest-api.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Testing a REST API","In this article"],"lvl1":["Creating the unit test","Transforming the unit test into a mocked test"],"text":["Testing code that consumes REST APIs can sometimes present many constraints: API rate limit, authentication token and password sharing, API availability, sandbox expiration, API costs, and so on.","As a developer, it becomes critical to avoid those constraints and to be able to easily mock the API response.","The component framework provides an API simulation tool that makes it easy to write unit tests.","This tutorial shows how to use this tool in unit tests. As a starting point, the tutorial uses the component that consumes Zendesk Search API and that was created in a previous tutorial. The goal is to add unit tests for it.","For this tutorial, four tickets that have the open status have been added to the Zendesk test instance used in the tests.","To learn more about the testing methodology used in this tutorial, refer to Component JUnit testing.","Create a unit test that performs a real HTTP request to the Zendesk Search API instance. You can learn how to create a simple unit test in this tutorial.","the authentication configuration using Zendesk instance URL and credentials.","the search query configuration to get all the open ticket, ordered by creation date and sorted in descending order.","The test is now complete and working. It performs a real HTTP request to the Zendesk instance.","As an alternative, you can use mock results to avoid performing HTTP requests every time on the development environment. The real HTTP requests would, for example, only be performed on an integration environment.","To transform the unit test into a mocked test that uses a mocked response of the Zendesk Search API:","Add the two following JUnit rules provided by the component framework.","JUnit4HttpApi: This rule starts a simulation server that acts as a proxy and catches all the HTTP requests performed in the tests. This simulation server has two modes :","capture : This mode forwards the captured HTTP request to the real server and captures the response.","simulation : this mode returns a mocked response from the responses already captured. This rule needs to be added as a class rule.","JUnit4HttpApi: This rule has a reference to the first rule. Its role is to configure the simulation server for every unit test. It passes the context of the running test to the simulation server. This rule needs to be added as a simple (method) rule.","Make the test run in capture mode to catch the real API responses that can be used later in the simulated mode. To do that, set a new talend.junit.http.capture environment variable to true. This tells the simulation server to run in a capture mode.","The captured response is saved in the resources/talend.testing.http package in a JSON format, then reused to perform the API simulation."]},{"lang":"en","title":"Testing a component","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-test-your-components.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Testing a component","In this article"],"text":["This tutorial focuses on writing unit tests for the input component that was created in this previous tutorial.","This tutorial covers:","How to load components in a unit test.","How to create a job pipeline.","How to run the test in standalone mode.","The test class is as follows:"]},{"lang":"en","title":"Testing best practices","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-best-practices.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Testing best practices","In this article"],"lvl1":["Parameterized tests","Related articles"],"lvl2":["JUnit 4","JUnit 5"],"text":["This section mainly concerns tools that can be used with JUnit. You can use most of these best practices with TestNG as well.","Parameterized tests are a great solution to repeat the same test multiple times. This method of testing requires defining a test scenario (I test function F) and making the input/output data dynamic.","Here is a test example, which validates a connection URI using ConnectionService:","The testing method is always the same. Only values are changing. It can therefore be rewritten using JUnit Parameterized runner, as follows:","You don’t have to define a single @Test method. If you define multiple methods, each of them is executed with all the data. For example, if another test is added to the previous example, four tests are executed - 2 per data).","With JUnit 5, parameterized tests are easier to use. The full documentation is available at junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests.","The main difference with JUnit 4 is that you can also define inline that the test method is a parameterized test as well as the values to use:","However, you can still use the previous behavior with a method binding configuration:","This last option allows you to inject any type of value - not only primitives - which is common to define scenarios.","Add the junit-jupiter-params dependency to benefit from this feature.","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API"]},{"lang":"en","title":"Testing components","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-testing-components.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Testing components","In this article"],"lvl1":["Testing best practices","component-runtime-testing","Beam testing","Testing on multiple environments","Secrets/Passwords and Maven","Generating data","Creating a job pipeline"],"lvl2":["Parameterized tests","Related articles","component-runtime-junit","component-runtime-testing-spark","component-runtime-http-junit","Related articles","Related articles","JUnit 4","JUnit 5","Provided environments","Configuring environments","Related articles","Related articles","Related articles","Job Builder","Beam case","Related articles"],"lvl3":["JUnit 4","JUnit 5","JUnit 4","JUnit 5","Mocking the output","Mocking the input","Creating runtime configuration from component configuration","Testing a Mapper","Testing a Processor","JUnit 4","JUnit 5","Checking the job execution status","JUnit 4","JUnit 5","Capturing mode","Passthrough mode","JUnit 5 and capture names","Advanced usage","Environment/Runner","Key Provider","Inputs and Outputs","Processors","Converting a Beam.io into a component I/O"],"text":["Developing new components includes testing them in the required execution environments. Use the following articles to learn about the best practices and the available options to fully test your components.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API","Beam Pipeline API","This section mainly concerns tools that can be used with JUnit. You can use most of these best practices with TestNG as well.","Parameterized tests are a great solution to repeat the same test multiple times. This method of testing requires defining a test scenario (I test function F) and making the input/output data dynamic.","Here is a test example, which validates a connection URI using ConnectionService:","The testing method is always the same. Only values are changing. It can therefore be rewritten using JUnit Parameterized runner, as follows:","You don’t have to define a single @Test method. If you define multiple methods, each of them is executed with all the data. For example, if another test is added to the previous example, four tests are executed - 2 per data).","With JUnit 5, parameterized tests are easier to use. The full documentation is available at junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests.","The main difference with JUnit 4 is that you can also define inline that the test method is a parameterized test as well as the values to use:","However, you can still use the previous behavior with a method binding configuration:","This last option allows you to inject any type of value - not only primitives - which is common to define scenarios.","Add the junit-jupiter-params dependency to benefit from this feature.","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API","component-runtime-junit is a test library that allows you to validate simple logic based on the Talend Component Kit tooling.","To import it, add the following dependency to your project:","This dependency also provides mocked components that you can use with your own component to create tests.","The mocked components are provided under the test family:","emitter : a mock of an input component","collector : a mock of an output component","You can define a standard JUnit test and use the SimpleComponentRule rule:","The rule can also be defined as a @ClassRule to start it once per class and not per test as with @Rule.","To go further, you can add the ServiceInjectionRule rule, which allows to inject all the component family services into the test class by marking test class fields with @InjectService:","The JUnit 5 integration is very similar to JUnit 4, except that it uses the JUnit 5 extension mechanism.","The entry point is the @WithComponents annotation that you add to your test class, and which takes the component package you want to test. You can use @Injected to inject an instance of ComponentsHandler - which exposes the same utilities than the JUnit 4 rule - in a test class field :","If you use JUnit 5 for the first time, keep in mind that the imports changed and that you need to use org.junit.jupiter.api.Test instead of org.junit.Test. Some IDE versions and surefire versions can also require you to install either a plugin or a specific configuration.","As for JUnit 4, you can go further by injecting test class fields marked with @InjectService, but there is no additional extension to specify in this case:","Using the \"test\"/\"collector\" component as shown in the previous sample stores all records emitted by the chain (typically your source) in memory. You can then access them using theSimpleComponentRule.getCollectedData(type).","Note that this method filters by type. If you don’t need any specific type, you can use Object.class.","The input mocking is symmetric to the output. In this case, you provide the data you want to inject:","The component configuration is a POJO (using @Option on fields) and the runtime configuration (ExecutionChainBuilder) uses a Map<String, String>. To make the conversion easier, the JUnit integration provides a SimpleFactory.configurationByExample utility to get this map instance from a configuration instance.","The same factory provides a fluent DSL to create the configuration by calling configurationByExample without any parameter. The advantage is to be able to convert an object as a Map<String, String> or as a query string in order to use it with the Job DSL:","It handles the encoding of the URI to ensure it is correctly done.","The SimpleComponentRule also allows to test a mapper unitarily. You can get an instance from a configuration and execute this instance to collect the output.","As for a mapper, a processor is testable unitary. However, this case can be more complex in case of multiple inputs or outputs.","The rule allows you to instantiate a Processor from your code, and then to collect the output from the inputs you pass in. There are two convenient implementations of the input factory:","MainInputFactory for processors using only the default input.","JoinInputfactory with the withInput(branch, data) method for processors using multiple inputs. The first argument is the branch name and the second argument is the data used by the branch.","If needed, you can also implement your own input representation using org.talend.sdk.component.junit.ControllableInputFactory.","The following artifact allows you to test against a Spark cluster:","The testing relies on a JUnit TestRule. It is recommended to use it as a @ClassRule, to make sure that a single instance of a Spark cluster is built. You can also use it as a simple @Rule, to create the Spark cluster instances per method instead of per test class.","The @ClassRule takes the Spark and Scala versions to use as parameters. It then forks a master and N slaves. Finally, the submit* method allows you to send jobs either from the test classpath or from a shade if you run it as an integration test.","For example:","This testing methodology works with @Parameterized. You can submit several jobs with different arguments and even combine it with Beam TestPipeline if you make it transient.","The integration of that Spark cluster logic with JUnit 5 is done using the @WithSpark marker for the extension. Optionally, it allows you to inject—through @SparkInject—the BaseSpark<?> handler to access the Spark cluster meta information. For example, its host/port.","Currently, SparkClusterRule does not allow to know when a job execution is done, even by exposing and polling the web UI URL to check. The best solution at the moment is to make sure that the output of your job exists and contains the right value.","awaitability or any equivalent library can help you to implement such logic:","To wait until a file exists and check that its content (for example) is the expected one, you can use the following logic:","The HTTP JUnit module allows you to mock REST API very simply. The module coordinates are:","This module uses Apache Johnzon and Netty. If you have any conflict (in particular with Netty), you can add the shaded classifier to the dependency. This way, both dependencies are shaded, which avoids conflicts with your component.","It supports both JUnit 4 and JUnit 5. The concept is the exact same one: the extension/rule is able to serve precomputed responses saved in the classpath.","You can plug your own ResponseLocator to map a request to a response, but the default implementation - which should be sufficient in most cases - looks in talend/testing/http/<class name>_<method name>.json. Note that you can also put it in talend/testing/http/<request path>.json.","JUnit 4 setup is done through two rules:","JUnit4HttpApi, which is starts the server.","JUnit4HttpApiPerMethodConfigurator, which configures the server per test and also handles the capture mode.","If you don’t use the JUnit4HttpApiPerMethodConfigurator, the capture feature is disabled and the per test mocking is not available.","For tests using SSL-based services, you need to use activeSsl() on the JUnit4HttpApi rule.","You can access the client SSL socket factory through the API handler:","Sometimes the query parameters are sensitive and you don’t want to store them when capturing. In such cases, you can drop them from the captured data (.json) and the mock implementation will be able to match the request ignoring the query parameters.","JUnit 5 uses a JUnit 5 extension based on the HttpApi annotation that you can add to your test class. You can inject the test handler - which has some utilities for advanced cases - through @HttpApiInject:","The injection is optional and the @HttpApi annotation allows you to configure several test behaviors.","For tests using SSL-based services, you need to use @HttpApi(useSsl = true).","You can access the client SSL socket factory through the API handler:","The strength of this implementation is to run a small proxy server and to auto-configure the JVM: http[s].proxyHost, http[s].proxyPort, HttpsURLConnection#defaultSSLSocketFactory and SSLContext#default are auto-configured to work out-of-the-box with the proxy.","It allows you to keep the native and real URLs in your tests. For example, the following test is valid:","If you execute this test, it fails with an HTTP 400 error because the proxy does not find the mocked response. You can create it manually, as described in component-runtime-http-junit, but you can also set the talend.junit.http.capture property to the folder storing the captures. It must be the root folder and not the folder where the JSON files are located (not prefixed by talend/testing/http by default).","In most cases, use src/test/resources. If new File(\"src/test/resources\") resolves the valid folder when executing your test (Maven default), then you can just set the system property to true. Otherwise, you need to adjust accordingly the system property value.","When the tests run with this system property, the testing framework creates the correct mock response files. After that, you can remove the system property. The tests will still pass, using google.com, even if you disconnect your machine from the Internet.","If you set the talend.junit.http.passthrough system property to true, the server acts as a proxy and executes each request to the actual server - similarly to the capturing mode.","With its @ParameterizedTest, you can want to customize the name of the output file for JUnit 5 based captures/mocks. Concretely you want to ensure the replay of the same method with different data lead to different mock files. By default the framework will use the display name of the test to specialize it but it is not always very friendly. If you want some more advanced control over the name you can use @HttpApiName(\"myCapture.json\") on the test method. To parameterize the name using @HttpApiName, you can use the placeholders ${class} and ${method} which represents the declaring class and method name, and ${displayName} which represents the method name.","Here is an example to use the same capture file for all repeated test:","And here, the same example but using different files for each repetition:","Component testing best practices","Beam testing","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API","If you want to make sure that your component works in Beam and don’t want to use Spark, you can try with the Direct Runner.","Check beam.apache.org/contribute/testing/ for more details.","Component testing best practices","Testing component runtime","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API","JUnit (4 or 5) already provides ways to parameterize tests and execute the same \"test logic\" against several sets of data. However, it is not very convenient for testing multiple environments.","For example, with Beam, you can test your code against multiple runners. But it requires resolving conflicts between runner dependencies, setting the correct classloaders, and so on.","To simplify such cases, the framework provides you a multi-environment support for your tests, through the JUnit module, which works with both JUnit 4 and JUnit 5.","The MultiEnvironmentsRunner executes the tests for each defined environments. With the example above, it means that it runs test1 for Env1 and Env2.","By default, the JUnit4 runner is used to execute the tests in one environment, but you can use @DelegateRunWith to use another runner.","The multi-environment configuration with JUnit 5 is similar to JUnit 4:","The main differences are that no runner is used because they do not exist in JUnit 5, and that you need to replace @Test by @EnvironmentalTest.","With JUnit5, tests are executed one after another for all environments, while tests are ran sequentially in each environments with JUnit 4. For example, this means that @BeforeAll and @AfterAll are executed once for all runners.","The provided environment sets the contextual classloader in order to load the related runner of Apache Beam.","Package: org.talend.sdk.component.junit.environment.builtin.beam","the configuration is read from system properties, environment variables, ….","Class","Name","Description","ContextualEnvironment","Contextual","Contextual runner","DirectRunnerEnvironment","Direct","Direct runner","FlinkRunnerEnvironment","Flink","Flink runner","SparkRunnerEnvironment","Spark","Spark runner","If the environment extends BaseEnvironmentProvider and therefore defines an environment name - which is the case of the default ones - you can use EnvironmentConfiguration to customize the system properties used for that environment:","If you set the <environment name>.skip system property to true, the environment-related executions are skipped.","This usage assumes that Beam 2.4.0 is used.","The following dependencies bring the JUnit testing toolkit, the Beam integration and the multi-environment testing toolkit for JUnit into the test scope.","Using the fluent DSL to define jobs, you can write a test as follows:","Your job must be linear and each step must send a single value (no multi-input or multi-output).","It executes the chain twice:","With a standalone environment to simulate the Studio.","With a Beam (direct runner) environment to ensure the portability of your job.","Component testing best practices","Testing component runtime","Beam testing","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API","You can reuse Maven settings.xml server files, including the encrypted ones. org.talend.sdk.component.maven.MavenDecrypter allows yo to find a username/password from a server identifier:","It is very useful to avoid storing secrets and to perform tests on real systems on a continuous integration platform.","Even if you don’t use Maven on the platform, you can generate the settings.xml and`settings-security.xml` files to use that feature. See maven.apache.org/guides/mini/guide-encryption.html for more details.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Generating data for testing","Simple/Test Pipeline API","Several data generators exist if you want to populate objects with a semantic that is more evolved than a plain random string like commons-lang3:","github.com/Codearte/jfairy","github.com/DiUS/java-faker","github.com/andygibson/datafactory","etc.","Even more advanced, the following generators allow to directly bind generic data on a model. However, data quality is not always optimal:","github.com/devopsfolks/podam","github.com/benas/random-beans","etc.","There are two main kinds of implementation:","Implementations using a pattern and random generated data.","Implementations using a set of precomputed data extrapolated to create new values.","Check your use case to know which one fits best.","An alternative to data generation can be to import real data and use Talend Studio to sanitize the data, by removing sensitive information and replacing it with generated or anonymized data. Then you just need to inject that file into the system.","If you are using JUnit 5, you can have a look at glytching.github.io/junit-extensions/randomBeans.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Simple/Test Pipeline API","The Job builder lets you create a job pipeline programmatically using Talend components (Producers and Processors). The job pipeline is an acyclic graph, allowing you to build complex pipelines.","Let’s take a simple use case where two data sources (employee and salary) are formatted to CSV and the result is written to a file.","A job is defined based on components (nodes) and links (edges) to connect their branches together.","Every component is defined by a unique id and an URI that identify the component.","The URI follows the form [family]://[component][?version][&configuration], where:","family is the name of the component family.","component is the name of the component.","version is the version of the component. It is represented in a key=value format. The key is __version and the value is a number.","configuration is component configuration. It is represented in a key=value format. The key is the path of the configuration and the value is a `string' corresponding to the configuration value.","configuration parameters must be URI/URL encoded.","It has some starting components (components that don’t have a from connection and that need to be of the producer type).","There are no cyclic connections. The job pipeline needs to be an acyclic graph.","All components used in the connections are already declared.","Each connection is used only once. You cannot connect a component input/output branch twice.","In this version, the execution of the job is linear. Components are not executed in parallel even if some steps may be independents.","Depending on the configuration, you can select the environment which you execute your job in.","To select the environment, the logic is the following one:","If an org.talend.sdk.component.runtime.manager.chain.Job.ExecutorBuilder class is passed through the job properties, then use it. The supported types are a ExecutionBuilder instance, a Class or a String.","if an ExecutionBuilder SPI is present, use it. It is the case if component-runtime-beam is present in your classpath.","else, use a local/standalone execution.","In the case of a Beam execution, you can customize the pipeline options using system properties. They have to be prefixed with talend.beam.job.. For example, to set the appName option, you need to use -Dtalend.beam.job.appName=mytest.","The job builder lets you set a key provider to join your data when a component has multiple inputs. The key provider can be set contextually to a component or globally to the job.","If the incoming data has different IDs, you can provide a complex global key provider that relies on the context given by the component id and the branch name.","For Beam case, you need to rely on Beam pipeline definition and use the component-runtime-beam dependency, which provides Beam bridges.","org.talend.sdk.component.runtime.beam.TalendIO provides a way to convert a partition mapper or a processor to an input or processor using the read or write methods.","org.talend.sdk.component.runtime.beam.TalendFn provides the way to wrap a processor in a Beam PTransform and to integrate it into the pipeline.","The multiple inputs and outputs are represented by a Map element in Beam case to avoid using multiple inputs and outputs.","You can use ViewsMappingTransform or CoGroupByKeyResultMappingTransform to adapt the input/output format to the record format representing the multiple inputs/output, like Map<String, List<?>>, but materialized as a JsonObject. Input data must be of the JsonObject type in this case.","For simple inputs and outputs, you can get an automatic and transparent conversion of the Beam.io into an I/O component, if you decorated your PTransform with @PartitionMapper or @Processor.","However, there are limitations:","Inputs must implement PTransform<PBegin, PCollection<?>> and must be a BoundedSource.","Outputs must implement PTransform<PCollection<?>, PDone> and register a DoFn on the input PCollection.","For more information, see the How to wrap a Beam I/O page.","Component testing best practices","Testing component runtime","Beam testing","Testing in multiple environments","Reusing Maven credentials","Generating data for testing","Wrapping a Beam I/O"]},{"lang":"en","title":"Testing in a Continuous Integration environment","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/tutorial-dev-vs-ci-setup.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Testing in a Continuous Integration environment","In this article"],"lvl1":["Setting up credentials","Adapting the unit test","Setting up the CI server in passthrough mode"],"text":["This tutorial shows how to adapt the test configuration of the Zendesk search component that was done in this previous tutorial to make it work in a Continuous Integration environment.","In the test, the Zendesk credentials are used directly in the code to perform a first capture of the API response. Then, fake credentials are used in the simulation mode because the real API is not called anymore.","However, in some cases, you can require to continue calling the real API on a CI server or on a specific environment.","To do that, you can adapt the test to get the credentials depending on the execution mode (simulation/passthrough).","These instructions concern the CI server or on any environment that requires real credentials.","This tutorial uses:","A Maven server that supports password encryption as a credential provider. Encryption is optional but recommended.","The MavenDecrypterRule test rule provided by the framework. This rule lets you get credentials from Maven settings using a server ID.","To create encrypted server credentials for the Zendesk instance:","Create a master password using the command: mvn --encrypt-master-password <password>.","Store this master password in the settings-security.xml file of the ~/.m2 folder.","Encrypt the Zendesk instance password using the command: mvn --encrypt-password <zendesk-password>.","Create a server entry under servers in Maven settings.xml file located in the ~/.m2 folder.","You can store the settings-security.xml and settings.xml files elsewhere that the default location (~/.m2). To do that, set the path of the directory containing the files in the talend.maven.decrypter.m2.location environment variable.","Add the MavenDecrypterRule rule to the test class. This rule allows to inject server information stored in Maven settings.xml file to the test. The rule also decrypts credentials if they are encrypted.","Inject the Zendesk server to the test. To do that, add a new field to the class with the @DecryptedServer annotation, that holds the server ID to be injected.","The MavenDecrypterRule is able to inject the server instance into this class at runtime. The server instance contains the username and the decrypted password.","Use the server instance in the test to get the real credentials in a secured manner.","Once modified, the complete test class looks as follows:","This test will continue to work in simulation mode, because the API simulation proxy is activated.","This tutorial shows how to set up a CI server in passthrough mode using Jenkins.","Log in to Jenkins.","Click New Item to create a new build job.","Enter an Item name (Job name) and choose the freestyle job. Then click OK.","In the Source Code Management section, enter your project repository URL. A GitHub repository is used in this tutorial.","Specify the master branch as Branches to build.","In the Build section, click Add build step and choose Invoke top-level Maven targets.","Choose your Maven version and enter the Maven build command. In this case: clean install. Then, click Save.","The -Dtalend.junit.http.passthrough=true option is part of the build command. This option tells the API simulation proxy to run in passthrough mode. This way, all the HTTP requests made in the test are forwarded to the real API server.","The MavenDecrypterRule rule allows to get the real credentials.","You can configure the passthrough mode globally on your CI server by setting the talend.junit.http.passthrough environment variable to true.","Test the job by selecting Build now, and check that the job has built correctly.","Now your tests run in a simulation mode on your development environment and in a passthrough mode on your CI server."]},{"lang":"en","title":"Testing on multiple environments","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/testing-multiple-envs.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Testing on multiple environments","In this article"],"lvl1":["JUnit 4","JUnit 5","Provided environments","Configuring environments","Related articles"],"lvl2":["Advanced usage"],"text":["JUnit (4 or 5) already provides ways to parameterize tests and execute the same \"test logic\" against several sets of data. However, it is not very convenient for testing multiple environments.","For example, with Beam, you can test your code against multiple runners. But it requires resolving conflicts between runner dependencies, setting the correct classloaders, and so on.","To simplify such cases, the framework provides you a multi-environment support for your tests, through the JUnit module, which works with both JUnit 4 and JUnit 5.","The MultiEnvironmentsRunner executes the tests for each defined environments. With the example above, it means that it runs test1 for Env1 and Env2.","By default, the JUnit4 runner is used to execute the tests in one environment, but you can use @DelegateRunWith to use another runner.","The multi-environment configuration with JUnit 5 is similar to JUnit 4:","The main differences are that no runner is used because they do not exist in JUnit 5, and that you need to replace @Test by @EnvironmentalTest.","With JUnit5, tests are executed one after another for all environments, while tests are ran sequentially in each environments with JUnit 4. For example, this means that @BeforeAll and @AfterAll are executed once for all runners.","The provided environment sets the contextual classloader in order to load the related runner of Apache Beam.","Package: org.talend.sdk.component.junit.environment.builtin.beam","the configuration is read from system properties, environment variables, ….","Class","Name","Description","ContextualEnvironment","Contextual","Contextual runner","DirectRunnerEnvironment","Direct","Direct runner","FlinkRunnerEnvironment","Flink","Flink runner","SparkRunnerEnvironment","Spark","Spark runner","If the environment extends BaseEnvironmentProvider and therefore defines an environment name - which is the case of the default ones - you can use EnvironmentConfiguration to customize the system properties used for that environment:","If you set the <environment name>.skip system property to true, the environment-related executions are skipped.","This usage assumes that Beam 2.4.0 is used.","The following dependencies bring the JUnit testing toolkit, the Beam integration and the multi-environment testing toolkit for JUnit into the test scope.","Using the fluent DSL to define jobs, you can write a test as follows:","Your job must be linear and each step must send a single value (no multi-input or multi-output).","It executes the chain twice:","With a standalone environment to simulate the Studio.","With a Beam (direct runner) environment to ensure the portability of your job.","Component testing best practices","Testing component runtime","Beam testing","Reusing Maven credentials","Generating data for testing","Simple/Test Pipeline API"]},{"lang":"en","title":"Tutorials","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/pdf-tutorials.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Tutorials","In this article"],"lvl1":["Generating a project using the Component Kit starter","Implementing an input component","Implementing an Output component","Creating components for a REST API","Testing a REST API","Testing a component","Testing in a Continuous Integration environment","Handling component version migration"],"lvl2":["Configuring the project","Creating an Input component","Creating a Processor component","Creating an Output component","Generating and downloading the final project","Compiling and exploring the generated project files","Related articles","Registering the component family","Defining the configurable part and the layout of the component","Configuring The Partition Mapper","Configuring the Producer (Source)","Defining the configurable part and the layout of the component","Configuring the Output","Setting up the HTTP client","Configuring the component","Defining the component mapper","Defining the component source","Creating the unit test","Transforming the unit test into a mocked test","Setting up credentials","Adapting the unit test","Setting up the CI server in passthrough mode","Requirements","Creating the version 1 of the component","Creating the version 2 of the component","Handling the migration from the version 1 to the version 2"],"lvl3":["Defining the constructor method","Defining the PostConstruct method","Defining the PreDestroy method","Defining the Assessor method","Defining the Split method","The Emitter method","Full implementation of the Partition Mapper","Defining the constructor method","Defining the PostConstruct method","Defining the PreDestroy method","Defining the ElementListener method","Full implementation of the Output","Configuring basic authentication","Configuring the dataset","Declaring the migration handler","Implementing the migration handler"],"text":["The Component Kit starter lets you design your components configuration and generates a ready-to-implement project structure.","This tutorial shows you how to use the Component Kit starter to generate new components for MySQL databases. Before starting, make sure that you have correctly setup your environment. See this section.","Before being able to create components, you need to define the general settings of the project:","Create a folder on your local machine to store the resource files of the component you want to create. For example, C:/my_components.","Open the starter in the web browser of your choice.","Select your build tool. This tutorial uses Maven, but you can select Gradle instead.","Add the Talend Component Kit Testing facet to your project to automatically generate unit tests for the components created later in this tutorial. Add any facet you need.","Enter the Component Family of the components you want to develop in the project. This name must be a valid java name and is recommended to be capitalized, for example 'MySQL'. Once you have implemented your components in the Studio, this name is displayed in the Palette to group all of the MySQL-related components you develop, and is also part of your component name.","Select the Category of the components you want to create in the current project. As MySQL is a kind of database, select Databases in this tutorial. This Databases category is used and displayed as the parent family of the MySQL group in the Palette of the Studio.","Complete the project metadata by entering the Group, Artifact and Package.","Click the ADD A COMPONENT button to start designing your components.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create an input component that connects to a MySQL database, executes a SQL query and gets the result.","Choose the component type. INPUT in this case.","Enter the component name. For example, MySQLInput.","Click CONFIGURATION MODEL. This button lets you specify the required configuration for the component.","For each parameter that you need to add, click the (+) button on the right panel. Enter the name and choose the type of the parameter, then click the tick button to save the changes. In this tutorial, to be able to execute a SQL query on the Input MySQL database, the configuration requires the following parameters:+","a connection URL (string)","a username (string)","a password (string)","the SQL query to be executed (string).","Closing the configuration panel on the right does not delete your configuration.","Specify whether the component issues a stream or not. In this tutorial, the MySQL input component created is an ordinary (non streaming) component. In this case, let the toggle button disabled.","Select the Record Type generated by the component. In this tutorial, select Generic because the component is designed to generate JSON records. You can also select Custom to define a POJO that represents your records.","Your input component is now defined. You can add another component or generate and download your project.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create a simple processor component that receives a record, logs it and returns it at it is.","Choose the component type. PROCESSOR/OUTPUT in this case.","Enter the component name. For example, RecordLogger, as the processor created in this tutorial logs the records.","Specify the CONFIGURATION MODEL of the component. In this tutorial, the component doesn’t need any specific configuration. Skip this step.","Define the Input(s) of the component. For each input that you need to define, click ADD INPUT. In this tutorial, only one input is needed to receive the record to log.","Click the input name to access its configuration. You can change the name of the input and define its structure using a POJO. If you added several inputs, repeat this step for each one of them. The input in this tutorial is a generic record. Enable the Generic option.","Define the Output(s) of the component. For each output that you need to define, click ADD OUTPUT. In this tutorial, only one generic output is needed to return the received record. Outputs can be configured the same way as inputs (see previous steps).","Make sure to check the configuration of inputs and outputs as they are not set to Generic by default.","Your processor component is now defined. You can add another component or generate and download your project.","When clicking ADD A COMPONENT in the starter, a new step that allows you to define a new component is created in your project. The intent in this tutorial is to create an output component that receives a record and inserts it into a MySQL database table.","Output components are Processors without any output. In other words, the output is a processor that does not produce any records.","Choose the component type. PROCESSOR/OUTPUT in this case.","Enter the component name. For example, MySQLOutput.","Click CONFIGURATION MODEL. This button lets you specify the required configuration for the component.","For each parameter that you need to add, click the (+) button on the right panel. Enter the name and choose the type of the parameter, then click the tick button to save the changes. In this tutorial, to be able to insert a record in the output MySQL database, the configuration requires the following parameters:+","a connection URL (string)","a username (string)","a password (string)","the name of the table to insert the record in (string).","Closing the configuration panel on the right does not delete your configuration.","Define the Input(s) of the component. For each input that you need to define, click ADD INPUT. In this tutorial, only one input is needed.","Click the input name to access its configuration. You can change the name of the input and define its structure using a POJO. If you added several inputs, repeat this step for each one of them. The input in this tutorial is a generic record. Enable the Generic option.","Do not create any output because the component does not produce any record. This is the only difference between an output an a processor component.","Your output component is now defined. You can add another component or generate and download your project.","Once your project is configured and all the components you need are created, you can generate and download the final project. In this tutorial, the project was configured and three components of different types (input, processor and output) have been defined.","Click GO TO FINISH at the bottom of the page. You are redirected to a page that summarizes the project. On the left panel, you can also see all the components that you added to the project.","Generate the project using one of the two options available:","Download it locally as a ZIP file using the DOWNLOAD AS ZIP button.","Create a GitHub repository and push the project to it using the CREATE ON GITHUB button.","In this tutorial, the project is downloaded to the local machine as a ZIP file.","Once the package is available on your machine, you can compile it using the build tool selected when configuring the project.","In the tutorial, Maven is the build tool selected for the project. In the project directory, execute the mvn package command. If you don’t have Maven installed on your machine, you can use the Maven wrapper provided in the generated project, by executing the ./mvnw package command.","If you have created a Gradle project, you can compile it using the gradle build command or using the Gradle wrapper: ./gradlew build.","The generated project code contains documentation that can guide and help you implementing the component logic. Import the project to your favorite IDE to start the implementation.","The next tutorial shows how to implement an Input component in details.","Methodology","Creating a Hazelcast input component","Creating a Hazelcast output component","Creating a Zendesk REST API connector","Defining an input component","Defining a processor or output component","This tutorial shows how to create a complete working input component for Hazelcast, including:","Registering the component family.","Defining the configurable part and the layout of the component.","Configuring the partition mapper, to let the input split itself to work in a distributed environment.","Configuring the source that is responsible for connecting and reading data from the data source.","Getter and Setter methods are omitted for simplicity in this tutorial.","The following procedures assume that you have already generated the component package from the Talend Component Kit starter. See this tutorial to learn how to generate this package.","Register the component family via a the package-info.java file in the package of the component.","The component configuration includes defining the part of the components that can be configured once integrated to Talend solutions, in addition to the configuration type and the UI layout.","The configuration is a POJO class decorated with annotations from the component framework. In this case, the component is configured as follows:","Read more about component configuration in this document.","The Hazelcast component created through this tutorial needs to work first in distributed environments.","Every input component has to define a partition mapper class.","At runtime, this class heuristically estimates the size of the data to be handled. Based on this estimation and on the capacity of the execution engine of your component, it divides the work of your component to reduce the overall execution time.","For more information about the partition mapper class, see Partition mapper.","The skeleton of the partition mapper looks as follows:","Configuration parameters are annotated with @Option.","Other parameters are considered as services and are injected by the component framework. Services can be local (classes annotated with @Service) or provided by the component framework.","Each of the methods mentioned above now needs to be created.","The @PostConstruct method is used to initialize a Hazelcast client instance.","The HazelcastService is implemented as follows. Every class annotated with @Service can be injected to the component via its constructor.","The method annotated with @PreDestroy cleans up the resources at the end of the execution of the partition mapper.","The method annotated with @Assessor is used to estimate the volume of the dataset to be handled.","Then, you can Implement the methods annotated with @PreDestroy and @Accessor to create a map of the volumes of the Hazelcast cluster members.","The method annotated with @Split dynamically splits the partition mapper into a collection of sub-mappers according to:","the bundle size required by the execution engine to be used.","to the volume of the dataset to handle.","The method annotated with @Emitter generates producers using the component configuration. It can be used to load data to the processing flow of a Talend Job. Each sub-mapper generates one producer.","Once implemented, the Partition Mapper configuration is as follows. For more information about Partition Mappers, refer to this document.","The component configuration and the partition mapper in charge of creating the producers are now defined. At this point, you can implement the source logic that uses the configuration provided by the mapper to read the records from the data source.","To implement a source, you need to define the producer method that creates a record every time it is invoked.","To learn more about producers, refer to this document.","You have now created a complete working input component. You can follow this tutorial to learn how to create unit tests for your new component.","This tutorial shows how to create a complete working output component for Hazelcast, including:","Defining the configurable part and the layout of the component.","Defining the output that is responsible for connecting and writing data to the data source.","The methodology to define the component configuration is described in the Implementing an input component tutorial.","In this case, the input component configuration defined in the tutorial mentioned above can be used as a starting point.","Two additional fields are required for the output component:","These fields are used to determine the key and value attributes for the Hazelcast map.","The output component needs to work in distributed environments and should implement a serializable interface.","The skeleton of the output component looks as follows.","If you need to bulk write the updates accordingly to groups, see Processors and batch processing.","Each of the methods mentioned above now needs to be created.","To make it work, a Hazelcast instance and a Hazelcast map are required. The corresponding attributes need to be added to the output.","In production, avoid creating one instance per thread/worker.","Shut down the Hazelcast client instance created by the method annotated with @PostConstruct and thus free the Hazelcast map reference.","Once implemented, the Output configuration is as follows. For more information about outputs, refer to this document.","You have now created a complete working output component. You can follow this tutorial to learn how to create unit tests for your new component.","This tutorial shows how to create components that consume a REST API.","The component developed as example in this tutorial is an input component that provides a search functionality for Zendesk using its Search API. Lombok is used to avoid writing getter, setter and constructor methods.","You can generate a project using the Talend Components Kit starter, as described in this tutorial.","The input component relies on Zendesk Search API and requires an HTTP client to consume it.","The Zendesk Search API takes the following parameters on the /api/v2/search.json endpoint.","query : The search query.","sort_by : The sorting type of the query result. Possible values are updated_at, created_at, priority, status, ticket_type, or relevance. It defaults to relevance.","sort_order: The sorting order of the query result. Possible values are asc (for ascending) or desc (for descending). It defaults to desc.","Talend Component Kit provides a built-in service to create an easy-to-use HTTP client in a declarative manner, using Java annotations.","No additional implementation is needed for the interface, as it is provided by the component framework, according to what is defined above.","This HTTP client can be injected into a mapper or a processor to perform HTTP requests.","This example uses the basic authentication that supported by the API.","The first step is to set up the configuration for the basic authentication. To be able to consume the Search API, the Zendesk instance URL, the username and the password are needed.","The data store is now configured. It provides a basic authentication token.","Once the data store is configured, you can define the dataset by configuring the search query. It is that query that defines the records processed by the input component.","Your component is configured. You can now create the component logic.","Mappers defined with this tutorial don’t implement the split part because HTTP calls are not split on many workers in this case.","Once the component logic implemented, you can create the source in charge of performing the HTTP request to the search API and converting the result to JsonObject records.","You now have created a simple Talend component that consumes a REST API.","To learn how to test this component, refer to this tutorial.","Testing code that consumes REST APIs can sometimes present many constraints: API rate limit, authentication token and password sharing, API availability, sandbox expiration, API costs, and so on.","As a developer, it becomes critical to avoid those constraints and to be able to easily mock the API response.","The component framework provides an API simulation tool that makes it easy to write unit tests.","This tutorial shows how to use this tool in unit tests. As a starting point, the tutorial uses the component that consumes Zendesk Search API and that was created in a previous tutorial. The goal is to add unit tests for it.","For this tutorial, four tickets that have the open status have been added to the Zendesk test instance used in the tests.","To learn more about the testing methodology used in this tutorial, refer to Component JUnit testing.","Create a unit test that performs a real HTTP request to the Zendesk Search API instance. You can learn how to create a simple unit test in this tutorial.","the authentication configuration using Zendesk instance URL and credentials.","the search query configuration to get all the open ticket, ordered by creation date and sorted in descending order.","The test is now complete and working. It performs a real HTTP request to the Zendesk instance.","As an alternative, you can use mock results to avoid performing HTTP requests every time on the development environment. The real HTTP requests would, for example, only be performed on an integration environment.","To transform the unit test into a mocked test that uses a mocked response of the Zendesk Search API:","Add the two following JUnit rules provided by the component framework.","JUnit4HttpApi: This rule starts a simulation server that acts as a proxy and catches all the HTTP requests performed in the tests. This simulation server has two modes :","capture : This mode forwards the captured HTTP request to the real server and captures the response.","simulation : this mode returns a mocked response from the responses already captured. This rule needs to be added as a class rule.","JUnit4HttpApi: This rule has a reference to the first rule. Its role is to configure the simulation server for every unit test. It passes the context of the running test to the simulation server. This rule needs to be added as a simple (method) rule.","Make the test run in capture mode to catch the real API responses that can be used later in the simulated mode. To do that, set a new talend.junit.http.capture environment variable to true. This tells the simulation server to run in a capture mode.","The captured response is saved in the resources/talend.testing.http package in a JSON format, then reused to perform the API simulation.","This tutorial focuses on writing unit tests for the input component that was created in this previous tutorial.","This tutorial covers:","How to load components in a unit test.","How to create a job pipeline.","How to run the test in standalone mode.","The test class is as follows:","This tutorial shows how to adapt the test configuration of the Zendesk search component that was done in this previous tutorial to make it work in a Continuous Integration environment.","In the test, the Zendesk credentials are used directly in the code to perform a first capture of the API response. Then, fake credentials are used in the simulation mode because the real API is not called anymore.","However, in some cases, you can require to continue calling the real API on a CI server or on a specific environment.","To do that, you can adapt the test to get the credentials depending on the execution mode (simulation/passthrough).","These instructions concern the CI server or on any environment that requires real credentials.","This tutorial uses:","A Maven server that supports password encryption as a credential provider. Encryption is optional but recommended.","The MavenDecrypterRule test rule provided by the framework. This rule lets you get credentials from Maven settings using a server ID.","To create encrypted server credentials for the Zendesk instance:","Create a master password using the command: mvn --encrypt-master-password <password>.","Store this master password in the settings-security.xml file of the ~/.m2 folder.","Encrypt the Zendesk instance password using the command: mvn --encrypt-password <zendesk-password>.","Create a server entry under servers in Maven settings.xml file located in the ~/.m2 folder.","You can store the settings-security.xml and settings.xml files elsewhere that the default location (~/.m2). To do that, set the path of the directory containing the files in the talend.maven.decrypter.m2.location environment variable.","Add the MavenDecrypterRule rule to the test class. This rule allows to inject server information stored in Maven settings.xml file to the test. The rule also decrypts credentials if they are encrypted.","Inject the Zendesk server to the test. To do that, add a new field to the class with the @DecryptedServer annotation, that holds the server ID to be injected.","The MavenDecrypterRule is able to inject the server instance into this class at runtime. The server instance contains the username and the decrypted password.","Use the server instance in the test to get the real credentials in a secured manner.","Once modified, the complete test class looks as follows:","This test will continue to work in simulation mode, because the API simulation proxy is activated.","This tutorial shows how to set up a CI server in passthrough mode using Jenkins.","Log in to Jenkins.","Click New Item to create a new build job.","Enter an Item name (Job name) and choose the freestyle job. Then click OK.","In the Source Code Management section, enter your project repository URL. A GitHub repository is used in this tutorial.","Specify the master branch as Branches to build.","In the Build section, click Add build step and choose Invoke top-level Maven targets.","Choose your Maven version and enter the Maven build command. In this case: clean install. Then, click Save.","The -Dtalend.junit.http.passthrough=true option is part of the build command. This option tells the API simulation proxy to run in passthrough mode. This way, all the HTTP requests made in the test are forwarded to the real API server.","The MavenDecrypterRule rule allows to get the real credentials.","You can configure the passthrough mode globally on your CI server by setting the talend.junit.http.passthrough environment variable to true.","Test the job by selecting Build now, and check that the job has built correctly.","Now your tests run in a simulation mode on your development environment and in a passthrough mode on your CI server.","Talend Component Kit provides a migration mechanism between two versions of a component to let you ensure backward compatibility.","For example, a new version of a component may have some new options that need to be remapped, set with a default value in the older versions, or disabled.","This tutorial shows how to create a migration handler for a component that needs to be upgraded from a version 1 to a version 2. The upgrade to the newer version includes adding new options to the component.","This tutorial assumes that you know the basics about component development and are familiar with component project generation and implementation.","To follow this tutorial, you need:","Java 8","A Talend component development environment using Talend Component Kit. Refer to this document.","Have generated a project containing a simple processor component using the Talend Component Kit Starter.","First, create a simple processor component configured as follows:","Create a simple configuration class that represents a basic authentication and that can be used in any component requiring this kind of authentication.","Create a simple output component that uses the configuration defined earlier. The component configuration is injected into the component constructor.","The version of the configuration class is aligned with the component version. The configuration class is consumed by the component and inherits its version.","By configuring these two classes, the first version of the component is ready to use a simple authentication mechanism.","Now, assuming that the component needs to support a new authentication mode following a new requirement, the next steps are:","Creating a version 2 of the component that supports the new authentication mode.","Handling migration from the first version to the new version.","The second version of the component needs to support a new authentication method and let the user choose the authentication mode he wants to use using a dropdown list.","Add an Oauth2 authentication mode to the component in addition to the basic mode. For example:","The options of the new authentication mode are now defined.","Wrap the configuration created above in a global configuration with the basic authentication mode and add an enumeration to let the user choose the mode to use. For example, create an AuthenticationConfiguration class as follows:","Using the @ActiveIf annotation allows to activate the authentication type according to the selected authentication mode.","Edit the component to use the new configuration that supports an additional authentication mode. Also upgrade the component version from 1 to 2 as its configuration has changed.","The component now supports two authentication modes in its version 2. Once the new version is ready, you can implement the migration handler that will take care of adapting the old configuration to the new one.","What can happen if an old configuration is passed to the new component version?","It simply fails, as the version 2 does not recognize the old version anymore. For that reason, a migration handler that adapts the old configuration to the new one is required. It can be achieved by defining a migration handler class in the @Version annotation of the component class.","An old configuration may already be persisted by an application that integrates the version 1 of the component (Studio or web application).","Add a migration handler class to the component version.","Create the migration handler class MyOutputMigrationHandler","the incoming version, which is the version of the configuration that we are migrating from","a map (key, value) of the configuration, where the key is the configuration path and the value is the value of the configuration.","You need to be familiar with the component configuration path construction to better understand this part. Refer to Defining component layout and configuration.","Assuming that you are familiar with component configuration path construction, let’s implement the migration handler.","As a reminder, the following changes were made since the version 1 of the component:","The configuration BasicAuth from the version 1 is not the root configuration anymore, as it is under AuthenticationConfiguration.","AuthenticationConfiguration is the new root configuration.","The component supports a new authentication mode (Oauth2) which is the default mode in the version 2 of the component.","To migrate the old component version to the new version and to keep backward compatibility, you need to:","Remap the old configuration to the new one.","Give the adequate default values to some options.","In the case of this scenario, it means making all configurations based on the version 1 of the component have the authenticationMode set to basic by default and remapping the old basic authentication configuration to the new one.","if a configuration has been renamed between 2 component versions, you can get the old configuration option from the configuration map by using its old path and set its value using its new path.","You can now upgrade your component without losing backward compatibility."]},{"lang":"en","title":"UiSpec Server","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/server-uispec.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["UiSpec Server","In this article"],"lvl1":["Coordinates","Configuring the UiSpec server","HTTP API","Configuring the server module","Services"],"lvl2":["Adding custom entries to the forms","Adding custom converters (selecting the widget or rendering)","Enabling help/hints","Client in Play","Defining a dropdown with all root configurations","Populate a dropdown from a remote call","Populate a dropdown with a list of references","Reloading the form based on the selected root","Reloading the form based on a selected entity reference","Component UiSpec Server"],"lvl3":["Going further: make this field hidden when empty","Overview","Paths","Definitions"],"text":["The UiSpec server is a companion application for the Component Server. It provides a client to the Component Server which serves UiSpec payload to integrate with the client JavaScript UiForm library.","the configuration is read from system properties, environment variables, …. If you use playx-microprofile-config, you can also use typesafe configuration.","Key","Description","Default","talend.component.proxy.actions.proposable.cached","If true the proposable (suggestion lists only depending on the server state) will be cached, otherwise they will be requested for each form rendering.","true","talend.component.proxy.application.home","A home location for relative path resolution (optional).","${playx.application.home}","talend.component.proxy.client.executor.threads","For the client executor, the number of threads.","64","talend.component.proxy.client.providers","List of JAX-RS providers to register on the client, at least a JSON-B one should be here.","-","talend.component.proxy.client.timeouts.connect","The connect timeout for the communication with the server.base in ms.","60000","talend.component.proxy.client.timeouts.read","The read timeout for the communication with the server.base in ms.","600000","talend.component.proxy.jcache.active","Should the server use jcache to store catalog information and refresh it with some polling. If so the keys talend.component.proxy.jcache.caches.$cacheName.expiry.duration, talend.component.proxy.jcache.caches.$cacheName.management.active and talend.component.proxy.jcache.caches.$cacheName.statistics.active will be read to create a JCache MutableConfiguration. Also note that if all the cachesshare the same configuration you can ignore the $cacheName layer.","true","talend.component.proxy.jcache.cache-key.name","A header to use in the cache key (to represent a tenant or equivalent).","-","talend.component.proxy.jcache.provider","Caching provider implementation to use (only set it if ambiguous).","-","talend.component.proxy.jcache.refresh.period","Number of seconds used to check if the server must be refreshed.","60","talend.component.proxy.processing.headers","The headers to append to the request when contacting the server. Format is a properties one. You can put a hardcoded value or a placeholder (${key}).In this case it will be read from the request attributes and headers.","-","talend.component.proxy.processing.uiSpec.patch","An optional location (absolute or resolved from APP_HOME environment variable). It can take an optional query parameter force which specifies if the startup should fail if the file is not resolved. The resolution is done per configuration type (datastore, dataset, …) but fallbacks on default type if the file is not found.","The values can be keys in the resource bundle org.talend.sdk.component.proxy.enrichment.i18n.Messages. Use that for display names, placeholders etc…The content","component-uispec-metadata.%s.json?force=false","talend.component.proxy.server.base","The base to contact the remote server (NOTE: it is recommanded to put a load balancer if you have multiple instances.)","-","As shown in the table above, you can customize the forms by type. The format reuses Talend Component Kit HTTP API (properties model) and defines two main types of extensions:","prependProperties: Lists all the models of properties added to the form before the actual underlying form.","appendProperties: Lists all the models of properties added to the form after the actual underlying form.","If you don’t specify a name, the path is used to deduce the name automatically.","Always make sure to define a root object for these properties. Do not use dots in the path value. It is recommended to prefix it with a $ character.","When developing a org.talend.sdk.component.form.internal.converter.CustomPropertyConverter CDI, the proxy adds it to the UiSpecService service and uses it with a high priority to convert the server model to a UiSpec model.","To make it a CDI bean, add @Dependent to the class and if you use the Play integration, customize the bean array: playx.cdi.beans.customs += {className: org.talend.myapp.MyConverter}.","This allows to use a custom @Ui API and advanced modeling when specific to applications. Converters are sorted respecting to the @Priority value. If the annotation is missing, the priority defaults to 0.","It is possible to show under the inputs the help about each property. To do that, you must set a PropertyContext.Configuration instance on UiSpecService with the includeDocumentationMetadata attribute set to true.","The client to use to connect to the Talend Component Kit server is the CXF client, using HttpClient HC (NIO) transport. When you use the Play module, it can be configured with its standard properties prefixed by talend.component.proxy..","You can find more information on CXF website.","The special dynamic_values action builtin::roots can be used for a dropdown filled with all available root types.","Here is a sample patch file:","In some cases you will want to call a remote service giving you a list of data. For that there is a specific http builtin trigger which will be caught on the proxy and redirected to the configured server to map it as a dynamic_values trigger.","Assume you want to call http:://foo.com/bar propagating the cookies to get the proposals for the entry bar, then you will configure it this way:","The configuration of the call is passed through a comma separated list in parenthesis as seen in previous snippet. The configuration entries are the following ones:","Name","Description","Sample","url","The target server to call. Note that placeholder are supported and filled from request headers (placeholderProvider).","proposals.service.com","headers","; separated list of headers to propagate (using placeholderProvider).","cookie,Authorization","accept","The Accept header. Note that current we only support to parse JSON output and it defaults to application/json.","application/v1+json","object","Boolean (default to false) to set to true if the response payload is an object and not a list.","true","objectKey","If object is true, the key to extract to get the list to process.","items","id","Name of the field to extract from an item of the response list to map to the identifier of the proposal (default to id).","id","name","Name of the field to extract from an item of the response list to map to the label of the proposal (default to name).","label","In some forms you will want to populate a dropdown with a list of entities available in your database. For that, the proxy will rely on a SPI called Integration. If you don’t implement it, it uses a Guice integration if Guice is in the classpath or a native CDI integration otherwise.","The integration will then let the proxy lookup a ReferenceService implementation which will provide from a configuration type type and name (for instance datastore, MyDataBaseConfig) the list of references you want to propose to the end user.","Here is very simple implementation:","Generally this kind of completion will be activated under the hood by the proxy using this kind of metadata:","In some cases you will want to hide this field if the proposals are ⇐ 1, in this case you can use a condition:","The builtin::root::reloadFromId action, with the reloadForm type, allows to reload the whole form:","It is common to have a dropdown with the list of roots and to reload the form when one is selected.","The client side (javascript) is now fully encapsulated in ComponentForm from @talend/ui.","The builtin::root::reloadFromParentEntityId action, with the reloadFromParentEntityId type, allows to reload the whole form:","references are automatically initialized if you use PropertiesService#filterProperties.","These endpoints allow to obtain UiSpec representations of the component/configuration types properties.","Version : v1","Contact : Talend Contact Email : contact@talend.com","License : Apache 2.0 License URL : www.apache.org/licenses/LICENSE-2.0.html Terms of service : null","Host : host:port BasePath : /componentproxy/api/v1 Schemes : HTTP, HTTPS","action","configuration","configurations","dataset","datastore","form","icon","persistence","ui spec","uispec","configuration types has action that can be executed using this endpoint","Type","Name","Schema","Query","action optional","string","Query","family optional","string","Query","language optional","string","Query","type optional","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","< string, CompletionStageMapStringObject > map","400","This response is returned when the action is null","ProxyErrorPayload","404","This response is returned when no action is found","ProxyErrorPayload","520","This response is returned when the action raise an unhandled error","ProxyErrorPayload","application/json","application/json","action","configurations","Every configuration has an icon. In the response an icon key is returned. this icon key can be one of the bundled icons or a custom one. The consumer of this endpoint will need to check if the icon key is in the icons bundle otherwise the icon need to be gathered using the familyId from this endpoint configurations/{id}/icon","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","datastore","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","UiNode","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","CompletionStageByte[]","application/json","application/json","application/octet-stream","icon","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","formId required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type : object","Type : object","Type : object","Type : object","Type : object","Type : object","Name","Description","Schema","id optional","The identifier of the entity related to current request. It is generally thecreated entity of updated one.","string","Name","Schema","defaultValue optional","object","description optional","string","enumValues optional","< string > array","id optional","string","items optional","JsonSchema","maxItems optional","integer (int32)","maxLength optional","integer (int32)","maximum optional","number (double)","minItems optional","integer (int32)","minLength optional","integer (int32)","minimum optional","number (double)","pattern optional","string","properties optional","< string, JsonSchema > map","ref optional","string","required optional","< string > array","schema optional","string","title optional","string","type optional","string","uniqueItems optional","boolean","Name","Schema","name optional","string","value optional","string","Name","Description","Schema","children optional","The list of configuration reusing this one as a reference (can be created \"next\").","< string > array","familyId optional","The identifier of the family of this configuration.","string","familyLabel optional","The display name of the family of this configuration.","string","icon optional","The icon of this configuration. If you use an existing bundle (@talend/ui/icon), ensure it is present by default and if not do a request using the family on the related endpoint.","string","id optional","The identifier of this configuration/node.","string","label optional","The display name of this configuration.","string","name optional","The technical name of this node (it is human readable but not i18n friendly), useful for debug purposes.","string","version optional","The version of this configuration for the migration management.","integer (int32)","Name","Description","Schema","nodes optional","The list of nodes matching the request. The key is the node identifier.","< string, Node > map","Name","Schema","path optional","string","type optional","string","Name","Schema","key optional","string","path optional","string","Name","Description","Schema","code optional","The error code independently of the locale and not as precise as a message (not context aware).","string","message optional","A human readable message to help understanding the error","string","Name","Schema","action optional","string","family optional","string","onEvent optional","string","options optional","< Option > array","parameters optional","< Parameter > array","type optional","string","Name","Schema","jsonSchema optional","JsonSchema","properties optional","object","uiSchema optional","< UiSchema > array","Name","Description","Schema","metadata optional","The metadata associated to the node if needed by the UI.","Node","ui optional","The ui specification corresponding to the requested node. It is literally the form representing this configuration.","Ui","Name","Schema","autoFocus optional","boolean","condition optional","< string, < object > array > map","description optional","string","disabled optional","boolean","itemWidget optional","string","items optional","< UiSchema > array","key optional","string","options optional","< string, string > map","placeholder optional","string","readOnly optional","boolean","required optional","boolean","restricted optional","boolean","title optional","string","titleMap optional","< NameValue > array","triggers optional","< Trigger > array","type optional","string","widget optional","string","There are two ways to call the save endpoint. If you don’t want to pass the form identifier and prefer to use a generic endpoint that simply passes the type of configuration you are configuring, then you need to modify your enrichment configuration to ensure that the form identifier is present and to specify which form field it is.","To do that, add the proxyserver::formId Boolean to the metadata:","Only the first property with proxyserver::formId set to \"true\" is used. The path cannot contain any array.","The server module contains several configurations that you can set in:","Environment variables.","System properties.","A file located based on the --component-configuration CLI option.","the configuration is read from system properties, environment variables, ….","Key","Description","Default","talend.component.server.component.coordinates","A comma separated list of gav to locate the components","-","talend.component.server.component.extend.dependencies","Should the component extensions add required dependencies.","true","talend.component.server.component.registry","A property file where the value is a gav of a component to register (complementary with coordinates)","-","talend.component.server.documentation.active","Should the /documentation endpoint be activated.","true","talend.component.server.execution.dataset.retriever.timeout","How long the read execution endpoint can last (max)","180","talend.component.server.execution.pool.size","The size of the execution pool for runtime endpoints.","64","talend.component.server.execution.pool.wait","How long the application waits during shutdown for the execution tasks to complete","PT10S","talend.component.server.jaxrs.exceptionhandler.defaultMessage","If set it will replace any message for exceptions. Set to false to use the actual exception message.","false","talend.component.server.maven.repository","The local maven repository used to locate components and their dependencies","-","talend.component.server.monitoring.brave.reporter.async","When using url or kafka reporter, you can configure the async reporter with properties passed to this configuration entry.Ex: messageTimeout=5000,closeTimeout=5000.","console","talend.component.server.monitoring.brave.reporter.type","The brave reporter to use to send the spans. Supported values are [log, noop]. When configuration is needed,you can use this syntax to configure the repoter if needed: <name>(config1=value1, config2=value2), for example: url(endpoint=http://brave.company.com.","In log mode, if environment variable TRACING_ON doesn’t exist or is set to false, noop will be selected, and is set to true, TRACING_KAFKA_URL, TRACING_KAFKA_TOPIC and TRACING_SAMPLING_RATE will configure kafka reporter..","noop","talend.component.server.monitoring.brave.sampling.action.rate","The accuracy rate of the sampling for action endpoints.","-1","talend.component.server.monitoring.brave.sampling.component.rate","The accuracy rate of the sampling for component endpoints.","-1","talend.component.server.monitoring.brave.sampling.configurationtype.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.documentation.rate","The accuracy rate of the sampling for documentation endpoint.","-1","talend.component.server.monitoring.brave.sampling.environment.rate","The accuracy rate of the sampling for environment endpoints.","-1","talend.component.server.monitoring.brave.sampling.execution.rate","The accuracy rate of the sampling for execution endpoints.","1","talend.component.server.monitoring.brave.sampling.rate","The accuracy rate of the sampling.","-1.","talend.component.server.monitoring.brave.service.name","The name used by the brave integration (zipkin)","component-server","talend.component.server.security.command.handler","How to validate a command/request. Accepted values: securityNoopHandler.","securityNoopHandler","talend.component.server.security.connection.handler","How to validate a connection. Accepted values: securityNoopHandler.","securityNoopHandler","The module provides some services usable to fulfill some basic requirements of the component interaction:","ConfigurationFormatter to (un)flatten the properties (JSON from/to key-value format)","ConfigurationVisitorService to browse properties and identify credentials to cipher them","ValidationService to validate a JSON properties set before any persistence action"]},{"lang":"en","title":"UiSpec proxy server API","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-proxy-server-api.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["UiSpec proxy server API","In this article"],"lvl1":["Component UiSpec Server"],"lvl2":["Overview","Paths","Definitions"],"lvl3":["Version information","Contact information","License information","URI scheme","Tags","This endpoint execute an action required by a form.","Return all the available root configuration (Data store like) from the component server","Return a form description ( Ui Spec ) without a specific configuration","Return a form description ( Ui Spec ) of a specific configuration","Return the configuration icon file in png format","Update a configuration.","Saves a configuration based on a type. Concretely it is the same as /persistence/save/{formId} but the formId is contained into the payload itself and marked in the metadata as such.","Saves a configuration based on a form identifier.","CompletionStage","CompletionStageByte[]","CompletionStageCollectionSimplePropertyDefinition","CompletionStageMapStringObject","CompletionStageMapStringString","CompletionStageNodes","EntityRef","JsonSchema","NameValue","Node","Nodes","Option","Parameter","ProxyErrorPayload","Trigger","Ui","UiNode","UiSchema"],"text":["These endpoints allow to obtain UiSpec representations of the component/configuration types properties.","Version : v1","Contact : Talend Contact Email : contact@talend.com","License : Apache 2.0 License URL : www.apache.org/licenses/LICENSE-2.0.html Terms of service : null","Host : host:port BasePath : /componentproxy/api/v1 Schemes : HTTP, HTTPS","action","configuration","configurations","dataset","datastore","form","icon","persistence","ui spec","uispec","configuration types has action that can be executed using this endpoint","Type","Name","Schema","Query","action optional","string","Query","family optional","string","Query","language optional","string","Query","type optional","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","< string, CompletionStageMapStringObject > map","400","This response is returned when the action is null","ProxyErrorPayload","404","This response is returned when no action is found","ProxyErrorPayload","520","This response is returned when the action raise an unhandled error","ProxyErrorPayload","application/json","application/json","action","configurations","Every configuration has an icon. In the response an icon key is returned. this icon key can be one of the bundled icons or a custom one. The consumer of this endpoint will need to check if the icon key is in the icons bundle otherwise the icon need to be gathered using the familyId from this endpoint configurations/{id}/icon","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","datastore","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","Nodes","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","UiNode","application/json","application/json","configurations","dataset","datastore","form","ui spec","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","CompletionStageByte[]","application/json","application/json","application/octet-stream","icon","Type","Name","Schema","Path","id required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","type required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type","Name","Schema","Path","formId required","string","HTTP Code","Description","Schema","200","successful operation Headers : Talend-Component-Server-Error (boolean) : This header indicate the error origin. true indicate an error from the component server, false indicate that the error is from this proxy.","EntityRef","application/json","application/json","configurations","dataset","datastore","form","persistence","ui spec","Type : object","Type : object","Type : object","Type : object","Type : object","Type : object","Name","Description","Schema","id optional","The identifier of the entity related to current request. It is generally thecreated entity of updated one.","string","Name","Schema","defaultValue optional","object","description optional","string","enumValues optional","< string > array","id optional","string","items optional","JsonSchema","maxItems optional","integer (int32)","maxLength optional","integer (int32)","maximum optional","number (double)","minItems optional","integer (int32)","minLength optional","integer (int32)","minimum optional","number (double)","pattern optional","string","properties optional","< string, JsonSchema > map","ref optional","string","required optional","< string > array","schema optional","string","title optional","string","type optional","string","uniqueItems optional","boolean","Name","Schema","name optional","string","value optional","string","Name","Description","Schema","children optional","The list of configuration reusing this one as a reference (can be created \"next\").","< string > array","familyId optional","The identifier of the family of this configuration.","string","familyLabel optional","The display name of the family of this configuration.","string","icon optional","The icon of this configuration. If you use an existing bundle (@talend/ui/icon), ensure it is present by default and if not do a request using the family on the related endpoint.","string","id optional","The identifier of this configuration/node.","string","label optional","The display name of this configuration.","string","name optional","The technical name of this node (it is human readable but not i18n friendly), useful for debug purposes.","string","version optional","The version of this configuration for the migration management.","integer (int32)","Name","Description","Schema","nodes optional","The list of nodes matching the request. The key is the node identifier.","< string, Node > map","Name","Schema","path optional","string","type optional","string","Name","Schema","key optional","string","path optional","string","Name","Description","Schema","code optional","The error code independently of the locale and not as precise as a message (not context aware).","string","message optional","A human readable message to help understanding the error","string","Name","Schema","action optional","string","family optional","string","onEvent optional","string","options optional","< Option > array","parameters optional","< Parameter > array","type optional","string","Name","Schema","jsonSchema optional","JsonSchema","properties optional","object","uiSchema optional","< UiSchema > array","Name","Description","Schema","metadata optional","The metadata associated to the node if needed by the UI.","Node","ui optional","The ui specification corresponding to the requested node. It is literally the form representing this configuration.","Ui","Name","Schema","autoFocus optional","boolean","condition optional","< string, < object > array > map","description optional","string","disabled optional","boolean","itemWidget optional","string","items optional","< UiSchema > array","key optional","string","options optional","< string, string > map","placeholder optional","string","readOnly optional","boolean","required optional","boolean","restricted optional","boolean","title optional","string","titleMap optional","< NameValue > array","triggers optional","< Trigger > array","type optional","string","widget optional","string"]},{"lang":"en","title":"UiSpec proxy server configuration","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-proxy-server-configuration.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["UiSpec proxy server configuration","In this article"],"text":["the configuration is read from system properties, environment variables, …. If you use playx-microprofile-config, you can also use typesafe configuration.","Key","Description","Default","talend.component.proxy.actions.proposable.cached","If true the proposable (suggestion lists only depending on the server state) will be cached, otherwise they will be requested for each form rendering.","true","talend.component.proxy.application.home","A home location for relative path resolution (optional).","${playx.application.home}","talend.component.proxy.client.executor.threads","For the client executor, the number of threads.","64","talend.component.proxy.client.providers","List of JAX-RS providers to register on the client, at least a JSON-B one should be here.","-","talend.component.proxy.client.timeouts.connect","The connect timeout for the communication with the server.base in ms.","60000","talend.component.proxy.client.timeouts.read","The read timeout for the communication with the server.base in ms.","600000","talend.component.proxy.jcache.active","Should the server use jcache to store catalog information and refresh it with some polling. If so the keys talend.component.proxy.jcache.caches.$cacheName.expiry.duration, talend.component.proxy.jcache.caches.$cacheName.management.active and talend.component.proxy.jcache.caches.$cacheName.statistics.active will be read to create a JCache MutableConfiguration. Also note that if all the cachesshare the same configuration you can ignore the $cacheName layer.","true","talend.component.proxy.jcache.cache-key.name","A header to use in the cache key (to represent a tenant or equivalent).","-","talend.component.proxy.jcache.provider","Caching provider implementation to use (only set it if ambiguous).","-","talend.component.proxy.jcache.refresh.period","Number of seconds used to check if the server must be refreshed.","60","talend.component.proxy.processing.headers","The headers to append to the request when contacting the server. Format is a properties one. You can put a hardcoded value or a placeholder (${key}).In this case it will be read from the request attributes and headers.","-","talend.component.proxy.processing.uiSpec.patch","An optional location (absolute or resolved from APP_HOME environment variable). It can take an optional query parameter force which specifies if the startup should fail if the file is not resolved. The resolution is done per configuration type (datastore, dataset, …) but fallbacks on default type if the file is not found.","The values can be keys in the resource bundle org.talend.sdk.component.proxy.enrichment.i18n.Messages. Use that for display names, placeholders etc…The content","component-uispec-metadata.%s.json?force=false","talend.component.proxy.server.base","The base to contact the remote server (NOTE: it is recommanded to put a load balancer if you have multiple instances.)","-"]},{"lang":"en","title":"User Interface API","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/ref-ui.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["User Interface API","In this article"],"lvl1":["@DefaultValue","@OptionsOrder","@AutoLayout","@GridLayout","@GridLayouts","@HorizontalLayout","@VerticalLayout","@Code","@Credential","@Structure","@TextArea"],"text":["Provide a default value the UI can use - only for primitive fields.","API: @org.talend.sdk.component.api.configuration.ui.DefaultValue","Sample:","Allows to sort a class properties.","API: @org.talend.sdk.component.api.configuration.ui.OptionsOrder","Sample:","Request the rendered to do what it thinks is best.","API: @org.talend.sdk.component.api.configuration.ui.layout.AutoLayout","Sample:","Advanced layout to place properties by row, this is exclusive with @OptionsOrder.","API: @org.talend.sdk.component.api.configuration.ui.layout.GridLayout","Sample:","Allow to configure multiple grid layouts on the same class, qualified with a classifier (name)","API: @org.talend.sdk.component.api.configuration.ui.layout.GridLayouts","Sample:","Put on a configuration class it notifies the UI an horizontal layout is preferred.","API: @org.talend.sdk.component.api.configuration.ui.layout.HorizontalLayout","Sample:","Put on a configuration class it notifies the UI a vertical layout is preferred.","API: @org.talend.sdk.component.api.configuration.ui.layout.VerticalLayout","Sample:","Mark a field as being represented by some code widget (vs textarea for instance).","API: @org.talend.sdk.component.api.configuration.ui.widget.Code","Sample:","Mark a field as being a credential. It is typically used to hide the value in the UI.","API: @org.talend.sdk.component.api.configuration.ui.widget.Credential","Sample:","Mark a List<String> or Map<String, String> field as being represented as the component data selector (field names generally or field names as key and type as value).","API: @org.talend.sdk.component.api.configuration.ui.widget.Structure","Sample:","Mark a field as being represented by a textarea(multiline text input).","API: @org.talend.sdk.component.api.configuration.ui.widget.TextArea","Sample:"]},{"lang":"en","title":"Wall of Fame","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/contributors.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Wall of Fame"],"lvl2":["Romain Manni-Bucau","#1665 commits","Anas KHABALI","#249 commits","Ivan Gonchar","#192 commits","Florent LB","#123 commits","Chao MENG","#23 commits","ypiel","#17 commits","Jean-Michel FRANCOIS","#17 commits","Jimmy Somsanith","#9 commits","Axel MAUMONT","#3 commits","","#2 commits","Pierre Bailly-Ferry","#1 commit"],"text":["Joined the Apache EE family (TomEE, Johnzon, BatchEE...) in 2011. My goal is to make development a detail of an idea becoming reality. Blog: https://rmannibucau.metawerx.net","I am a software developer at @Talend For my personal projects you can check them @khabali Blog: https://khabali.github.io","","","R&D","","","Java and Javascript developer","","",""]},{"lang":"en","title":"Widget and validation gallery","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/gallery.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Widget and validation gallery","In this article"],"lvl1":["Widgets","Validations"],"lvl2":["Input/Text","Password","Textarea","Checkbox","List","Table","Code","Schema","Property validation","Property validation with Pattern","Data store validation"],"text":["This gallery shows how widgets and validations are rendered in both Studio and web environments, along with sample implementation code.","Widgets allow to easily implement different types of input fields to your components.","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","or","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","Validations help restricting what can be entered or selected in an input field, to make sure that the value complies with the expected type of information.","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","Studio Rendering","Web Rendering","You can also use other types of validation that are similar to @Pattern:","@Min, @Max for numbers.","@Unique for collection values.","@Required for a required configuration."]},{"lang":"en","title":"Wrapping a Beam I/O","version":"1.0.5","url":"https://talend.github.io/component-runtime/main/1.0.5/wrapping-a-beam-io.html","date":"2018-09-19T14:36:13Z","timestamp":1537367773040,"lvl0":["Wrapping a Beam I/O","In this article"],"lvl1":["Limitations","Wrapping an input","Wrapping an output","Tip","Advanced","Related articles"],"lvl2":["Coder","JsonObject to IndexedRecord","Sample"],"text":["This part is limited to specific kinds of Beam PTransform:","PTransform<PBegin, PCollection<?>> for inputs.","PTransform<PCollection<?>, PDone> for outputs. Outputs must use a single (composite or not) DoFn in their apply method.","To illustrate the input wrapping, this procedure uses the following input as a starting point (based on existing Beam inputs):","To wrap the Read in a framework component, create a transform delegating to that Read with at least a @PartitionMapper annotation and using @Option constructor injections to configure the component. Also make sure to follow the best practices and to specify @Icon and @Version.","To illustrate the output wrapping, this procedure uses the following output as a starting point (based on existing Beam outputs):","You can wrap this output exactly the same way you wrap an input, but using @Processor instead of:","Note that the org.talend.sdk.component.runtime.beam.transform.DelegatingTransform class fully delegates the \"expansion\" to another transform. Therefore, you can extend it and implement the configuration mapping:","In terms of classloading, when you write an I/O, the Beam SDK Java core stack is assumed as provided in Talend Component Kit runtime. This way, you don’t need to include it in the compile scope, it would be ignored anyway.","If you need a JSonCoder, you can use the org.talend.sdk.component.runtime.beam.factory.service.PluginCoderFactory service, which gives you access to the JSON-P and JSON-B coders.","There is also an Avro coder, which uses the FileContainer. It ensures it is self-contained for IndexedRecord and it does not require—as the default Apache Beam AvroCoder—to set the schema when creating a pipeline. It consumes more space and therefore is slightly slower, but it is fine for DoFn, since it does not rely on serialization in most cases. See org.talend.sdk.component.runtime.beam.transform.avro.IndexedRecordCoder.","The mainstream model is JsonObject but it is common to have a legacy system using IndexedRecord. To mitigate the transition, you can use the following PTransforms:","IndexedRecordToJson: to convert an IndexedRecord to a JsonObject.","JsonToIndexedRecord: to convert a JsonObject to an IndexedRecord.","SchemalessJsonToIndexedRecord: to convert a JsonObject to an IndexedRecord with AVRO schema inference.","Because the Beam wrapper does not respect the standard Talend Component Kit programming model ( for example, there is no @Emitter), you need to set the <talend.validation.component>false</talend.validation.component> property in your pom.xml file (or equivalent for Gradle) to skip the component programming model validations of the framework.","Defining an input component","Defining a processor or output component","Creating a job pipeline","Beam testing","Testing in multiple environments"]}]