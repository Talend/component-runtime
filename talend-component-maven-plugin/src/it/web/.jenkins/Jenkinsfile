//
//  Copyright (C) 2006-2024 Talend Inc. - www.talend.com
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

/**
 * job-dsl plugin page api documentation for this project
 * https://jenkins-connectors.datapwn.com/plugin/job-dsl/api-viewer/index.html
 * REM on naming:
 *   - All constants have been prefix with "_" not to be confound with env variables
 */

/**
 * Job configuration
 */
// Local folder location
final String _SERVER_PORT="8081"
final String _INSTALL_DIR="webtester"
final String _COVERAGE_DIR="coverage"
final String _DOWNLOAD_DIR="/tmp/download" // volume mounted on the podConfiguration, if you edit it, change it in the pod file
final String _SERVER_DIR="${_INSTALL_DIR}/component-server-distribution"
// Local artifact definition
final String _ARTIFACT_TEST_RESULTS="**/src/it/web/test/**/*"
final String _ARTIFACT_COVERAGE="**/${_COVERAGE_DIR}/**/*"
final String _ARTIFACT_LOGS_COMPONENT_SERVER="**/${_SERVER_DIR}/logs/component-server*"
final String _ARTIFACT_LOGS_MEECROWAVE="**/${_SERVER_DIR}/logs/meecrowave*"
final String _ARTIFACT_SETENV="**/${_SERVER_DIR}/bin/setenv.sh"
final String _ARTIFACT_REGISTRY="**/${_SERVER_DIR}/conf/components-registry.properties"

/**
 * Credentials
 */

final def _NEXUS_CREDENTIALS = usernamePassword(
  credentialsId: 'nexus-artifact-zl-credentials',
  usernameVariable: 'NEXUS_USER',
  passwordVariable: 'NEXUS_PASS')

final def _TENANT_ID_RD = string(
  credentialsId: 'component-runtime-api-tenant-id-rd',
  variable: 'componentRuntimeApiTenantId_Rd'
)

/**
 * Options
 */
String _API_TEST_RESULT_PATTERN = '**/target/surefire-reports/**/*.xml'
String _API_TEST_FILES_PATTERN = '**/src/it/web/test/**/*.json'

// Default value for parameters
String runtimeVersion = "default"
String apiTesterEnv = "component_runtime_ci"
String tenantInstance = "eu"

/**
 * The pipeline
 */
pipeline {
  /**
   * agent
   */
  agent {
    kubernetes {
      yamlFile 'talend-component-maven-plugin/src/it/web/.jenkins/jenkins_pod_api_test.yml'
      defaultContainer 'main'
    }
  }
  /**
   * parameters
   */
  parameters {
    string(
      name: 'CYCLE',
      defaultValue: 'default',
      description: 'Test Cycle Id filled by Test Orchestrator, it is only important for TTO.'
    )
    string(
      name: 'RUNTIME_VERSION',
      defaultValue: 'default',
      description: 'Choose the component-runtime.version to be used from Nexus. Keep default to use the pom version (1.45.0 minimum) or an other ex: 1.45.0-SNAPSHOT'
    )
    booleanParam(
      name: 'JENKINS_DEBUG',
      defaultValue: false,
      description: '''
        Add an extra comportment to the job allowing to extra analysis:
          - keep the pod alive for debug purposes at the end
          - activate some extra log artifacts''')
  }
  /**
   * environment
   */
  environment {
    APP_ID = '579232'
    TALEND_REGISTRY = "artifactory.datapwn.com"
    TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "artifactory.datapwn.com/docker-io-remote/"

    final String _ROOT_PATH = "${WORKSPACE}"
    final String _SCRIPTS_PATH = "${_ROOT_PATH}/talend-component-maven-plugin/src/it/web/.jenkins/scripts"
    final String _TESTS_PATH = "${_ROOT_PATH}/talend-component-maven-plugin/src/it/web/test"

    MAVEN_SETTINGS = "${_ROOT_PATH}/talend-component-maven-plugin/src/it/web/.jenkins/settings.xml"
    DECRYPTER_ARG = "--define talend.maven.decrypter.m2.location=${_ROOT_PATH}/.jenkins/"
    MAVEN_OPTS = [
      "-Dmaven.artifact.threads=256",
      "-Dorg.slf4j.simpleLogger.showDateTime=true",
      "-Dorg.slf4j.simpleLogger.showThreadName=true",
      "-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss",
    ].join(' ')

  }
  /**
   * options
   */
  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '30', numToKeepStr: '30'))
    timeout(time: 180, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }
  /**
   * stages
   */
  stages {
    stage('Validate parameters') {
      steps {
        ///////////////////////////////////////////
        // asdf install
        ///////////////////////////////////////////
        script {
          println "asdf install the content of repository .tool-versions'\n"
          sh 'bash .jenkins/scripts/asdf_install.sh'
        }
        ///////////////////////////////////////////
        // Validate parameters
        ///////////////////////////////////////////
        script {

          println "Get actual tck version from ${_ROOT_PATH}/pom.xml: \n"
          TCOMP_VERSION = sh (
            script: "bash ${_SCRIPTS_PATH}/pom-get-version.sh ${_ROOT_PATH}/pom.xml",
            returnStdout: true
          ).trim()

          println "TCOMP_VERSION on the pom file is ${TCOMP_VERSION}\n"

          // RUNTIME_VERSION
          try {
            runtimeVersion = "${RUNTIME_VERSION}"
          }
          catch (groovy.lang.MissingPropertyException ignored) {
            runtimeVersion = "default"
          }

          println "Requested TCOMP_VERSION is ${runtimeVersion}\n"

          if (runtimeVersion == "default") {
            runtimeVersion = "${TCOMP_VERSION}"
            println "RUNTIME_VERSION not supplied, local value will be used (${runtimeVersion})\n"
          }
        }
        ///////////////////////////////////////////
        // Print build config
        ///////////////////////////////////////////
        script {

          println("Job info:\n" +
            " - Tenant instance: ${tenantInstance}\n" +
            " - Runtime version: ${runtimeVersion}\n" +
            " - API Tester used environment: ${apiTesterEnv}\n")

          println("Talend Test Orchestrator info:\n" +
            "PLATFORM: ${params.PLATFORM}\n" +
            "ENVIRONMENT: ${params.ENVIRONMENT}\n" +
            "FRAGMENT_URL: ${params.FRAGMENT_URL}\n" +
            "DEPLOYMENT_UNIT: ${params.DEPLOYMENT_UNIT}\n" +
            "CYCLE: ${params.CYCLE}\n" +
            "DEPLOYED_PRODUCTS: ${params.DEPLOYED_PRODUCTS}")
        }
        ///////////////////////////////////////////
        // Updating build displayName and description
        ///////////////////////////////////////////
        script {

          String user_name = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').userId[0]
          if ( user_name == null) { user_name = "auto" }

          currentBuild.displayName = (
            "#$currentBuild.number: $user_name - $runtimeVersion"
          )

          // updating build description
          String description = """
            Debug: $params.JENKINS_DEBUG""".stripIndent()
          job_description_append(description)
        }
      }
    }
    stage('Build component-runtime fast') {
      when {
        expression { runtimeVersion.contains('-SNAPSHOT') }
      }
      steps {
        withCredentials([_NEXUS_CREDENTIALS]) {
          script {
            sh "bash ${_SCRIPTS_PATH}/tcomp-build-fast.sh ${_ROOT_PATH}/pom.xml"
          }
        }
      }
    }
    stage('Build the sample connector') {
      when {
        expression { runtimeVersion.contains('-SNAPSHOT') }
      }
      steps {
        withCredentials([_NEXUS_CREDENTIALS]) {
          script {
            sh "bash ${_SCRIPTS_PATH}/tcomp-build-sample-connector.sh ${_ROOT_PATH}/sample-parent/sample-connector/pom.xml"
          }
        }
      }
    }
    stage('Prepare component-runtime server') {
      steps {
        withCredentials([_NEXUS_CREDENTIALS]) {
          script {
            sh """
              bash "${_SCRIPTS_PATH}/server-registry-init.sh" "${_DOWNLOAD_DIR}" \
                                                              "${_INSTALL_DIR}" \
                                                              "${_COVERAGE_DIR}" \
                                                              "${runtimeVersion}" \
                                                              '1.41.0' \
                                                              '/home/jenkins/.m2/repository' \
                                                              "${_SERVER_PORT}"
              """.stripIndent()
          }
        }
      }
      post {
        always {
          println "Artifact SETENV: ${_ARTIFACT_SETENV}\n"
          archiveArtifacts artifacts: "${_ARTIFACT_SETENV}", allowEmptyArchive: false, onlyIfSuccessful: false
          println "Artifact REGISTRY: ${_ARTIFACT_REGISTRY}\n"
          archiveArtifacts artifacts: "${_ARTIFACT_REGISTRY}", allowEmptyArchive: false, onlyIfSuccessful: false
        }
      }
    }
    stage('Start component-runtime server') {
      steps {
        withCredentials([_NEXUS_CREDENTIALS]) {
          script {
            sh """
              bash "${_SCRIPTS_PATH}/server-registry-start.sh" "${_INSTALL_DIR}" \
                                                               "${_COVERAGE_DIR}" \
                                                               "${_SERVER_PORT}"
            """.stripIndent()
          }
        }
      }
    }
    stage('Check component-runtime server') {
      steps {
        withCredentials([_NEXUS_CREDENTIALS]) {
          script {
            sh "bash ${_SCRIPTS_PATH}/server-check.sh ${_SERVER_PORT}"
          }
        }
      }
    }
    stage('Execute Test') {
      steps {
        withCredentials([_NEXUS_CREDENTIALS, _TENANT_ID_RD]) {
          sh """
            bash ${_SCRIPTS_PATH}/apitester-run.sh ${_TESTS_PATH}\
                                                   ${MAVEN_SETTINGS}\
                                                   ${tenantInstance}\
                                                   ${componentRuntimeApiTenantId_Rd} \
                                                   ${apiTesterEnv}
            """.stripIndent()
        }
      }
      post {
        always {
          println "Artifact TEST_RESULTS: ${_ARTIFACT_TEST_RESULTS}\\n"
          archiveArtifacts artifacts: "${_ARTIFACT_TEST_RESULTS}", allowEmptyArchive: false, onlyIfSuccessful: false
          println "Artifact COVERAGE: ${_ARTIFACT_COVERAGE}\\n"
          archiveArtifacts artifacts: "${_ARTIFACT_COVERAGE}", allowEmptyArchive: false, onlyIfSuccessful: false
        }
      }
    }
  }
  /**
   * post stages
   */
  post {
    always {

      script {
        withCredentials([_NEXUS_CREDENTIALS]) {
          sh """
            printf "======== Stop server\n"
            bash ${_SCRIPTS_PATH}/server-registry-stop.sh ${_INSTALL_DIR}
            printf "======== Generate jacoco report \n"
            bash ${_SCRIPTS_PATH}/jacoco-report.sh ${_INSTALL_DIR} ${_COVERAGE_DIR}
            printf "======== Generate Html reports\n"
            bash ${_SCRIPTS_PATH}/jacoco-html.sh ${_TESTS_PATH} ${MAVEN_SETTINGS}
          """
          archiveJenkinsLog()
        }
      }

      // recordIssues is a multi result file publisher allowing to have the same publish format on multiples analysis.
      recordIssues (
        // By default, static analysis results are only recorded for stable or unstable builds,
        // but not for failed builds: analysis results might be inaccurate if the build failed.
        enabledForFailure: true,
        // If there are errors while scanning the console log or files for issues (e.g., file pattern matches no files,
        // source files could not be copied, etc.) then the warning plugin will show these errors in a separate
        // view but does not alter the build state.
        failOnError: false,
        tools: [
          // Scan and publish to do and fix me in api test files
          taskScanner(
            id: 'todo-tck-api-test',
            name: 'api-test Todo(low)/Fixme(high)',
            includePattern: _API_TEST_FILES_PATTERN,
            ignoreCase: true,
            highTags: 'FIX_ME, FIXME',
            lowTags: 'TO_DO, TODO'
          ),
          // Publish api tests as junit
          junitParser(
            id: 'unit-test',
            name: 'tcomp API Test',
            pattern: _API_TEST_RESULT_PATTERN
          )
        ]
      )

      // Talend Test Orchestrator only work with the basic junit plugin
      // TODO: TTO-562 - Implement recordIssues in TTO to stop using junit
      junit(
        checksName: 'tcomp API Test for tto',
        keepLongStdio: true, // Standard output/error will be retained in the test results after the build completes.
        testResults: _API_TEST_RESULT_PATTERN,
        skipMarkingBuildUnstable: false,  // junitParser already publish job status.
        allowEmptyResults: true, // Do not fail a build on missing test result files or empty test results.
      )

      script {
        println "====== Publish API Coverage"
        publishCoverage adapters: [jacocoAdapter("**/coverage/report.xml")]
        println "====== Publish HTML API Coverage"
        publishHTML([
          allowMissing         : true,
          alwaysLinkToLastBuild: false,
          keepAll              : true,
          reportDir            : "${_COVERAGE_DIR}/html",
          reportFiles          : 'index.html',
          reportName           : 'API Coverage',
          reportTitles         : 'API Coverage'
        ])
      }

      // FIXME: TCOMP-2244	Meecrowave stop doesn't work so the artifact cmd is failing (file nos accessible)
      //println "Artifact LOGS_COMPONENT_SERVER: ${_ARTIFACT_LOGS_COMPONENT_SERVER}\\n"
      //archiveArtifacts artifacts: "${_ARTIFACT_LOGS_COMPONENT_SERVER}", allowEmptyArchive: false, onlyIfSuccessful: false
      //println "Artifact LOGS_MEECROWAVE: ${_ARTIFACT_LOGS_MEECROWAVE}\\n"
      //archiveArtifacts artifacts: "${_ARTIFACT_LOGS_MEECROWAVE}", allowEmptyArchive: false, onlyIfSuccessful: false

      script {
        if (params.JENKINS_DEBUG) {
          jenkinsBreakpoint()
        }
      }
    }
  }
}

/**
 * Append a new line to job description
 * This is MARKDOWN, do not forget double space at the end of line
 *
 * @param new line
 * @return void
 */
private void job_description_append(String new_line) {
  if (currentBuild.description == null) {
    println "Create the job description with: \n$new_line"
    currentBuild.description = new_line
  } else {
    println "Edit the job description adding: $new_line"
    currentBuild.description = currentBuild.description + '\n' + new_line
  }
}

/**
 * Implement a simple breakpoint to stop actual job
 * Use the method anywhere you need to stop
 * The first usage is to keep the pod alive on post stage.
 * Change and restore the job description to be more visible
 *
 * @param job_description_to_backup
 * @return void
 */
private void jenkinsBreakpoint() {
  // Backup the description
  String job_description_backup = currentBuild.description
  // updating build description
  currentBuild.description = "ACTION NEEDED TO CONTINUE \n ${job_description_backup}"
  // Request user action
  input message: 'Finish the job?', ok: 'Yes'
  // updating build description
  currentBuild.description = "$job_description_backup"
}

/**
 * Extract actual jenkins job log content, store it in "build_log.txt"
 *
 * @param None
 * @return Nothing
 */
private void archiveJenkinsLog() {

  println "Extract the jenkins log file"
  String newLog = Jenkins.getInstance().getItemByFullName(env.JOB_NAME)
    .getBuildByNumber(env.BUILD_NUMBER.toInteger())
    .logFile.text
  // copy the log in the job's own workspace
  writeFile file: "raw_log.txt", text: newLog

  // Clean jenkins log file, could do better with a "ansi2txt < raw_log.txt" instead of "cat raw_log.txt"
  // https://en.wikipedia.org/wiki/ANSI_escape_code
  // Also could be good to replace '8m0m' by '' when common lib will be in place
  sh """
      cat raw_log.txt | col -b | sed 's;ha:////[[:print:]]*AAAA[=]*;;g' > build_log.txt
    """

  archiveArtifacts artifacts: '**/build_log.txt', allowEmptyArchive: true, onlyIfSuccessful: false
}